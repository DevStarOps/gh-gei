// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public static partial class GithubGraphQLClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::OctoshiftCLI.GraphQL.State.GithubGraphQLClientStoreAccessor> AddGithubGraphQLClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::OctoshiftCLI.GraphQL.State.GithubGraphQLClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.CreateMigrationSourceMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GetMigrationQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GetOrganizationInfoQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GrantMigratorRoleMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.RevokeMigratorRoleMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.StartRepositoryMigrationMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GithubGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.IGithubGraphQLClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::OctoshiftCLI.GraphQL.State.GithubGraphQLClientStoreAccessor>("GithubGraphQLClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GithubGraphQLClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, global::OctoshiftCLI.GraphQL.CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource>, global::OctoshiftCLI.GraphQL.State.CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AddedToProjectEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AppEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_App>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AppFromAppEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AssignedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AssignedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AssignedEventFromAssignedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AutoMergeDisabledEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AutoMergeEnabledEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AutoRebaseEnabledEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AutoSquashEnabledEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AutomaticBaseChangeFailedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_AutomaticBaseChangeSucceededEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_BaseRefChangedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_BaseRefDeletedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_BaseRefForcePushedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BlobEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Blob>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BlobFromBlobEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BotEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Bot>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BotFromBotEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_BranchProtectionRule>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_BypassForcePushAllowance>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_BypassPullRequestAllowance>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CWEEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CWE>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CWEFromCWEEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckRunEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CheckRun>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CheckRunFromCheckRunEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CheckSuite>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CheckSuiteFromCheckSuiteEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ClosedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ClosedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ClosedEventFromClosedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CodeOfConduct>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CodeOfConductFromCodeOfConductEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CommentDeletedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Commit>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CommitFromCommitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CommitComment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CommitCommentFromCommitCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CommitCommentThread>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ConnectedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ConnectedEventFromConnectedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ConvertToDraftEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ConvertedNoteToIssueEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ConvertedToDiscussionEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_CrossReferencedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DemilestonedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployKeyEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DeployKey>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DeployKeyFromDeployKeyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DeployedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DeployedEventFromDeployedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Deployment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DeploymentFromDeploymentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DeploymentEnvironmentChangedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DeploymentReview>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DeploymentStatus>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DisconnectedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Discussion>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DiscussionFromDiscussionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DiscussionCategory>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_DiscussionComment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Enterprise>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseFromEnterpriseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseAdministratorInvitation>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseIdentityProvider>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseRepositoryInfo>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseServerInstallation>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseServerUserAccount>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseServerUserAccountEmail>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseServerUserAccountsUpload>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_EnterpriseUserAccount>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnvironmentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Environment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_EnvironmentFromEnvironmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ExternalIdentity>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Gist>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_GistFromGistEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistCommentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_GistComment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_GistCommentFromGistCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_HeadRefDeletedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_HeadRefForcePushedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_HeadRefRestoredEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ImportEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Import>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ImportFromImportEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_IpAllowListEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Issue>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_IssueFromIssueEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueCommentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_IssueComment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_IssueCommentFromIssueCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabelEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Label>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_LabelFromLabelEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabeledEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_LabeledEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_LabeledEventFromLabeledEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LanguageEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Language>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_LanguageFromLanguageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LicenseEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_License>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_LicenseFromLicenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LockedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_LockedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_LockedEventFromLockedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MannequinEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Mannequin>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MannequinFromMannequinEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MarkedAsDuplicateEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MarketplaceCategory>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MarketplaceListing>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MembersCanDeleteReposClearAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MembersCanDeleteReposDisableAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MembersCanDeleteReposEnableAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MentionedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MentionedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MentionedEventFromMentionedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MergedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MergedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MergedEventFromMergedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MigrationSource>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MigrationSourceFromMigrationSourceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestoneEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Milestone>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MilestoneFromMilestoneEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MilestonedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MilestonedEventFromMilestonedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MovedColumnsInProjectEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OIDCProvider>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OIDCProviderFromOIDCProviderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OauthApplicationCreateAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgAddBillingManagerAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgAddMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgBlockUserAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgCreateAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgDisableSamlAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgEnableSamlAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgInviteMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgInviteToBusinessAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgRemoveBillingManagerAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgRemoveMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgRestoreMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgUnblockUserAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgUpdateMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Organization>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrganizationFromOrganizationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrganizationIdentityProvider>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_OrganizationInvitation>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Package>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PackageFromPackageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageFileEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PackageFile>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PackageFileFromPackageFileEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageTagEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PackageTag>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PackageTagFromPackageTagEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageVersionEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PackageVersion>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PackageVersionFromPackageVersionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PinnedDiscussion>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PinnedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PinnedEventFromPinnedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PinnedIssue>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PinnedIssueFromPinnedIssueEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Project>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ProjectFromProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectCardEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ProjectCard>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ProjectCardFromProjectCardEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ProjectColumn>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ProjectColumnFromProjectColumnEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ProjectNext>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ProjectNextFromProjectNextEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ProjectNextItem>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ProjectNextItemFieldValue>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PublicKeyEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PublicKey>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PublicKeyFromPublicKeyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PullRequest>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PullRequestFromPullRequestEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PullRequestCommit>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PullRequestCommitCommentThread>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PullRequestReview>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PullRequestReviewComment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PullRequestReviewThread>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Push>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PushFromPushEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_PushAllowance>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_PushAllowanceFromPushAllowanceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReactionEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Reaction>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReactionFromReactionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReadyForReviewEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RefEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Ref>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RefFromRefEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReferencedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReferencedEventFromReferencedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Release>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReleaseFromReleaseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReleaseAsset>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RemovedFromProjectEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RenamedTitleEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReopenedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReopenedEventFromReopenedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoAccessAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoAddMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoAddTopicAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoArchivedAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoChangeMergeSettingAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoCreateAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoDestroyAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoRemoveMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepoRemoveTopicAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Repository>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryFromRepositoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepositoryInvitation>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepositoryMigration>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepositoryTopic>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_RepositoryVulnerabilityAlert>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReviewDismissalAllowance>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReviewDismissedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReviewRequest>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReviewRequestFromReviewRequestEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReviewRequestRemovedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_ReviewRequestedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SavedReplyEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SavedReply>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SavedReplyFromSavedReplyEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SecurityAdvisory>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SponsorsActivity>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SponsorsListing>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SponsorsListingFromSponsorsListingEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SponsorsTier>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SponsorsTierFromSponsorsTierEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Sponsorship>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SponsorshipFromSponsorshipEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SponsorshipNewsletter>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Status>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_StatusFromStatusEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_StatusCheckRollup>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusContextEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_StatusContext>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_StatusContextFromStatusContextEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_SubscribedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_SubscribedEventFromSubscribedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TagEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Tag>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TagFromTagEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Team>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamFromTeamEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamAddMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamAddRepositoryAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamChangeParentTeamAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamDiscussion>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamDiscussionComment>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamRemoveMemberAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TeamRemoveRepositoryAuditEntry>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TopicEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Topic>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TopicFromTopicEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TransferredEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_TransferredEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TransferredEventFromTransferredEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TreeEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Tree>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_TreeFromTreeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UnassignedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UnassignedEventFromUnassignedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UnlabeledEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UnlockedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UnlockedEventFromUnlockedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UnmarkedAsDuplicateEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UnpinnedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UnsubscribedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_User>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UserFromUserEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UserBlockedEvent>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserContentEditEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UserContentEdit>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UserContentEditFromUserContentEditEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserStatusEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_UserStatus>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_UserStatusFromUserStatusEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_VerifiableDomain>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_Workflow>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_WorkflowFromWorkflowEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_WorkflowRun>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_WorkflowRunFromWorkflowRunEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, global::OctoshiftCLI.GraphQL.GetMigration_Node_MigrationSource_MigrationSource>, global::OctoshiftCLI.GraphQL.State.GetMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, global::OctoshiftCLI.GraphQL.GetOrganizationInfo_Organization_Organization>, global::OctoshiftCLI.GraphQL.State.GetOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, global::OctoshiftCLI.GraphQL.StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration>, global::OctoshiftCLI.GraphQL.State.StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, global::OctoshiftCLI.GraphQL.StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource>, global::OctoshiftCLI.GraphQL.State.StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::OctoshiftCLI.GraphQL.MigrationSourceTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::OctoshiftCLI.GraphQL.MigrationStateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::OctoshiftCLI.GraphQL.ActorTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.UrlSerializer("URI"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>, global::OctoshiftCLI.GraphQL.State.CreateMigrationSourceResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>, global::OctoshiftCLI.GraphQL.State.CreateMigrationSourceBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.CreateMigrationSourceMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.CreateMigrationSourceMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetMigrationResult>, global::OctoshiftCLI.GraphQL.State.GetMigrationResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetMigrationResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.IGetMigrationQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetMigrationResult>, global::OctoshiftCLI.GraphQL.State.GetMigrationBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OctoshiftCLI.GraphQL.IGetMigrationResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetMigrationResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetMigrationResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.GetMigrationQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.IGetMigrationQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GetMigrationQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>, global::OctoshiftCLI.GraphQL.State.GetOrganizationInfoResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>, global::OctoshiftCLI.GraphQL.State.GetOrganizationInfoBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.GetOrganizationInfoQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GetOrganizationInfoQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>, global::OctoshiftCLI.GraphQL.State.GrantMigratorRoleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>, global::OctoshiftCLI.GraphQL.State.GrantMigratorRoleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.GrantMigratorRoleMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GrantMigratorRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>, global::OctoshiftCLI.GraphQL.State.RevokeMigratorRoleResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>, global::OctoshiftCLI.GraphQL.State.RevokeMigratorRoleBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.RevokeMigratorRoleMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.RevokeMigratorRoleMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>, global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>, global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.StartRepositoryMigrationMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.StartRepositoryMigrationMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::OctoshiftCLI.GraphQL.State.GithubGraphQLClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.GithubGraphQLClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OctoshiftCLI.GraphQL.IGithubGraphQLClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OctoshiftCLI.GraphQL.GithubGraphQLClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace OctoshiftCLI.GraphQL
{
    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourceResult : global::System.IEquatable<CreateMigrationSourceResult>, ICreateMigrationSourceResult
    {
        public CreateMigrationSourceResult(global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource? createMigrationSource)
        {
            CreateMigrationSource = createMigrationSource;
        }

        /// <summary>
        /// Creates an Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource? CreateMigrationSource { get; }

        public virtual global::System.Boolean Equals(CreateMigrationSourceResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateMigrationSource is null && other.CreateMigrationSource is null) || CreateMigrationSource != null && CreateMigrationSource.Equals(other.CreateMigrationSource)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateMigrationSourceResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateMigrationSource != null)
                {
                    hash ^= 397 * CreateMigrationSource.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Autogenerated return type of CreateMigrationSource
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload : global::System.IEquatable<CreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload>, ICreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload
    {
        public CreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload(global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource_MigrationSource? migrationSource)
        {
            MigrationSource = migrationSource;
        }

        /// <summary>
        /// The created Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource_MigrationSource? MigrationSource { get; }

        public virtual global::System.Boolean Equals(CreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((MigrationSource is null && other.MigrationSource is null) || MigrationSource != null && MigrationSource.Equals(other.MigrationSource)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MigrationSource != null)
                {
                    hash ^= 397 * MigrationSource.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource : global::System.IEquatable<CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource>, ICreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource
    {
        public CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource(global::System.String id, global::System.String name, global::System.Uri url, global::OctoshiftCLI.GraphQL.MigrationSourceType type)
        {
            Id = id;
            Name = name;
            Url = url;
            Type = type;
        }

        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The Octoshift migration source URL.
        /// </summary>
        public global::System.Uri Url { get; }

        /// <summary>
        /// The Octoshift migration source type.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationSourceType Type { get; }

        public virtual global::System.Boolean Equals(CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Url.Equals(other.Url) && Type.Equals(other.Type);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Url.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateMigrationSourceResult
    {
        /// <summary>
        /// Creates an Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource? CreateMigrationSource { get; }
    }

    /// <summary>
    /// Autogenerated return type of CreateMigrationSource
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateMigrationSource_CreateMigrationSource
    {
        /// <summary>
        /// The created Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource_MigrationSource? MigrationSource { get; }
    }

    /// <summary>
    /// Autogenerated return type of CreateMigrationSource
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload : ICreateMigrationSource_CreateMigrationSource
    {
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateMigrationSource_CreateMigrationSource_MigrationSource
    {
        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The Octoshift migration source URL.
        /// </summary>
        public global::System.Uri Url { get; }

        /// <summary>
        /// The Octoshift migration source type.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationSourceType Type { get; }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource : ICreateMigrationSource_CreateMigrationSource_MigrationSource
    {
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigrationResult : global::System.IEquatable<GetMigrationResult>, IGetMigrationResult
    {
        public GetMigrationResult(global::OctoshiftCLI.GraphQL.IGetMigration_Node? node)
        {
            Node = node;
        }

        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGetMigration_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetMigrationResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigrationResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'added_to_project' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AddedToProjectEvent : global::System.IEquatable<GetMigration_Node_AddedToProjectEvent>, IGetMigration_Node_AddedToProjectEvent
    {
        public GetMigration_Node_AddedToProjectEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AddedToProjectEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AddedToProjectEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A GitHub App.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_App : global::System.IEquatable<GetMigration_Node_App>, IGetMigration_Node_App
    {
        public GetMigration_Node_App()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_App? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_App)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'assigned' event on any assignable object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AssignedEvent : global::System.IEquatable<GetMigration_Node_AssignedEvent>, IGetMigration_Node_AssignedEvent
    {
        public GetMigration_Node_AssignedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AssignedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AssignedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'auto_merge_disabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoMergeDisabledEvent : global::System.IEquatable<GetMigration_Node_AutoMergeDisabledEvent>, IGetMigration_Node_AutoMergeDisabledEvent
    {
        public GetMigration_Node_AutoMergeDisabledEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AutoMergeDisabledEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AutoMergeDisabledEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'auto_merge_enabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoMergeEnabledEvent : global::System.IEquatable<GetMigration_Node_AutoMergeEnabledEvent>, IGetMigration_Node_AutoMergeEnabledEvent
    {
        public GetMigration_Node_AutoMergeEnabledEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AutoMergeEnabledEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AutoMergeEnabledEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'auto_rebase_enabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoRebaseEnabledEvent : global::System.IEquatable<GetMigration_Node_AutoRebaseEnabledEvent>, IGetMigration_Node_AutoRebaseEnabledEvent
    {
        public GetMigration_Node_AutoRebaseEnabledEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AutoRebaseEnabledEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AutoRebaseEnabledEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'auto_squash_enabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoSquashEnabledEvent : global::System.IEquatable<GetMigration_Node_AutoSquashEnabledEvent>, IGetMigration_Node_AutoSquashEnabledEvent
    {
        public GetMigration_Node_AutoSquashEnabledEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AutoSquashEnabledEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AutoSquashEnabledEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'automatic_base_change_failed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutomaticBaseChangeFailedEvent : global::System.IEquatable<GetMigration_Node_AutomaticBaseChangeFailedEvent>, IGetMigration_Node_AutomaticBaseChangeFailedEvent
    {
        public GetMigration_Node_AutomaticBaseChangeFailedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AutomaticBaseChangeFailedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AutomaticBaseChangeFailedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'automatic_base_change_succeeded' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutomaticBaseChangeSucceededEvent : global::System.IEquatable<GetMigration_Node_AutomaticBaseChangeSucceededEvent>, IGetMigration_Node_AutomaticBaseChangeSucceededEvent
    {
        public GetMigration_Node_AutomaticBaseChangeSucceededEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_AutomaticBaseChangeSucceededEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_AutomaticBaseChangeSucceededEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'base_ref_changed' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BaseRefChangedEvent : global::System.IEquatable<GetMigration_Node_BaseRefChangedEvent>, IGetMigration_Node_BaseRefChangedEvent
    {
        public GetMigration_Node_BaseRefChangedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_BaseRefChangedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_BaseRefChangedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'base_ref_deleted' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BaseRefDeletedEvent : global::System.IEquatable<GetMigration_Node_BaseRefDeletedEvent>, IGetMigration_Node_BaseRefDeletedEvent
    {
        public GetMigration_Node_BaseRefDeletedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_BaseRefDeletedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_BaseRefDeletedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'base_ref_force_pushed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BaseRefForcePushedEvent : global::System.IEquatable<GetMigration_Node_BaseRefForcePushedEvent>, IGetMigration_Node_BaseRefForcePushedEvent
    {
        public GetMigration_Node_BaseRefForcePushedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_BaseRefForcePushedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_BaseRefForcePushedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git blob.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Blob : global::System.IEquatable<GetMigration_Node_Blob>, IGetMigration_Node_Blob
    {
        public GetMigration_Node_Blob()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Blob? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Blob)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A special type of user which takes actions on behalf of GitHub Apps.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Bot : global::System.IEquatable<GetMigration_Node_Bot>, IGetMigration_Node_Bot
    {
        public GetMigration_Node_Bot()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Bot? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Bot)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A branch protection rule.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BranchProtectionRule : global::System.IEquatable<GetMigration_Node_BranchProtectionRule>, IGetMigration_Node_BranchProtectionRule
    {
        public GetMigration_Node_BranchProtectionRule()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_BranchProtectionRule? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_BranchProtectionRule)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A team or user who has the ability to bypass a force push requirement on a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BypassForcePushAllowance : global::System.IEquatable<GetMigration_Node_BypassForcePushAllowance>, IGetMigration_Node_BypassForcePushAllowance
    {
        public GetMigration_Node_BypassForcePushAllowance()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_BypassForcePushAllowance? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_BypassForcePushAllowance)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A team or user who has the ability to bypass a pull request requirement on a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BypassPullRequestAllowance : global::System.IEquatable<GetMigration_Node_BypassPullRequestAllowance>, IGetMigration_Node_BypassPullRequestAllowance
    {
        public GetMigration_Node_BypassPullRequestAllowance()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_BypassPullRequestAllowance? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_BypassPullRequestAllowance)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A common weakness enumeration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CWE : global::System.IEquatable<GetMigration_Node_CWE>, IGetMigration_Node_CWE
    {
        public GetMigration_Node_CWE()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CWE? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CWE)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A check run.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CheckRun : global::System.IEquatable<GetMigration_Node_CheckRun>, IGetMigration_Node_CheckRun
    {
        public GetMigration_Node_CheckRun()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CheckRun? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CheckRun)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A check suite.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CheckSuite : global::System.IEquatable<GetMigration_Node_CheckSuite>, IGetMigration_Node_CheckSuite
    {
        public GetMigration_Node_CheckSuite()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CheckSuite? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CheckSuite)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'closed' event on any `Closable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ClosedEvent : global::System.IEquatable<GetMigration_Node_ClosedEvent>, IGetMigration_Node_ClosedEvent
    {
        public GetMigration_Node_ClosedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ClosedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ClosedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// The Code of Conduct for a repository
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CodeOfConduct : global::System.IEquatable<GetMigration_Node_CodeOfConduct>, IGetMigration_Node_CodeOfConduct
    {
        public GetMigration_Node_CodeOfConduct()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CodeOfConduct? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CodeOfConduct)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'comment_deleted' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommentDeletedEvent : global::System.IEquatable<GetMigration_Node_CommentDeletedEvent>, IGetMigration_Node_CommentDeletedEvent
    {
        public GetMigration_Node_CommentDeletedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CommentDeletedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CommentDeletedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Commit : global::System.IEquatable<GetMigration_Node_Commit>, IGetMigration_Node_Commit
    {
        public GetMigration_Node_Commit()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Commit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Commit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a comment on a given Commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommitComment : global::System.IEquatable<GetMigration_Node_CommitComment>, IGetMigration_Node_CommitComment
    {
        public GetMigration_Node_CommitComment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CommitComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CommitComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A thread of comments on a commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommitCommentThread : global::System.IEquatable<GetMigration_Node_CommitCommentThread>, IGetMigration_Node_CommitCommentThread
    {
        public GetMigration_Node_CommitCommentThread()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CommitCommentThread? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CommitCommentThread)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'connected' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConnectedEvent : global::System.IEquatable<GetMigration_Node_ConnectedEvent>, IGetMigration_Node_ConnectedEvent
    {
        public GetMigration_Node_ConnectedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ConnectedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ConnectedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'convert_to_draft' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConvertToDraftEvent : global::System.IEquatable<GetMigration_Node_ConvertToDraftEvent>, IGetMigration_Node_ConvertToDraftEvent
    {
        public GetMigration_Node_ConvertToDraftEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ConvertToDraftEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ConvertToDraftEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'converted_note_to_issue' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConvertedNoteToIssueEvent : global::System.IEquatable<GetMigration_Node_ConvertedNoteToIssueEvent>, IGetMigration_Node_ConvertedNoteToIssueEvent
    {
        public GetMigration_Node_ConvertedNoteToIssueEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ConvertedNoteToIssueEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ConvertedNoteToIssueEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'converted_to_discussion' event on a given issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConvertedToDiscussionEvent : global::System.IEquatable<GetMigration_Node_ConvertedToDiscussionEvent>, IGetMigration_Node_ConvertedToDiscussionEvent
    {
        public GetMigration_Node_ConvertedToDiscussionEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ConvertedToDiscussionEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ConvertedToDiscussionEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a mention made by one issue or pull request to another.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CrossReferencedEvent : global::System.IEquatable<GetMigration_Node_CrossReferencedEvent>, IGetMigration_Node_CrossReferencedEvent
    {
        public GetMigration_Node_CrossReferencedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_CrossReferencedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_CrossReferencedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'demilestoned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DemilestonedEvent : global::System.IEquatable<GetMigration_Node_DemilestonedEvent>, IGetMigration_Node_DemilestonedEvent
    {
        public GetMigration_Node_DemilestonedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DemilestonedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DemilestonedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A repository deploy key.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeployKey : global::System.IEquatable<GetMigration_Node_DeployKey>, IGetMigration_Node_DeployKey
    {
        public GetMigration_Node_DeployKey()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DeployKey? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DeployKey)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'deployed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeployedEvent : global::System.IEquatable<GetMigration_Node_DeployedEvent>, IGetMigration_Node_DeployedEvent
    {
        public GetMigration_Node_DeployedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DeployedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DeployedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents triggered deployment instance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Deployment : global::System.IEquatable<GetMigration_Node_Deployment>, IGetMigration_Node_Deployment
    {
        public GetMigration_Node_Deployment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Deployment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Deployment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'deployment_environment_changed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentEnvironmentChangedEvent : global::System.IEquatable<GetMigration_Node_DeploymentEnvironmentChangedEvent>, IGetMigration_Node_DeploymentEnvironmentChangedEvent
    {
        public GetMigration_Node_DeploymentEnvironmentChangedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DeploymentEnvironmentChangedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DeploymentEnvironmentChangedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A deployment review.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentReview : global::System.IEquatable<GetMigration_Node_DeploymentReview>, IGetMigration_Node_DeploymentReview
    {
        public GetMigration_Node_DeploymentReview()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DeploymentReview? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DeploymentReview)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Describes the status of a given deployment attempt.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentStatus : global::System.IEquatable<GetMigration_Node_DeploymentStatus>, IGetMigration_Node_DeploymentStatus
    {
        public GetMigration_Node_DeploymentStatus()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DeploymentStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DeploymentStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'disconnected' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DisconnectedEvent : global::System.IEquatable<GetMigration_Node_DisconnectedEvent>, IGetMigration_Node_DisconnectedEvent
    {
        public GetMigration_Node_DisconnectedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DisconnectedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DisconnectedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A discussion in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Discussion : global::System.IEquatable<GetMigration_Node_Discussion>, IGetMigration_Node_Discussion
    {
        public GetMigration_Node_Discussion()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Discussion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Discussion)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A category for discussions in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DiscussionCategory : global::System.IEquatable<GetMigration_Node_DiscussionCategory>, IGetMigration_Node_DiscussionCategory
    {
        public GetMigration_Node_DiscussionCategory()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DiscussionCategory? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DiscussionCategory)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A comment on a discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DiscussionComment : global::System.IEquatable<GetMigration_Node_DiscussionComment>, IGetMigration_Node_DiscussionComment
    {
        public GetMigration_Node_DiscussionComment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_DiscussionComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_DiscussionComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An account to manage multiple organizations with consolidated policy and billing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Enterprise : global::System.IEquatable<GetMigration_Node_Enterprise>, IGetMigration_Node_Enterprise
    {
        public GetMigration_Node_Enterprise()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Enterprise? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Enterprise)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An invitation for a user to become an owner or billing manager of an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseAdministratorInvitation : global::System.IEquatable<GetMigration_Node_EnterpriseAdministratorInvitation>, IGetMigration_Node_EnterpriseAdministratorInvitation
    {
        public GetMigration_Node_EnterpriseAdministratorInvitation()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseAdministratorInvitation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseAdministratorInvitation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An identity provider configured to provision identities for an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseIdentityProvider : global::System.IEquatable<GetMigration_Node_EnterpriseIdentityProvider>, IGetMigration_Node_EnterpriseIdentityProvider
    {
        public GetMigration_Node_EnterpriseIdentityProvider()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseIdentityProvider? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseIdentityProvider)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A subset of repository information queryable from an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseRepositoryInfo : global::System.IEquatable<GetMigration_Node_EnterpriseRepositoryInfo>, IGetMigration_Node_EnterpriseRepositoryInfo
    {
        public GetMigration_Node_EnterpriseRepositoryInfo()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseRepositoryInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseRepositoryInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerInstallation : global::System.IEquatable<GetMigration_Node_EnterpriseServerInstallation>, IGetMigration_Node_EnterpriseServerInstallation
    {
        public GetMigration_Node_EnterpriseServerInstallation()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseServerInstallation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseServerInstallation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A user account on an Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerUserAccount : global::System.IEquatable<GetMigration_Node_EnterpriseServerUserAccount>, IGetMigration_Node_EnterpriseServerUserAccount
    {
        public GetMigration_Node_EnterpriseServerUserAccount()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseServerUserAccount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseServerUserAccount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An email belonging to a user account on an Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerUserAccountEmail : global::System.IEquatable<GetMigration_Node_EnterpriseServerUserAccountEmail>, IGetMigration_Node_EnterpriseServerUserAccountEmail
    {
        public GetMigration_Node_EnterpriseServerUserAccountEmail()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseServerUserAccountEmail? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseServerUserAccountEmail)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A user accounts upload from an Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerUserAccountsUpload : global::System.IEquatable<GetMigration_Node_EnterpriseServerUserAccountsUpload>, IGetMigration_Node_EnterpriseServerUserAccountsUpload
    {
        public GetMigration_Node_EnterpriseServerUserAccountsUpload()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseServerUserAccountsUpload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseServerUserAccountsUpload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseUserAccount : global::System.IEquatable<GetMigration_Node_EnterpriseUserAccount>, IGetMigration_Node_EnterpriseUserAccount
    {
        public GetMigration_Node_EnterpriseUserAccount()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_EnterpriseUserAccount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_EnterpriseUserAccount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An environment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Environment : global::System.IEquatable<GetMigration_Node_Environment>, IGetMigration_Node_Environment
    {
        public GetMigration_Node_Environment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Environment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Environment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An external identity provisioned by SAML SSO or SCIM.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ExternalIdentity : global::System.IEquatable<GetMigration_Node_ExternalIdentity>, IGetMigration_Node_ExternalIdentity
    {
        public GetMigration_Node_ExternalIdentity()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ExternalIdentity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ExternalIdentity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A Gist.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Gist : global::System.IEquatable<GetMigration_Node_Gist>, IGetMigration_Node_Gist
    {
        public GetMigration_Node_Gist()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Gist? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Gist)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a comment on an Gist.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_GistComment : global::System.IEquatable<GetMigration_Node_GistComment>, IGetMigration_Node_GistComment
    {
        public GetMigration_Node_GistComment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_GistComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_GistComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'head_ref_deleted' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_HeadRefDeletedEvent : global::System.IEquatable<GetMigration_Node_HeadRefDeletedEvent>, IGetMigration_Node_HeadRefDeletedEvent
    {
        public GetMigration_Node_HeadRefDeletedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_HeadRefDeletedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_HeadRefDeletedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'head_ref_force_pushed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_HeadRefForcePushedEvent : global::System.IEquatable<GetMigration_Node_HeadRefForcePushedEvent>, IGetMigration_Node_HeadRefForcePushedEvent
    {
        public GetMigration_Node_HeadRefForcePushedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_HeadRefForcePushedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_HeadRefForcePushedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'head_ref_restored' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_HeadRefRestoredEvent : global::System.IEquatable<GetMigration_Node_HeadRefRestoredEvent>, IGetMigration_Node_HeadRefRestoredEvent
    {
        public GetMigration_Node_HeadRefRestoredEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_HeadRefRestoredEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_HeadRefRestoredEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An import to GitHub
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Import : global::System.IEquatable<GetMigration_Node_Import>, IGetMigration_Node_Import
    {
        public GetMigration_Node_Import()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Import? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Import)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An IP address or range of addresses that is allowed to access an owner's resources.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_IpAllowListEntry : global::System.IEquatable<GetMigration_Node_IpAllowListEntry>, IGetMigration_Node_IpAllowListEntry
    {
        public GetMigration_Node_IpAllowListEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_IpAllowListEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_IpAllowListEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Issue : global::System.IEquatable<GetMigration_Node_Issue>, IGetMigration_Node_Issue
    {
        public GetMigration_Node_Issue()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Issue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Issue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a comment on an Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_IssueComment : global::System.IEquatable<GetMigration_Node_IssueComment>, IGetMigration_Node_IssueComment
    {
        public GetMigration_Node_IssueComment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_IssueComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_IssueComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Label : global::System.IEquatable<GetMigration_Node_Label>, IGetMigration_Node_Label
    {
        public GetMigration_Node_Label()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Label? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Label)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'labeled' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LabeledEvent : global::System.IEquatable<GetMigration_Node_LabeledEvent>, IGetMigration_Node_LabeledEvent
    {
        public GetMigration_Node_LabeledEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_LabeledEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_LabeledEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a given language found in repositories.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Language : global::System.IEquatable<GetMigration_Node_Language>, IGetMigration_Node_Language
    {
        public GetMigration_Node_Language()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Language? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Language)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A repository's open source license
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_License : global::System.IEquatable<GetMigration_Node_License>, IGetMigration_Node_License
    {
        public GetMigration_Node_License()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_License? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_License)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'locked' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LockedEvent : global::System.IEquatable<GetMigration_Node_LockedEvent>, IGetMigration_Node_LockedEvent
    {
        public GetMigration_Node_LockedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_LockedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_LockedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A placeholder user for attribution of imported data on GitHub.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Mannequin : global::System.IEquatable<GetMigration_Node_Mannequin>, IGetMigration_Node_Mannequin
    {
        public GetMigration_Node_Mannequin()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Mannequin? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Mannequin)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'marked_as_duplicate' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MarkedAsDuplicateEvent : global::System.IEquatable<GetMigration_Node_MarkedAsDuplicateEvent>, IGetMigration_Node_MarkedAsDuplicateEvent
    {
        public GetMigration_Node_MarkedAsDuplicateEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MarkedAsDuplicateEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MarkedAsDuplicateEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A public description of a Marketplace category.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MarketplaceCategory : global::System.IEquatable<GetMigration_Node_MarketplaceCategory>, IGetMigration_Node_MarketplaceCategory
    {
        public GetMigration_Node_MarketplaceCategory()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MarketplaceCategory? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MarketplaceCategory)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A listing in the GitHub integration marketplace.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MarketplaceListing : global::System.IEquatable<GetMigration_Node_MarketplaceListing>, IGetMigration_Node_MarketplaceListing
    {
        public GetMigration_Node_MarketplaceListing()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MarketplaceListing? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MarketplaceListing)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a members_can_delete_repos.clear event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MembersCanDeleteReposClearAuditEntry : global::System.IEquatable<GetMigration_Node_MembersCanDeleteReposClearAuditEntry>, IGetMigration_Node_MembersCanDeleteReposClearAuditEntry
    {
        public GetMigration_Node_MembersCanDeleteReposClearAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MembersCanDeleteReposClearAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MembersCanDeleteReposClearAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a members_can_delete_repos.disable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MembersCanDeleteReposDisableAuditEntry : global::System.IEquatable<GetMigration_Node_MembersCanDeleteReposDisableAuditEntry>, IGetMigration_Node_MembersCanDeleteReposDisableAuditEntry
    {
        public GetMigration_Node_MembersCanDeleteReposDisableAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MembersCanDeleteReposDisableAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MembersCanDeleteReposDisableAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a members_can_delete_repos.enable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MembersCanDeleteReposEnableAuditEntry : global::System.IEquatable<GetMigration_Node_MembersCanDeleteReposEnableAuditEntry>, IGetMigration_Node_MembersCanDeleteReposEnableAuditEntry
    {
        public GetMigration_Node_MembersCanDeleteReposEnableAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MembersCanDeleteReposEnableAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MembersCanDeleteReposEnableAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'mentioned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MentionedEvent : global::System.IEquatable<GetMigration_Node_MentionedEvent>, IGetMigration_Node_MentionedEvent
    {
        public GetMigration_Node_MentionedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MentionedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MentionedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'merged' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MergedEvent : global::System.IEquatable<GetMigration_Node_MergedEvent>, IGetMigration_Node_MergedEvent
    {
        public GetMigration_Node_MergedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MergedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MergedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MigrationSource : global::System.IEquatable<GetMigration_Node_MigrationSource>, IGetMigration_Node_MigrationSource
    {
        public GetMigration_Node_MigrationSource()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MigrationSource? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MigrationSource)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Milestone object on a given repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Milestone : global::System.IEquatable<GetMigration_Node_Milestone>, IGetMigration_Node_Milestone
    {
        public GetMigration_Node_Milestone()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Milestone? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Milestone)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'milestoned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MilestonedEvent : global::System.IEquatable<GetMigration_Node_MilestonedEvent>, IGetMigration_Node_MilestonedEvent
    {
        public GetMigration_Node_MilestonedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MilestonedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MilestonedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'moved_columns_in_project' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MovedColumnsInProjectEvent : global::System.IEquatable<GetMigration_Node_MovedColumnsInProjectEvent>, IGetMigration_Node_MovedColumnsInProjectEvent
    {
        public GetMigration_Node_MovedColumnsInProjectEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_MovedColumnsInProjectEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MovedColumnsInProjectEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An OIDC identity provider configured to provision identities for an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OIDCProvider : global::System.IEquatable<GetMigration_Node_OIDCProvider>, IGetMigration_Node_OIDCProvider
    {
        public GetMigration_Node_OIDCProvider()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OIDCProvider? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OIDCProvider)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a oauth_application.create event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OauthApplicationCreateAuditEntry : global::System.IEquatable<GetMigration_Node_OauthApplicationCreateAuditEntry>, IGetMigration_Node_OauthApplicationCreateAuditEntry
    {
        public GetMigration_Node_OauthApplicationCreateAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OauthApplicationCreateAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OauthApplicationCreateAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.add_billing_manager
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgAddBillingManagerAuditEntry : global::System.IEquatable<GetMigration_Node_OrgAddBillingManagerAuditEntry>, IGetMigration_Node_OrgAddBillingManagerAuditEntry
    {
        public GetMigration_Node_OrgAddBillingManagerAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgAddBillingManagerAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgAddBillingManagerAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.add_member
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgAddMemberAuditEntry : global::System.IEquatable<GetMigration_Node_OrgAddMemberAuditEntry>, IGetMigration_Node_OrgAddMemberAuditEntry
    {
        public GetMigration_Node_OrgAddMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgAddMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgAddMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.block_user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgBlockUserAuditEntry : global::System.IEquatable<GetMigration_Node_OrgBlockUserAuditEntry>, IGetMigration_Node_OrgBlockUserAuditEntry
    {
        public GetMigration_Node_OrgBlockUserAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgBlockUserAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgBlockUserAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.config.disable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry : global::System.IEquatable<GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry>, IGetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry
    {
        public GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.config.enable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry : global::System.IEquatable<GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry>, IGetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry
    {
        public GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.create event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgCreateAuditEntry : global::System.IEquatable<GetMigration_Node_OrgCreateAuditEntry>, IGetMigration_Node_OrgCreateAuditEntry
    {
        public GetMigration_Node_OrgCreateAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgCreateAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgCreateAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.disable_oauth_app_restrictions event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry : global::System.IEquatable<GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry>, IGetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry
    {
        public GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.disable_saml event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgDisableSamlAuditEntry : global::System.IEquatable<GetMigration_Node_OrgDisableSamlAuditEntry>, IGetMigration_Node_OrgDisableSamlAuditEntry
    {
        public GetMigration_Node_OrgDisableSamlAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgDisableSamlAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgDisableSamlAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.disable_two_factor_requirement event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry : global::System.IEquatable<GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry>, IGetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry
    {
        public GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.enable_oauth_app_restrictions event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry : global::System.IEquatable<GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry>, IGetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry
    {
        public GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.enable_saml event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgEnableSamlAuditEntry : global::System.IEquatable<GetMigration_Node_OrgEnableSamlAuditEntry>, IGetMigration_Node_OrgEnableSamlAuditEntry
    {
        public GetMigration_Node_OrgEnableSamlAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgEnableSamlAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgEnableSamlAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.enable_two_factor_requirement event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry : global::System.IEquatable<GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry>, IGetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry
    {
        public GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.invite_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgInviteMemberAuditEntry : global::System.IEquatable<GetMigration_Node_OrgInviteMemberAuditEntry>, IGetMigration_Node_OrgInviteMemberAuditEntry
    {
        public GetMigration_Node_OrgInviteMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgInviteMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgInviteMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.invite_to_business event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgInviteToBusinessAuditEntry : global::System.IEquatable<GetMigration_Node_OrgInviteToBusinessAuditEntry>, IGetMigration_Node_OrgInviteToBusinessAuditEntry
    {
        public GetMigration_Node_OrgInviteToBusinessAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgInviteToBusinessAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgInviteToBusinessAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.oauth_app_access_approved event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry : global::System.IEquatable<GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry>, IGetMigration_Node_OrgOauthAppAccessApprovedAuditEntry
    {
        public GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.oauth_app_access_denied event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry : global::System.IEquatable<GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry>, IGetMigration_Node_OrgOauthAppAccessDeniedAuditEntry
    {
        public GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.oauth_app_access_requested event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry : global::System.IEquatable<GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry>, IGetMigration_Node_OrgOauthAppAccessRequestedAuditEntry
    {
        public GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.remove_billing_manager event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRemoveBillingManagerAuditEntry : global::System.IEquatable<GetMigration_Node_OrgRemoveBillingManagerAuditEntry>, IGetMigration_Node_OrgRemoveBillingManagerAuditEntry
    {
        public GetMigration_Node_OrgRemoveBillingManagerAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgRemoveBillingManagerAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgRemoveBillingManagerAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.remove_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRemoveMemberAuditEntry : global::System.IEquatable<GetMigration_Node_OrgRemoveMemberAuditEntry>, IGetMigration_Node_OrgRemoveMemberAuditEntry
    {
        public GetMigration_Node_OrgRemoveMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgRemoveMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgRemoveMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.remove_outside_collaborator event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry : global::System.IEquatable<GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry>, IGetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry
    {
        public GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.restore_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRestoreMemberAuditEntry : global::System.IEquatable<GetMigration_Node_OrgRestoreMemberAuditEntry>, IGetMigration_Node_OrgRestoreMemberAuditEntry
    {
        public GetMigration_Node_OrgRestoreMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgRestoreMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgRestoreMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.unblock_user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUnblockUserAuditEntry : global::System.IEquatable<GetMigration_Node_OrgUnblockUserAuditEntry>, IGetMigration_Node_OrgUnblockUserAuditEntry
    {
        public GetMigration_Node_OrgUnblockUserAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgUnblockUserAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgUnblockUserAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.update_default_repository_permission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry : global::System.IEquatable<GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry>, IGetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry
    {
        public GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.update_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateMemberAuditEntry : global::System.IEquatable<GetMigration_Node_OrgUpdateMemberAuditEntry>, IGetMigration_Node_OrgUpdateMemberAuditEntry
    {
        public GetMigration_Node_OrgUpdateMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgUpdateMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgUpdateMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.update_member_repository_creation_permission event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry : global::System.IEquatable<GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry>, IGetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry
    {
        public GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a org.update_member_repository_invitation_permission event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry : global::System.IEquatable<GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry>, IGetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
    {
        public GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An account on GitHub, with one or more owners, that has repositories, members and teams.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Organization : global::System.IEquatable<GetMigration_Node_Organization>, IGetMigration_Node_Organization
    {
        public GetMigration_Node_Organization()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Organization? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Organization)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Identity Provider configured to provision SAML and SCIM identities for Organizations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrganizationIdentityProvider : global::System.IEquatable<GetMigration_Node_OrganizationIdentityProvider>, IGetMigration_Node_OrganizationIdentityProvider
    {
        public GetMigration_Node_OrganizationIdentityProvider()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrganizationIdentityProvider? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrganizationIdentityProvider)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Invitation for a user to an organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrganizationInvitation : global::System.IEquatable<GetMigration_Node_OrganizationInvitation>, IGetMigration_Node_OrganizationInvitation
    {
        public GetMigration_Node_OrganizationInvitation()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_OrganizationInvitation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_OrganizationInvitation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Information for an uploaded package.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Package : global::System.IEquatable<GetMigration_Node_Package>, IGetMigration_Node_Package
    {
        public GetMigration_Node_Package()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Package? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Package)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A file in a package version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageFile : global::System.IEquatable<GetMigration_Node_PackageFile>, IGetMigration_Node_PackageFile
    {
        public GetMigration_Node_PackageFile()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PackageFile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PackageFile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A version tag contains the mapping between a tag name and a version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageTag : global::System.IEquatable<GetMigration_Node_PackageTag>, IGetMigration_Node_PackageTag
    {
        public GetMigration_Node_PackageTag()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PackageTag? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PackageTag)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Information about a specific package version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageVersion : global::System.IEquatable<GetMigration_Node_PackageVersion>, IGetMigration_Node_PackageVersion
    {
        public GetMigration_Node_PackageVersion()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PackageVersion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PackageVersion)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A Pinned Discussion is a discussion pinned to a repository's index page.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PinnedDiscussion : global::System.IEquatable<GetMigration_Node_PinnedDiscussion>, IGetMigration_Node_PinnedDiscussion
    {
        public GetMigration_Node_PinnedDiscussion()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PinnedDiscussion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PinnedDiscussion)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'pinned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PinnedEvent : global::System.IEquatable<GetMigration_Node_PinnedEvent>, IGetMigration_Node_PinnedEvent
    {
        public GetMigration_Node_PinnedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PinnedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PinnedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A Pinned Issue is a issue pinned to a repository's index page.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PinnedIssue : global::System.IEquatable<GetMigration_Node_PinnedIssue>, IGetMigration_Node_PinnedIssue
    {
        public GetMigration_Node_PinnedIssue()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PinnedIssue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PinnedIssue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a private_repository_forking.disable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry : global::System.IEquatable<GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry>, IGetMigration_Node_PrivateRepositoryForkingDisableAuditEntry
    {
        public GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a private_repository_forking.enable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry : global::System.IEquatable<GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry>, IGetMigration_Node_PrivateRepositoryForkingEnableAuditEntry
    {
        public GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Projects manage issues, pull requests and notes within a project owner.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Project : global::System.IEquatable<GetMigration_Node_Project>, IGetMigration_Node_Project
    {
        public GetMigration_Node_Project()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Project? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Project)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A card in a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectCard : global::System.IEquatable<GetMigration_Node_ProjectCard>, IGetMigration_Node_ProjectCard
    {
        public GetMigration_Node_ProjectCard()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ProjectCard? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ProjectCard)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A column inside a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectColumn : global::System.IEquatable<GetMigration_Node_ProjectColumn>, IGetMigration_Node_ProjectColumn
    {
        public GetMigration_Node_ProjectColumn()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ProjectColumn? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ProjectColumn)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// New projects that manage issues, pull requests and drafts using tables and boards.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectNext : global::System.IEquatable<GetMigration_Node_ProjectNext>, IGetMigration_Node_ProjectNext
    {
        public GetMigration_Node_ProjectNext()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ProjectNext? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ProjectNext)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An item within a new Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectNextItem : global::System.IEquatable<GetMigration_Node_ProjectNextItem>, IGetMigration_Node_ProjectNextItem
    {
        public GetMigration_Node_ProjectNextItem()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ProjectNextItem? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ProjectNextItem)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An value of a field in an item of a new Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectNextItemFieldValue : global::System.IEquatable<GetMigration_Node_ProjectNextItemFieldValue>, IGetMigration_Node_ProjectNextItemFieldValue
    {
        public GetMigration_Node_ProjectNextItemFieldValue()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ProjectNextItemFieldValue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ProjectNextItemFieldValue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A user's public key.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PublicKey : global::System.IEquatable<GetMigration_Node_PublicKey>, IGetMigration_Node_PublicKey
    {
        public GetMigration_Node_PublicKey()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PublicKey? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PublicKey)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequest : global::System.IEquatable<GetMigration_Node_PullRequest>, IGetMigration_Node_PullRequest
    {
        public GetMigration_Node_PullRequest()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PullRequest? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PullRequest)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git commit part of a pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestCommit : global::System.IEquatable<GetMigration_Node_PullRequestCommit>, IGetMigration_Node_PullRequestCommit
    {
        public GetMigration_Node_PullRequestCommit()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PullRequestCommit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PullRequestCommit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a commit comment thread part of a pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestCommitCommentThread : global::System.IEquatable<GetMigration_Node_PullRequestCommitCommentThread>, IGetMigration_Node_PullRequestCommitCommentThread
    {
        public GetMigration_Node_PullRequestCommitCommentThread()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PullRequestCommitCommentThread? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PullRequestCommitCommentThread)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A review object for a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestReview : global::System.IEquatable<GetMigration_Node_PullRequestReview>, IGetMigration_Node_PullRequestReview
    {
        public GetMigration_Node_PullRequestReview()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PullRequestReview? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PullRequestReview)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A review comment associated with a given repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestReviewComment : global::System.IEquatable<GetMigration_Node_PullRequestReviewComment>, IGetMigration_Node_PullRequestReviewComment
    {
        public GetMigration_Node_PullRequestReviewComment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PullRequestReviewComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PullRequestReviewComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A threaded list of comments for a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestReviewThread : global::System.IEquatable<GetMigration_Node_PullRequestReviewThread>, IGetMigration_Node_PullRequestReviewThread
    {
        public GetMigration_Node_PullRequestReviewThread()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PullRequestReviewThread? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PullRequestReviewThread)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A Git push.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Push : global::System.IEquatable<GetMigration_Node_Push>, IGetMigration_Node_Push
    {
        public GetMigration_Node_Push()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Push? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Push)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A team, user or app who has the ability to push to a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PushAllowance : global::System.IEquatable<GetMigration_Node_PushAllowance>, IGetMigration_Node_PushAllowance
    {
        public GetMigration_Node_PushAllowance()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_PushAllowance? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_PushAllowance)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An emoji reaction to a particular piece of content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Reaction : global::System.IEquatable<GetMigration_Node_Reaction>, IGetMigration_Node_Reaction
    {
        public GetMigration_Node_Reaction()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Reaction? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Reaction)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'ready_for_review' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReadyForReviewEvent : global::System.IEquatable<GetMigration_Node_ReadyForReviewEvent>, IGetMigration_Node_ReadyForReviewEvent
    {
        public GetMigration_Node_ReadyForReviewEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReadyForReviewEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReadyForReviewEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git reference.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Ref : global::System.IEquatable<GetMigration_Node_Ref>, IGetMigration_Node_Ref
    {
        public GetMigration_Node_Ref()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Ref? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Ref)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'referenced' event on a given `ReferencedSubject`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReferencedEvent : global::System.IEquatable<GetMigration_Node_ReferencedEvent>, IGetMigration_Node_ReferencedEvent
    {
        public GetMigration_Node_ReferencedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReferencedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReferencedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A release contains the content for a release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Release : global::System.IEquatable<GetMigration_Node_Release>, IGetMigration_Node_Release
    {
        public GetMigration_Node_Release()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Release? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Release)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A release asset contains the content for a release asset.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReleaseAsset : global::System.IEquatable<GetMigration_Node_ReleaseAsset>, IGetMigration_Node_ReleaseAsset
    {
        public GetMigration_Node_ReleaseAsset()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReleaseAsset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReleaseAsset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'removed_from_project' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RemovedFromProjectEvent : global::System.IEquatable<GetMigration_Node_RemovedFromProjectEvent>, IGetMigration_Node_RemovedFromProjectEvent
    {
        public GetMigration_Node_RemovedFromProjectEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RemovedFromProjectEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RemovedFromProjectEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'renamed' event on a given issue or pull request
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RenamedTitleEvent : global::System.IEquatable<GetMigration_Node_RenamedTitleEvent>, IGetMigration_Node_RenamedTitleEvent
    {
        public GetMigration_Node_RenamedTitleEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RenamedTitleEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RenamedTitleEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'reopened' event on any `Closable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReopenedEvent : global::System.IEquatable<GetMigration_Node_ReopenedEvent>, IGetMigration_Node_ReopenedEvent
    {
        public GetMigration_Node_ReopenedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReopenedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReopenedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoAccessAuditEntry : global::System.IEquatable<GetMigration_Node_RepoAccessAuditEntry>, IGetMigration_Node_RepoAccessAuditEntry
    {
        public GetMigration_Node_RepoAccessAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoAccessAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoAccessAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.add_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoAddMemberAuditEntry : global::System.IEquatable<GetMigration_Node_RepoAddMemberAuditEntry>, IGetMigration_Node_RepoAddMemberAuditEntry
    {
        public GetMigration_Node_RepoAddMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoAddMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoAddMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.add_topic event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoAddTopicAuditEntry : global::System.IEquatable<GetMigration_Node_RepoAddTopicAuditEntry>, IGetMigration_Node_RepoAddTopicAuditEntry
    {
        public GetMigration_Node_RepoAddTopicAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoAddTopicAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoAddTopicAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.archived event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoArchivedAuditEntry : global::System.IEquatable<GetMigration_Node_RepoArchivedAuditEntry>, IGetMigration_Node_RepoArchivedAuditEntry
    {
        public GetMigration_Node_RepoArchivedAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoArchivedAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoArchivedAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.change_merge_setting event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoChangeMergeSettingAuditEntry : global::System.IEquatable<GetMigration_Node_RepoChangeMergeSettingAuditEntry>, IGetMigration_Node_RepoChangeMergeSettingAuditEntry
    {
        public GetMigration_Node_RepoChangeMergeSettingAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoChangeMergeSettingAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoChangeMergeSettingAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry>, IGetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry
    {
        public GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry>, IGetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry
    {
        public GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_contributors_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry>, IGetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry
    {
        public GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry>, IGetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry
    {
        public GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry>, IGetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry
    {
        public GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry>, IGetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry
    {
        public GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_contributors_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry>, IGetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry
    {
        public GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry>, IGetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry
    {
        public GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.lock_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry>, IGetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry
    {
        public GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.config.unlock_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry : global::System.IEquatable<GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry>, IGetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry
    {
        public GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.create event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoCreateAuditEntry : global::System.IEquatable<GetMigration_Node_RepoCreateAuditEntry>, IGetMigration_Node_RepoCreateAuditEntry
    {
        public GetMigration_Node_RepoCreateAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoCreateAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoCreateAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.destroy event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoDestroyAuditEntry : global::System.IEquatable<GetMigration_Node_RepoDestroyAuditEntry>, IGetMigration_Node_RepoDestroyAuditEntry
    {
        public GetMigration_Node_RepoDestroyAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoDestroyAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoDestroyAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.remove_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoRemoveMemberAuditEntry : global::System.IEquatable<GetMigration_Node_RepoRemoveMemberAuditEntry>, IGetMigration_Node_RepoRemoveMemberAuditEntry
    {
        public GetMigration_Node_RepoRemoveMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoRemoveMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoRemoveMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repo.remove_topic event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoRemoveTopicAuditEntry : global::System.IEquatable<GetMigration_Node_RepoRemoveTopicAuditEntry>, IGetMigration_Node_RepoRemoveTopicAuditEntry
    {
        public GetMigration_Node_RepoRemoveTopicAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepoRemoveTopicAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepoRemoveTopicAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Repository : global::System.IEquatable<GetMigration_Node_Repository>, IGetMigration_Node_Repository
    {
        public GetMigration_Node_Repository()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Repository? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Repository)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An invitation for a user to be added to a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryInvitation : global::System.IEquatable<GetMigration_Node_RepositoryInvitation>, IGetMigration_Node_RepositoryInvitation
    {
        public GetMigration_Node_RepositoryInvitation()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepositoryInvitation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepositoryInvitation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Octoshift repository migration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryMigration : global::System.IEquatable<GetMigration_Node_RepositoryMigration>, IGetMigration_Node_RepositoryMigration
    {
        public GetMigration_Node_RepositoryMigration(global::System.String id, global::System.Uri sourceUrl, global::OctoshiftCLI.GraphQL.IGetMigration_Node_MigrationSource_1 migrationSource, global::OctoshiftCLI.GraphQL.MigrationState state, global::System.String? failureReason)
        {
            Id = id;
            SourceUrl = sourceUrl;
            MigrationSource = migrationSource;
            State = state;
            FailureReason = failureReason;
        }

        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source URL.
        /// </summary>
        public global::System.Uri SourceUrl { get; }

        /// <summary>
        /// The Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGetMigration_Node_MigrationSource_1 MigrationSource { get; }

        /// <summary>
        /// The Octoshift migration state.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationState State { get; }

        /// <summary>
        /// The reason the migration failed.
        /// </summary>
        public global::System.String? FailureReason { get; }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepositoryMigration? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && SourceUrl.Equals(other.SourceUrl) && MigrationSource.Equals(other.MigrationSource) && State.Equals(other.State) && ((FailureReason is null && other.FailureReason is null) || FailureReason != null && FailureReason.Equals(other.FailureReason));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepositoryMigration)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * SourceUrl.GetHashCode();
                hash ^= 397 * MigrationSource.GetHashCode();
                hash ^= 397 * State.GetHashCode();
                if (FailureReason != null)
                {
                    hash ^= 397 * FailureReason.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A repository-topic connects a repository to a topic.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryTopic : global::System.IEquatable<GetMigration_Node_RepositoryTopic>, IGetMigration_Node_RepositoryTopic
    {
        public GetMigration_Node_RepositoryTopic()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepositoryTopic? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepositoryTopic)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repository_visibility_change.disable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry : global::System.IEquatable<GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry>, IGetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry
    {
        public GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a repository_visibility_change.enable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry : global::System.IEquatable<GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry>, IGetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry
    {
        public GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A Dependabot alert for a repository with a dependency affected by a security vulnerability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryVulnerabilityAlert : global::System.IEquatable<GetMigration_Node_RepositoryVulnerabilityAlert>, IGetMigration_Node_RepositoryVulnerabilityAlert
    {
        public GetMigration_Node_RepositoryVulnerabilityAlert()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_RepositoryVulnerabilityAlert? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_RepositoryVulnerabilityAlert)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A team or user who has the ability to dismiss a review on a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewDismissalAllowance : global::System.IEquatable<GetMigration_Node_ReviewDismissalAllowance>, IGetMigration_Node_ReviewDismissalAllowance
    {
        public GetMigration_Node_ReviewDismissalAllowance()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReviewDismissalAllowance? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReviewDismissalAllowance)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'review_dismissed' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewDismissedEvent : global::System.IEquatable<GetMigration_Node_ReviewDismissedEvent>, IGetMigration_Node_ReviewDismissedEvent
    {
        public GetMigration_Node_ReviewDismissedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReviewDismissedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReviewDismissedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A request for a user to review a pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewRequest : global::System.IEquatable<GetMigration_Node_ReviewRequest>, IGetMigration_Node_ReviewRequest
    {
        public GetMigration_Node_ReviewRequest()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReviewRequest? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReviewRequest)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'review_request_removed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewRequestRemovedEvent : global::System.IEquatable<GetMigration_Node_ReviewRequestRemovedEvent>, IGetMigration_Node_ReviewRequestRemovedEvent
    {
        public GetMigration_Node_ReviewRequestRemovedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReviewRequestRemovedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReviewRequestRemovedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'review_requested' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewRequestedEvent : global::System.IEquatable<GetMigration_Node_ReviewRequestedEvent>, IGetMigration_Node_ReviewRequestedEvent
    {
        public GetMigration_Node_ReviewRequestedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_ReviewRequestedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_ReviewRequestedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A Saved Reply is text a user can use to reply quickly.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SavedReply : global::System.IEquatable<GetMigration_Node_SavedReply>, IGetMigration_Node_SavedReply
    {
        public GetMigration_Node_SavedReply()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SavedReply? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SavedReply)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A GitHub Security Advisory
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SecurityAdvisory : global::System.IEquatable<GetMigration_Node_SecurityAdvisory>, IGetMigration_Node_SecurityAdvisory
    {
        public GetMigration_Node_SecurityAdvisory()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SecurityAdvisory? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SecurityAdvisory)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An event related to sponsorship activity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorsActivity : global::System.IEquatable<GetMigration_Node_SponsorsActivity>, IGetMigration_Node_SponsorsActivity
    {
        public GetMigration_Node_SponsorsActivity()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SponsorsActivity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SponsorsActivity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A GitHub Sponsors listing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorsListing : global::System.IEquatable<GetMigration_Node_SponsorsListing>, IGetMigration_Node_SponsorsListing
    {
        public GetMigration_Node_SponsorsListing()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SponsorsListing? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SponsorsListing)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A GitHub Sponsors tier associated with a GitHub Sponsors listing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorsTier : global::System.IEquatable<GetMigration_Node_SponsorsTier>, IGetMigration_Node_SponsorsTier
    {
        public GetMigration_Node_SponsorsTier()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SponsorsTier? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SponsorsTier)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A sponsorship relationship between a sponsor and a maintainer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Sponsorship : global::System.IEquatable<GetMigration_Node_Sponsorship>, IGetMigration_Node_Sponsorship
    {
        public GetMigration_Node_Sponsorship()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Sponsorship? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Sponsorship)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An update sent to sponsors of a user or organization on GitHub Sponsors.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorshipNewsletter : global::System.IEquatable<GetMigration_Node_SponsorshipNewsletter>, IGetMigration_Node_SponsorshipNewsletter
    {
        public GetMigration_Node_SponsorshipNewsletter()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SponsorshipNewsletter? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SponsorshipNewsletter)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a commit status.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Status : global::System.IEquatable<GetMigration_Node_Status>, IGetMigration_Node_Status
    {
        public GetMigration_Node_Status()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Status? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Status)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents the rollup for both the check runs and status for a commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_StatusCheckRollup : global::System.IEquatable<GetMigration_Node_StatusCheckRollup>, IGetMigration_Node_StatusCheckRollup
    {
        public GetMigration_Node_StatusCheckRollup()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_StatusCheckRollup? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_StatusCheckRollup)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an individual commit status context
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_StatusContext : global::System.IEquatable<GetMigration_Node_StatusContext>, IGetMigration_Node_StatusContext
    {
        public GetMigration_Node_StatusContext()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_StatusContext? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_StatusContext)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'subscribed' event on a given `Subscribable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SubscribedEvent : global::System.IEquatable<GetMigration_Node_SubscribedEvent>, IGetMigration_Node_SubscribedEvent
    {
        public GetMigration_Node_SubscribedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_SubscribedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_SubscribedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Tag : global::System.IEquatable<GetMigration_Node_Tag>, IGetMigration_Node_Tag
    {
        public GetMigration_Node_Tag()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Tag? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Tag)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A team of users in an organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Team : global::System.IEquatable<GetMigration_Node_Team>, IGetMigration_Node_Team
    {
        public GetMigration_Node_Team()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Team? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Team)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a team.add_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamAddMemberAuditEntry : global::System.IEquatable<GetMigration_Node_TeamAddMemberAuditEntry>, IGetMigration_Node_TeamAddMemberAuditEntry
    {
        public GetMigration_Node_TeamAddMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamAddMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamAddMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a team.add_repository event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamAddRepositoryAuditEntry : global::System.IEquatable<GetMigration_Node_TeamAddRepositoryAuditEntry>, IGetMigration_Node_TeamAddRepositoryAuditEntry
    {
        public GetMigration_Node_TeamAddRepositoryAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamAddRepositoryAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamAddRepositoryAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a team.change_parent_team event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamChangeParentTeamAuditEntry : global::System.IEquatable<GetMigration_Node_TeamChangeParentTeamAuditEntry>, IGetMigration_Node_TeamChangeParentTeamAuditEntry
    {
        public GetMigration_Node_TeamChangeParentTeamAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamChangeParentTeamAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamChangeParentTeamAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A team discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamDiscussion : global::System.IEquatable<GetMigration_Node_TeamDiscussion>, IGetMigration_Node_TeamDiscussion
    {
        public GetMigration_Node_TeamDiscussion()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamDiscussion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamDiscussion)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A comment on a team discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamDiscussionComment : global::System.IEquatable<GetMigration_Node_TeamDiscussionComment>, IGetMigration_Node_TeamDiscussionComment
    {
        public GetMigration_Node_TeamDiscussionComment()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamDiscussionComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamDiscussionComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a team.remove_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamRemoveMemberAuditEntry : global::System.IEquatable<GetMigration_Node_TeamRemoveMemberAuditEntry>, IGetMigration_Node_TeamRemoveMemberAuditEntry
    {
        public GetMigration_Node_TeamRemoveMemberAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamRemoveMemberAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamRemoveMemberAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Audit log entry for a team.remove_repository event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamRemoveRepositoryAuditEntry : global::System.IEquatable<GetMigration_Node_TeamRemoveRepositoryAuditEntry>, IGetMigration_Node_TeamRemoveRepositoryAuditEntry
    {
        public GetMigration_Node_TeamRemoveRepositoryAuditEntry()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TeamRemoveRepositoryAuditEntry? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TeamRemoveRepositoryAuditEntry)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A topic aggregates entities that are related to a subject.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Topic : global::System.IEquatable<GetMigration_Node_Topic>, IGetMigration_Node_Topic
    {
        public GetMigration_Node_Topic()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Topic? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Topic)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'transferred' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TransferredEvent : global::System.IEquatable<GetMigration_Node_TransferredEvent>, IGetMigration_Node_TransferredEvent
    {
        public GetMigration_Node_TransferredEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_TransferredEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_TransferredEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git tree.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Tree : global::System.IEquatable<GetMigration_Node_Tree>, IGetMigration_Node_Tree
    {
        public GetMigration_Node_Tree()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Tree? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Tree)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'unassigned' event on any assignable object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnassignedEvent : global::System.IEquatable<GetMigration_Node_UnassignedEvent>, IGetMigration_Node_UnassignedEvent
    {
        public GetMigration_Node_UnassignedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UnassignedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UnassignedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'unlabeled' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnlabeledEvent : global::System.IEquatable<GetMigration_Node_UnlabeledEvent>, IGetMigration_Node_UnlabeledEvent
    {
        public GetMigration_Node_UnlabeledEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UnlabeledEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UnlabeledEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'unlocked' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnlockedEvent : global::System.IEquatable<GetMigration_Node_UnlockedEvent>, IGetMigration_Node_UnlockedEvent
    {
        public GetMigration_Node_UnlockedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UnlockedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UnlockedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnmarkedAsDuplicateEvent : global::System.IEquatable<GetMigration_Node_UnmarkedAsDuplicateEvent>, IGetMigration_Node_UnmarkedAsDuplicateEvent
    {
        public GetMigration_Node_UnmarkedAsDuplicateEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UnmarkedAsDuplicateEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UnmarkedAsDuplicateEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'unpinned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnpinnedEvent : global::System.IEquatable<GetMigration_Node_UnpinnedEvent>, IGetMigration_Node_UnpinnedEvent
    {
        public GetMigration_Node_UnpinnedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UnpinnedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UnpinnedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents an 'unsubscribed' event on a given `Subscribable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnsubscribedEvent : global::System.IEquatable<GetMigration_Node_UnsubscribedEvent>, IGetMigration_Node_UnsubscribedEvent
    {
        public GetMigration_Node_UnsubscribedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UnsubscribedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UnsubscribedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A user is an individual's account on GitHub that owns repositories and can make new content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_User : global::System.IEquatable<GetMigration_Node_User>, IGetMigration_Node_User
    {
        public GetMigration_Node_User()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_User? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_User)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a 'user_blocked' event on a given user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserBlockedEvent : global::System.IEquatable<GetMigration_Node_UserBlockedEvent>, IGetMigration_Node_UserBlockedEvent
    {
        public GetMigration_Node_UserBlockedEvent()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UserBlockedEvent? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UserBlockedEvent)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An edit on user content
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserContentEdit : global::System.IEquatable<GetMigration_Node_UserContentEdit>, IGetMigration_Node_UserContentEdit
    {
        public GetMigration_Node_UserContentEdit()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UserContentEdit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UserContentEdit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// The user's description of what they're currently doing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserStatus : global::System.IEquatable<GetMigration_Node_UserStatus>, IGetMigration_Node_UserStatus
    {
        public GetMigration_Node_UserStatus()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_UserStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_UserStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A domain that can be verified or approved for an organization or an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_VerifiableDomain : global::System.IEquatable<GetMigration_Node_VerifiableDomain>, IGetMigration_Node_VerifiableDomain
    {
        public GetMigration_Node_VerifiableDomain()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_VerifiableDomain? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_VerifiableDomain)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A workflow contains meta information about an Actions workflow file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_Workflow : global::System.IEquatable<GetMigration_Node_Workflow>, IGetMigration_Node_Workflow
    {
        public GetMigration_Node_Workflow()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_Workflow? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_Workflow)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// A workflow run.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_WorkflowRun : global::System.IEquatable<GetMigration_Node_WorkflowRun>, IGetMigration_Node_WorkflowRun
    {
        public GetMigration_Node_WorkflowRun()
        {
        }

        public virtual global::System.Boolean Equals(GetMigration_Node_WorkflowRun? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_WorkflowRun)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MigrationSource_MigrationSource : global::System.IEquatable<GetMigration_Node_MigrationSource_MigrationSource>, IGetMigration_Node_MigrationSource_MigrationSource
    {
        public GetMigration_Node_MigrationSource_MigrationSource(global::System.String name)
        {
            Name = name;
        }

        /// <summary>
        /// The Octoshift migration source name.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetMigration_Node_MigrationSource_MigrationSource? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetMigration_Node_MigrationSource_MigrationSource)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigrationResult
    {
        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGetMigration_Node? Node { get; }
    }

    /// <summary>
    /// An object with an ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'added_to_project' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AddedToProjectEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A GitHub App.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_App : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'assigned' event on any assignable object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AssignedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'auto_merge_disabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AutoMergeDisabledEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'auto_merge_enabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AutoMergeEnabledEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'auto_rebase_enabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AutoRebaseEnabledEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'auto_squash_enabled' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AutoSquashEnabledEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'automatic_base_change_failed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AutomaticBaseChangeFailedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'automatic_base_change_succeeded' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_AutomaticBaseChangeSucceededEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'base_ref_changed' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_BaseRefChangedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'base_ref_deleted' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_BaseRefDeletedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'base_ref_force_pushed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_BaseRefForcePushedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Git blob.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Blob : IGetMigration_Node
    {
    }

    /// <summary>
    /// A special type of user which takes actions on behalf of GitHub Apps.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Bot : IGetMigration_Node
    {
    }

    /// <summary>
    /// A branch protection rule.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_BranchProtectionRule : IGetMigration_Node
    {
    }

    /// <summary>
    /// A team or user who has the ability to bypass a force push requirement on a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_BypassForcePushAllowance : IGetMigration_Node
    {
    }

    /// <summary>
    /// A team or user who has the ability to bypass a pull request requirement on a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_BypassPullRequestAllowance : IGetMigration_Node
    {
    }

    /// <summary>
    /// A common weakness enumeration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CWE : IGetMigration_Node
    {
    }

    /// <summary>
    /// A check run.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CheckRun : IGetMigration_Node
    {
    }

    /// <summary>
    /// A check suite.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CheckSuite : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'closed' event on any `Closable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ClosedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// The Code of Conduct for a repository
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CodeOfConduct : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'comment_deleted' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CommentDeletedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Git commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Commit : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a comment on a given Commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CommitComment : IGetMigration_Node
    {
    }

    /// <summary>
    /// A thread of comments on a commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CommitCommentThread : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'connected' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ConnectedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'convert_to_draft' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ConvertToDraftEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'converted_note_to_issue' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ConvertedNoteToIssueEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'converted_to_discussion' event on a given issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ConvertedToDiscussionEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a mention made by one issue or pull request to another.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_CrossReferencedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'demilestoned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DemilestonedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A repository deploy key.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DeployKey : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'deployed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DeployedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents triggered deployment instance.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Deployment : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'deployment_environment_changed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DeploymentEnvironmentChangedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A deployment review.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DeploymentReview : IGetMigration_Node
    {
    }

    /// <summary>
    /// Describes the status of a given deployment attempt.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DeploymentStatus : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'disconnected' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DisconnectedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A discussion in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Discussion : IGetMigration_Node
    {
    }

    /// <summary>
    /// A category for discussions in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DiscussionCategory : IGetMigration_Node
    {
    }

    /// <summary>
    /// A comment on a discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_DiscussionComment : IGetMigration_Node
    {
    }

    /// <summary>
    /// An account to manage multiple organizations with consolidated policy and billing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Enterprise : IGetMigration_Node
    {
    }

    /// <summary>
    /// An invitation for a user to become an owner or billing manager of an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseAdministratorInvitation : IGetMigration_Node
    {
    }

    /// <summary>
    /// An identity provider configured to provision identities for an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseIdentityProvider : IGetMigration_Node
    {
    }

    /// <summary>
    /// A subset of repository information queryable from an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseRepositoryInfo : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseServerInstallation : IGetMigration_Node
    {
    }

    /// <summary>
    /// A user account on an Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseServerUserAccount : IGetMigration_Node
    {
    }

    /// <summary>
    /// An email belonging to a user account on an Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseServerUserAccountEmail : IGetMigration_Node
    {
    }

    /// <summary>
    /// A user accounts upload from an Enterprise Server installation.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseServerUserAccountsUpload : IGetMigration_Node
    {
    }

    /// <summary>
    /// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_EnterpriseUserAccount : IGetMigration_Node
    {
    }

    /// <summary>
    /// An environment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Environment : IGetMigration_Node
    {
    }

    /// <summary>
    /// An external identity provisioned by SAML SSO or SCIM.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ExternalIdentity : IGetMigration_Node
    {
    }

    /// <summary>
    /// A Gist.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Gist : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a comment on an Gist.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_GistComment : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'head_ref_deleted' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_HeadRefDeletedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'head_ref_force_pushed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_HeadRefForcePushedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'head_ref_restored' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_HeadRefRestoredEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// An import to GitHub
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Import : IGetMigration_Node
    {
    }

    /// <summary>
    /// An IP address or range of addresses that is allowed to access an owner's resources.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_IpAllowListEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Issue : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a comment on an Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_IssueComment : IGetMigration_Node
    {
    }

    /// <summary>
    /// A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Label : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'labeled' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_LabeledEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a given language found in repositories.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Language : IGetMigration_Node
    {
    }

    /// <summary>
    /// A repository's open source license
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_License : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'locked' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_LockedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A placeholder user for attribution of imported data on GitHub.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Mannequin : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'marked_as_duplicate' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MarkedAsDuplicateEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A public description of a Marketplace category.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MarketplaceCategory : IGetMigration_Node
    {
    }

    /// <summary>
    /// A listing in the GitHub integration marketplace.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MarketplaceListing : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a members_can_delete_repos.clear event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MembersCanDeleteReposClearAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a members_can_delete_repos.disable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MembersCanDeleteReposDisableAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a members_can_delete_repos.enable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MembersCanDeleteReposEnableAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'mentioned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MentionedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'merged' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MergedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MigrationSource : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Milestone object on a given repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Milestone : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'milestoned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MilestonedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'moved_columns_in_project' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MovedColumnsInProjectEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// An OIDC identity provider configured to provision identities for an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OIDCProvider : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a oauth_application.create event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OauthApplicationCreateAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.add_billing_manager
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgAddBillingManagerAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.add_member
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgAddMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.block_user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgBlockUserAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.config.disable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.config.enable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.create event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgCreateAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.disable_oauth_app_restrictions event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.disable_saml event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgDisableSamlAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.disable_two_factor_requirement event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.enable_oauth_app_restrictions event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.enable_saml event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgEnableSamlAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.enable_two_factor_requirement event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.invite_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgInviteMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.invite_to_business event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgInviteToBusinessAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.oauth_app_access_approved event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgOauthAppAccessApprovedAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.oauth_app_access_denied event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgOauthAppAccessDeniedAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.oauth_app_access_requested event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgOauthAppAccessRequestedAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.remove_billing_manager event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgRemoveBillingManagerAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.remove_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgRemoveMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.remove_outside_collaborator event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.restore_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgRestoreMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.unblock_user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgUnblockUserAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.update_default_repository_permission
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.update_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgUpdateMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.update_member_repository_creation_permission event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a org.update_member_repository_invitation_permission event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// An account on GitHub, with one or more owners, that has repositories, members and teams.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Organization : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Identity Provider configured to provision SAML and SCIM identities for Organizations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrganizationIdentityProvider : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Invitation for a user to an organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_OrganizationInvitation : IGetMigration_Node
    {
    }

    /// <summary>
    /// Information for an uploaded package.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Package : IGetMigration_Node
    {
    }

    /// <summary>
    /// A file in a package version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PackageFile : IGetMigration_Node
    {
    }

    /// <summary>
    /// A version tag contains the mapping between a tag name and a version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PackageTag : IGetMigration_Node
    {
    }

    /// <summary>
    /// Information about a specific package version.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PackageVersion : IGetMigration_Node
    {
    }

    /// <summary>
    /// A Pinned Discussion is a discussion pinned to a repository's index page.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PinnedDiscussion : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'pinned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PinnedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A Pinned Issue is a issue pinned to a repository's index page.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PinnedIssue : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a private_repository_forking.disable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PrivateRepositoryForkingDisableAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a private_repository_forking.enable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PrivateRepositoryForkingEnableAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Projects manage issues, pull requests and notes within a project owner.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Project : IGetMigration_Node
    {
    }

    /// <summary>
    /// A card in a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ProjectCard : IGetMigration_Node
    {
    }

    /// <summary>
    /// A column inside a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ProjectColumn : IGetMigration_Node
    {
    }

    /// <summary>
    /// New projects that manage issues, pull requests and drafts using tables and boards.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ProjectNext : IGetMigration_Node
    {
    }

    /// <summary>
    /// An item within a new Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ProjectNextItem : IGetMigration_Node
    {
    }

    /// <summary>
    /// An value of a field in an item of a new Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ProjectNextItemFieldValue : IGetMigration_Node
    {
    }

    /// <summary>
    /// A user's public key.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PublicKey : IGetMigration_Node
    {
    }

    /// <summary>
    /// A repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PullRequest : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Git commit part of a pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PullRequestCommit : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a commit comment thread part of a pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PullRequestCommitCommentThread : IGetMigration_Node
    {
    }

    /// <summary>
    /// A review object for a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PullRequestReview : IGetMigration_Node
    {
    }

    /// <summary>
    /// A review comment associated with a given repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PullRequestReviewComment : IGetMigration_Node
    {
    }

    /// <summary>
    /// A threaded list of comments for a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PullRequestReviewThread : IGetMigration_Node
    {
    }

    /// <summary>
    /// A Git push.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Push : IGetMigration_Node
    {
    }

    /// <summary>
    /// A team, user or app who has the ability to push to a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_PushAllowance : IGetMigration_Node
    {
    }

    /// <summary>
    /// An emoji reaction to a particular piece of content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Reaction : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'ready_for_review' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReadyForReviewEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Git reference.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Ref : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'referenced' event on a given `ReferencedSubject`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReferencedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A release contains the content for a release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Release : IGetMigration_Node
    {
    }

    /// <summary>
    /// A release asset contains the content for a release asset.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReleaseAsset : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'removed_from_project' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RemovedFromProjectEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'renamed' event on a given issue or pull request
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RenamedTitleEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'reopened' event on any `Closable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReopenedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoAccessAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.add_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoAddMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.add_topic event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoAddTopicAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.archived event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoArchivedAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.change_merge_setting event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoChangeMergeSettingAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_contributors_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.disable_sockpuppet_disallowed event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_collaborators_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_contributors_only event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.enable_sockpuppet_disallowed event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.lock_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.config.unlock_anonymous_git_access event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.create event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoCreateAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.destroy event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoDestroyAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.remove_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoRemoveMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repo.remove_topic event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepoRemoveTopicAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Repository : IGetMigration_Node
    {
    }

    /// <summary>
    /// An invitation for a user to be added to a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepositoryInvitation : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Octoshift repository migration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepositoryMigration : IGetMigration_Node
    {
        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source URL.
        /// </summary>
        public global::System.Uri SourceUrl { get; }

        /// <summary>
        /// The Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGetMigration_Node_MigrationSource_1 MigrationSource { get; }

        /// <summary>
        /// The Octoshift migration state.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationState State { get; }

        /// <summary>
        /// The reason the migration failed.
        /// </summary>
        public global::System.String? FailureReason { get; }
    }

    /// <summary>
    /// A repository-topic connects a repository to a topic.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepositoryTopic : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repository_visibility_change.disable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a repository_visibility_change.enable event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// A Dependabot alert for a repository with a dependency affected by a security vulnerability.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_RepositoryVulnerabilityAlert : IGetMigration_Node
    {
    }

    /// <summary>
    /// A team or user who has the ability to dismiss a review on a protected branch.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReviewDismissalAllowance : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'review_dismissed' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReviewDismissedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A request for a user to review a pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReviewRequest : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'review_request_removed' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReviewRequestRemovedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'review_requested' event on a given pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_ReviewRequestedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A Saved Reply is text a user can use to reply quickly.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SavedReply : IGetMigration_Node
    {
    }

    /// <summary>
    /// A GitHub Security Advisory
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SecurityAdvisory : IGetMigration_Node
    {
    }

    /// <summary>
    /// An event related to sponsorship activity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SponsorsActivity : IGetMigration_Node
    {
    }

    /// <summary>
    /// A GitHub Sponsors listing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SponsorsListing : IGetMigration_Node
    {
    }

    /// <summary>
    /// A GitHub Sponsors tier associated with a GitHub Sponsors listing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SponsorsTier : IGetMigration_Node
    {
    }

    /// <summary>
    /// A sponsorship relationship between a sponsor and a maintainer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Sponsorship : IGetMigration_Node
    {
    }

    /// <summary>
    /// An update sent to sponsors of a user or organization on GitHub Sponsors.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SponsorshipNewsletter : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a commit status.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Status : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents the rollup for both the check runs and status for a commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_StatusCheckRollup : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an individual commit status context
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_StatusContext : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'subscribed' event on a given `Subscribable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_SubscribedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Git tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Tag : IGetMigration_Node
    {
    }

    /// <summary>
    /// A team of users in an organization.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Team : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a team.add_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamAddMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a team.add_repository event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamAddRepositoryAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a team.change_parent_team event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamChangeParentTeamAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// A team discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamDiscussion : IGetMigration_Node
    {
    }

    /// <summary>
    /// A comment on a team discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamDiscussionComment : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a team.remove_member event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamRemoveMemberAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// Audit log entry for a team.remove_repository event.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TeamRemoveRepositoryAuditEntry : IGetMigration_Node
    {
    }

    /// <summary>
    /// A topic aggregates entities that are related to a subject.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Topic : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'transferred' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_TransferredEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a Git tree.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Tree : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'unassigned' event on any assignable object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UnassignedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'unlabeled' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UnlabeledEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'unlocked' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UnlockedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'unmarked_as_duplicate' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UnmarkedAsDuplicateEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'unpinned' event on a given issue or pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UnpinnedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents an 'unsubscribed' event on a given `Subscribable`.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UnsubscribedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// A user is an individual's account on GitHub that owns repositories and can make new content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_User : IGetMigration_Node
    {
    }

    /// <summary>
    /// Represents a 'user_blocked' event on a given user.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UserBlockedEvent : IGetMigration_Node
    {
    }

    /// <summary>
    /// An edit on user content
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UserContentEdit : IGetMigration_Node
    {
    }

    /// <summary>
    /// The user's description of what they're currently doing.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_UserStatus : IGetMigration_Node
    {
    }

    /// <summary>
    /// A domain that can be verified or approved for an organization or an enterprise.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_VerifiableDomain : IGetMigration_Node
    {
    }

    /// <summary>
    /// A workflow contains meta information about an Actions workflow file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_Workflow : IGetMigration_Node
    {
    }

    /// <summary>
    /// A workflow run.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_WorkflowRun : IGetMigration_Node
    {
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MigrationSource_1
    {
        /// <summary>
        /// The Octoshift migration source name.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigration_Node_MigrationSource_MigrationSource : IGetMigration_Node_MigrationSource_1
    {
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfoResult : global::System.IEquatable<GetOrganizationInfoResult>, IGetOrganizationInfoResult
    {
        public GetOrganizationInfoResult(global::OctoshiftCLI.GraphQL.IGetOrganizationInfo_Organization? organization)
        {
            Organization = organization;
        }

        /// <summary>
        /// Lookup a organization by login.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGetOrganizationInfo_Organization? Organization { get; }

        public virtual global::System.Boolean Equals(GetOrganizationInfoResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Organization is null && other.Organization is null) || Organization != null && Organization.Equals(other.Organization)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrganizationInfoResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Organization != null)
                {
                    hash ^= 397 * Organization.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An account on GitHub, with one or more owners, that has repositories, members and teams.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfo_Organization_Organization : global::System.IEquatable<GetOrganizationInfo_Organization_Organization>, IGetOrganizationInfo_Organization_Organization
    {
        public GetOrganizationInfo_Organization_Organization(global::System.String login, global::System.String id, global::System.String? name)
        {
            Login = login;
            Id = id;
            Name = name;
        }

        /// <summary>
        /// The organization's login name.
        /// </summary>
        public global::System.String Login { get; }

        public global::System.String Id { get; }

        /// <summary>
        /// The organization's public profile name.
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetOrganizationInfo_Organization_Organization? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Login.Equals(other.Login)) && Id.Equals(other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetOrganizationInfo_Organization_Organization)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Login.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetOrganizationInfoResult
    {
        /// <summary>
        /// Lookup a organization by login.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGetOrganizationInfo_Organization? Organization { get; }
    }

    /// <summary>
    /// An account on GitHub, with one or more owners, that has repositories, members and teams.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetOrganizationInfo_Organization
    {
        /// <summary>
        /// The organization's login name.
        /// </summary>
        public global::System.String Login { get; }

        public global::System.String Id { get; }

        /// <summary>
        /// The organization's public profile name.
        /// </summary>
        public global::System.String? Name { get; }
    }

    /// <summary>
    /// An account on GitHub, with one or more owners, that has repositories, members and teams.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetOrganizationInfo_Organization_Organization : IGetOrganizationInfo_Organization
    {
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRoleResult : global::System.IEquatable<GrantMigratorRoleResult>, IGrantMigratorRoleResult
    {
        public GrantMigratorRoleResult(global::OctoshiftCLI.GraphQL.IGrantMigratorRole_GrantMigratorRole? grantMigratorRole)
        {
            GrantMigratorRole = grantMigratorRole;
        }

        /// <summary>
        /// Grant the migrator role to a user or a team.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGrantMigratorRole_GrantMigratorRole? GrantMigratorRole { get; }

        public virtual global::System.Boolean Equals(GrantMigratorRoleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GrantMigratorRole is null && other.GrantMigratorRole is null) || GrantMigratorRole != null && GrantMigratorRole.Equals(other.GrantMigratorRole)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GrantMigratorRoleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GrantMigratorRole != null)
                {
                    hash ^= 397 * GrantMigratorRole.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Autogenerated return type of GrantMigratorRole
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload : global::System.IEquatable<GrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload>, IGrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload
    {
        public GrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload(global::System.Boolean? success)
        {
            Success = success;
        }

        /// <summary>
        /// Did the operation succeed?
        /// </summary>
        public global::System.Boolean? Success { get; }

        public virtual global::System.Boolean Equals(GrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGrantMigratorRoleResult
    {
        /// <summary>
        /// Grant the migrator role to a user or a team.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IGrantMigratorRole_GrantMigratorRole? GrantMigratorRole { get; }
    }

    /// <summary>
    /// Autogenerated return type of GrantMigratorRole
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGrantMigratorRole_GrantMigratorRole
    {
        /// <summary>
        /// Did the operation succeed?
        /// </summary>
        public global::System.Boolean? Success { get; }
    }

    /// <summary>
    /// Autogenerated return type of GrantMigratorRole
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload : IGrantMigratorRole_GrantMigratorRole
    {
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRoleResult : global::System.IEquatable<RevokeMigratorRoleResult>, IRevokeMigratorRoleResult
    {
        public RevokeMigratorRoleResult(global::OctoshiftCLI.GraphQL.IRevokeMigratorRole_RevokeMigratorRole? revokeMigratorRole)
        {
            RevokeMigratorRole = revokeMigratorRole;
        }

        /// <summary>
        /// Revoke the migrator role from a user or a team.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IRevokeMigratorRole_RevokeMigratorRole? RevokeMigratorRole { get; }

        public virtual global::System.Boolean Equals(RevokeMigratorRoleResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RevokeMigratorRole is null && other.RevokeMigratorRole is null) || RevokeMigratorRole != null && RevokeMigratorRole.Equals(other.RevokeMigratorRole)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RevokeMigratorRoleResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RevokeMigratorRole != null)
                {
                    hash ^= 397 * RevokeMigratorRole.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Autogenerated return type of RevokeMigratorRole
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload : global::System.IEquatable<RevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload>, IRevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload
    {
        public RevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload(global::System.Boolean? success)
        {
            Success = success;
        }

        /// <summary>
        /// Did the operation succeed?
        /// </summary>
        public global::System.Boolean? Success { get; }

        public virtual global::System.Boolean Equals(RevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Success == other.Success);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Success != null)
                {
                    hash ^= 397 * Success.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRevokeMigratorRoleResult
    {
        /// <summary>
        /// Revoke the migrator role from a user or a team.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IRevokeMigratorRole_RevokeMigratorRole? RevokeMigratorRole { get; }
    }

    /// <summary>
    /// Autogenerated return type of RevokeMigratorRole
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRevokeMigratorRole_RevokeMigratorRole
    {
        /// <summary>
        /// Did the operation succeed?
        /// </summary>
        public global::System.Boolean? Success { get; }
    }

    /// <summary>
    /// Autogenerated return type of RevokeMigratorRole
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload : IRevokeMigratorRole_RevokeMigratorRole
    {
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationResult : global::System.IEquatable<StartRepositoryMigrationResult>, IStartRepositoryMigrationResult
    {
        public StartRepositoryMigrationResult(global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration? startRepositoryMigration)
        {
            StartRepositoryMigration = startRepositoryMigration;
        }

        /// <summary>
        /// Start a repository migration.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration? StartRepositoryMigration { get; }

        public virtual global::System.Boolean Equals(StartRepositoryMigrationResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StartRepositoryMigration is null && other.StartRepositoryMigration is null) || StartRepositoryMigration != null && StartRepositoryMigration.Equals(other.StartRepositoryMigration)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StartRepositoryMigrationResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StartRepositoryMigration != null)
                {
                    hash ^= 397 * StartRepositoryMigration.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Autogenerated return type of StartRepositoryMigration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload : global::System.IEquatable<StartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload>, IStartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload
    {
        public StartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload(global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration? repositoryMigration)
        {
            RepositoryMigration = repositoryMigration;
        }

        /// <summary>
        /// The new Octoshift repository migration.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration? RepositoryMigration { get; }

        public virtual global::System.Boolean Equals(StartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RepositoryMigration is null && other.RepositoryMigration is null) || RepositoryMigration != null && RepositoryMigration.Equals(other.RepositoryMigration)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RepositoryMigration != null)
                {
                    hash ^= 397 * RepositoryMigration.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An Octoshift repository migration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration : global::System.IEquatable<StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration>, IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration
    {
        public StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration(global::System.String id, global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource migrationSource, global::System.Uri sourceUrl, global::OctoshiftCLI.GraphQL.MigrationState state, global::System.String? failureReason)
        {
            Id = id;
            MigrationSource = migrationSource;
            SourceUrl = sourceUrl;
            State = state;
            FailureReason = failureReason;
        }

        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource MigrationSource { get; }

        /// <summary>
        /// The Octoshift migration source URL.
        /// </summary>
        public global::System.Uri SourceUrl { get; }

        /// <summary>
        /// The Octoshift migration state.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationState State { get; }

        /// <summary>
        /// The reason the migration failed.
        /// </summary>
        public global::System.String? FailureReason { get; }

        public virtual global::System.Boolean Equals(StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && MigrationSource.Equals(other.MigrationSource) && SourceUrl.Equals(other.SourceUrl) && State.Equals(other.State) && ((FailureReason is null && other.FailureReason is null) || FailureReason != null && FailureReason.Equals(other.FailureReason));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * MigrationSource.GetHashCode();
                hash ^= 397 * SourceUrl.GetHashCode();
                hash ^= 397 * State.GetHashCode();
                if (FailureReason != null)
                {
                    hash ^= 397 * FailureReason.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource : global::System.IEquatable<StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource>, IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource
    {
        public StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource(global::System.String id, global::System.String name, global::OctoshiftCLI.GraphQL.MigrationSourceType type)
        {
            Id = id;
            Name = name;
            Type = type;
        }

        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The Octoshift migration source type.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationSourceType Type { get; }

        public virtual global::System.Boolean Equals(StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Name.Equals(other.Name) && Type.Equals(other.Type);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Type.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The root query for implementing GraphQL mutations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigrationResult
    {
        /// <summary>
        /// Start a repository migration.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration? StartRepositoryMigration { get; }
    }

    /// <summary>
    /// Autogenerated return type of StartRepositoryMigration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigration_StartRepositoryMigration
    {
        /// <summary>
        /// The new Octoshift repository migration.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration? RepositoryMigration { get; }
    }

    /// <summary>
    /// Autogenerated return type of StartRepositoryMigration
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload : IStartRepositoryMigration_StartRepositoryMigration
    {
    }

    /// <summary>
    /// An Octoshift repository migration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration
    {
        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource MigrationSource { get; }

        /// <summary>
        /// The Octoshift migration source URL.
        /// </summary>
        public global::System.Uri SourceUrl { get; }

        /// <summary>
        /// The Octoshift migration state.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationState State { get; }

        /// <summary>
        /// The reason the migration failed.
        /// </summary>
        public global::System.String? FailureReason { get; }
    }

    /// <summary>
    /// An Octoshift repository migration.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration : IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration
    {
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource
    {
        public global::System.String Id { get; }

        /// <summary>
        /// The Octoshift migration source name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The Octoshift migration source type.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.MigrationSourceType Type { get; }
    }

    /// <summary>
    /// An Octoshift migration source.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource : IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public enum MigrationSourceType
    {
        /// <summary>
        /// A GitLab migration source.
        /// </summary>
        Gitlab,
        /// <summary>
        /// An Azure DevOps migration source.
        /// </summary>
        AzureDevops,
        /// <summary>
        /// A Bitbucket Server migration source.
        /// </summary>
        BitbucketServer,
        /// <summary>
        /// A GitHub migration source.
        /// </summary>
        Github,
        /// <summary>
        /// A GitHub Migration API source.
        /// </summary>
        GithubArchive
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MigrationSourceTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, MigrationSourceType>
    {
        public global::System.String TypeName => "MigrationSourceType";
        public MigrationSourceType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "GITLAB" => MigrationSourceType.Gitlab,
                "AZURE_DEVOPS" => MigrationSourceType.AzureDevops,
                "BITBUCKET_SERVER" => MigrationSourceType.BitbucketServer,
                "GITHUB" => MigrationSourceType.Github,
                "GITHUB_ARCHIVE" => MigrationSourceType.GithubArchive,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                MigrationSourceType.Gitlab => "GITLAB",
                MigrationSourceType.AzureDevops => "AZURE_DEVOPS",
                MigrationSourceType.BitbucketServer => "BITBUCKET_SERVER",
                MigrationSourceType.Github => "GITHUB",
                MigrationSourceType.GithubArchive => "GITHUB_ARCHIVE",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public enum MigrationState
    {
        /// <summary>
        /// The Octoshift migration has not started.
        /// </summary>
        NotStarted,
        /// <summary>
        /// The Octoshift migration has been queued.
        /// </summary>
        Queued,
        /// <summary>
        /// The Octoshift migration is in progress.
        /// </summary>
        InProgress,
        /// <summary>
        /// The Octoshift migration has succeeded.
        /// </summary>
        Succeeded,
        /// <summary>
        /// The Octoshift migration has failed.
        /// </summary>
        Failed
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MigrationStateSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, MigrationState>
    {
        public global::System.String TypeName => "MigrationState";
        public MigrationState Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "NOT_STARTED" => MigrationState.NotStarted,
                "QUEUED" => MigrationState.Queued,
                "IN_PROGRESS" => MigrationState.InProgress,
                "SUCCEEDED" => MigrationState.Succeeded,
                "FAILED" => MigrationState.Failed,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                MigrationState.NotStarted => "NOT_STARTED",
                MigrationState.Queued => "QUEUED",
                MigrationState.InProgress => "IN_PROGRESS",
                MigrationState.Succeeded => "SUCCEEDED",
                MigrationState.Failed => "FAILED",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public enum ActorType
    {
        /// <summary>
        /// Indicates a user actor.
        /// </summary>
        User,
        /// <summary>
        /// Indicates a team actor.
        /// </summary>
        Team
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ActorTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, ActorType>
    {
        public global::System.String TypeName => "ActorType";
        public ActorType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "USER" => ActorType.User,
                "TEAM" => ActorType.Team,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                ActorType.User => "USER",
                ActorType.Team => "TEAM",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateMigrationSource GraphQL operation
    /// <code>
    /// mutation CreateMigrationSource($name: String!, $url: String!, $ownerId: ID!, $accessToken: String!, $type: MigrationSourceType!, $githubPat: String!) {
    ///   createMigrationSource(input: { name: $name, url: $url, ownerId: $ownerId, accessToken: $accessToken, type: $type, githubPat: $githubPat }) {
    ///     __typename
    ///     migrationSource {
    ///       __typename
    ///       id
    ///       name
    ///       url
    ///       type
    ///       ... on MigrationSource {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourceMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateMigrationSourceMutationDocument()
        {
        }

        public static CreateMigrationSourceMutationDocument Instance { get; } = new CreateMigrationSourceMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x75, 0x72, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x61, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x75, 0x72, 0x6c, 0x3a, 0x20, 0x24, 0x75, 0x72, 0x6c, 0x2c, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x24, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x61, 0x74, 0x3a, 0x20, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x50, 0x61, 0x74, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "52f38f268936066119335d4df7a5f344");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateMigrationSource GraphQL operation
    /// <code>
    /// mutation CreateMigrationSource($name: String!, $url: String!, $ownerId: ID!, $accessToken: String!, $type: MigrationSourceType!, $githubPat: String!) {
    ///   createMigrationSource(input: { name: $name, url: $url, ownerId: $ownerId, accessToken: $accessToken, type: $type, githubPat: $githubPat }) {
    ///     __typename
    ///     migrationSource {
    ///       __typename
    ///       id
    ///       name
    ///       url
    ///       type
    ///       ... on MigrationSource {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourceMutation : global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateMigrationSourceResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _migrationSourceTypeFormatter;
        public CreateMigrationSourceMutation(global::StrawberryShake.IOperationExecutor<ICreateMigrationSourceResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _migrationSourceTypeFormatter = serializerResolver.GetInputValueFormatter("MigrationSourceType");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateMigrationSourceResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateMigrationSourceResult>> ExecuteAsync(global::System.String name, global::System.String url, global::System.String ownerId, global::System.String accessToken, global::OctoshiftCLI.GraphQL.MigrationSourceType type, global::System.String githubPat, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, url, ownerId, accessToken, type, githubPat);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateMigrationSourceResult>> Watch(global::System.String name, global::System.String url, global::System.String ownerId, global::System.String accessToken, global::OctoshiftCLI.GraphQL.MigrationSourceType type, global::System.String githubPat, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, url, ownerId, accessToken, type, githubPat);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.String url, global::System.String ownerId, global::System.String accessToken, global::OctoshiftCLI.GraphQL.MigrationSourceType type, global::System.String githubPat)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("url", FormatUrl(url));
            variables.Add("ownerId", FormatOwnerId(ownerId));
            variables.Add("accessToken", FormatAccessToken(accessToken));
            variables.Add("type", FormatType(type));
            variables.Add("githubPat", FormatGithubPat(githubPat));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateMigrationSourceMutationDocument.Instance.Hash.Value, name: "CreateMigrationSource", document: CreateMigrationSourceMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatUrl(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOwnerId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatAccessToken(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatType(global::OctoshiftCLI.GraphQL.MigrationSourceType value)
        {
            return _migrationSourceTypeFormatter.Format(value);
        }

        private global::System.Object? FormatGithubPat(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateMigrationSource GraphQL operation
    /// <code>
    /// mutation CreateMigrationSource($name: String!, $url: String!, $ownerId: ID!, $accessToken: String!, $type: MigrationSourceType!, $githubPat: String!) {
    ///   createMigrationSource(input: { name: $name, url: $url, ownerId: $ownerId, accessToken: $accessToken, type: $type, githubPat: $githubPat }) {
    ///     __typename
    ///     migrationSource {
    ///       __typename
    ///       id
    ///       name
    ///       url
    ///       type
    ///       ... on MigrationSource {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface ICreateMigrationSourceMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateMigrationSourceResult>> ExecuteAsync(global::System.String name, global::System.String url, global::System.String ownerId, global::System.String accessToken, global::OctoshiftCLI.GraphQL.MigrationSourceType type, global::System.String githubPat, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateMigrationSourceResult>> Watch(global::System.String name, global::System.String url, global::System.String ownerId, global::System.String accessToken, global::OctoshiftCLI.GraphQL.MigrationSourceType type, global::System.String githubPat, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetMigration GraphQL operation
    /// <code>
    /// query GetMigration($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on Migration {
    ///       id
    ///       sourceUrl
    ///       migrationSource {
    ///         __typename
    ///         name
    ///         ... on MigrationSource {
    ///           id
    ///         }
    ///       }
    ///       state
    ///       failureReason
    ///     }
    ///     ... on AddedToProjectEvent {
    ///       id
    ///     }
    ///     ... on App {
    ///       id
    ///     }
    ///     ... on AssignedEvent {
    ///       id
    ///     }
    ///     ... on AutoMergeDisabledEvent {
    ///       id
    ///     }
    ///     ... on AutoMergeEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutoRebaseEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutoSquashEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutomaticBaseChangeFailedEvent {
    ///       id
    ///     }
    ///     ... on AutomaticBaseChangeSucceededEvent {
    ///       id
    ///     }
    ///     ... on BaseRefChangedEvent {
    ///       id
    ///     }
    ///     ... on BaseRefDeletedEvent {
    ///       id
    ///     }
    ///     ... on BaseRefForcePushedEvent {
    ///       id
    ///     }
    ///     ... on Blob {
    ///       id
    ///     }
    ///     ... on Bot {
    ///       id
    ///     }
    ///     ... on BranchProtectionRule {
    ///       id
    ///     }
    ///     ... on BypassForcePushAllowance {
    ///       id
    ///     }
    ///     ... on BypassPullRequestAllowance {
    ///       id
    ///     }
    ///     ... on CWE {
    ///       id
    ///     }
    ///     ... on CheckRun {
    ///       id
    ///     }
    ///     ... on CheckSuite {
    ///       id
    ///     }
    ///     ... on ClosedEvent {
    ///       id
    ///     }
    ///     ... on CodeOfConduct {
    ///       id
    ///     }
    ///     ... on CommentDeletedEvent {
    ///       id
    ///     }
    ///     ... on Commit {
    ///       id
    ///     }
    ///     ... on CommitComment {
    ///       id
    ///     }
    ///     ... on CommitCommentThread {
    ///       id
    ///     }
    ///     ... on ConnectedEvent {
    ///       id
    ///     }
    ///     ... on ConvertToDraftEvent {
    ///       id
    ///     }
    ///     ... on ConvertedNoteToIssueEvent {
    ///       id
    ///     }
    ///     ... on ConvertedToDiscussionEvent {
    ///       id
    ///     }
    ///     ... on CrossReferencedEvent {
    ///       id
    ///     }
    ///     ... on DemilestonedEvent {
    ///       id
    ///     }
    ///     ... on DeployKey {
    ///       id
    ///     }
    ///     ... on DeployedEvent {
    ///       id
    ///     }
    ///     ... on Deployment {
    ///       id
    ///     }
    ///     ... on DeploymentEnvironmentChangedEvent {
    ///       id
    ///     }
    ///     ... on DeploymentReview {
    ///       id
    ///     }
    ///     ... on DeploymentStatus {
    ///       id
    ///     }
    ///     ... on DisconnectedEvent {
    ///       id
    ///     }
    ///     ... on Discussion {
    ///       id
    ///     }
    ///     ... on DiscussionCategory {
    ///       id
    ///     }
    ///     ... on DiscussionComment {
    ///       id
    ///     }
    ///     ... on Enterprise {
    ///       id
    ///     }
    ///     ... on EnterpriseAdministratorInvitation {
    ///       id
    ///     }
    ///     ... on EnterpriseIdentityProvider {
    ///       id
    ///     }
    ///     ... on EnterpriseRepositoryInfo {
    ///       id
    ///     }
    ///     ... on EnterpriseServerInstallation {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccount {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccountEmail {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccountsUpload {
    ///       id
    ///     }
    ///     ... on EnterpriseUserAccount {
    ///       id
    ///     }
    ///     ... on Environment {
    ///       id
    ///     }
    ///     ... on ExternalIdentity {
    ///       id
    ///     }
    ///     ... on Gist {
    ///       id
    ///     }
    ///     ... on GistComment {
    ///       id
    ///     }
    ///     ... on HeadRefDeletedEvent {
    ///       id
    ///     }
    ///     ... on HeadRefForcePushedEvent {
    ///       id
    ///     }
    ///     ... on HeadRefRestoredEvent {
    ///       id
    ///     }
    ///     ... on Import {
    ///       id
    ///     }
    ///     ... on IpAllowListEntry {
    ///       id
    ///     }
    ///     ... on Issue {
    ///       id
    ///     }
    ///     ... on IssueComment {
    ///       id
    ///     }
    ///     ... on Label {
    ///       id
    ///     }
    ///     ... on LabeledEvent {
    ///       id
    ///     }
    ///     ... on Language {
    ///       id
    ///     }
    ///     ... on License {
    ///       id
    ///     }
    ///     ... on LockedEvent {
    ///       id
    ///     }
    ///     ... on Mannequin {
    ///       id
    ///     }
    ///     ... on MarkedAsDuplicateEvent {
    ///       id
    ///     }
    ///     ... on MarketplaceCategory {
    ///       id
    ///     }
    ///     ... on MarketplaceListing {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposClearAuditEntry {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on MentionedEvent {
    ///       id
    ///     }
    ///     ... on MergedEvent {
    ///       id
    ///     }
    ///     ... on MigrationSource {
    ///       id
    ///     }
    ///     ... on Milestone {
    ///       id
    ///     }
    ///     ... on MilestonedEvent {
    ///       id
    ///     }
    ///     ... on MovedColumnsInProjectEvent {
    ///       id
    ///     }
    ///     ... on OIDCProvider {
    ///       id
    ///     }
    ///     ... on OauthApplicationCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgAddBillingManagerAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgBlockUserAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgConfigDisableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgConfigEnableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableOauthAppRestrictionsAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableSamlAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableTwoFactorRequirementAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableOauthAppRestrictionsAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableSamlAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableTwoFactorRequirementAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgInviteMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgInviteToBusinessAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessApprovedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessDeniedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessRequestedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveBillingManagerAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveOutsideCollaboratorAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRestoreMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUnblockUserAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateDefaultRepositoryPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberRepositoryCreationPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on Organization {
    ///       id
    ///     }
    ///     ... on OrganizationIdentityProvider {
    ///       id
    ///     }
    ///     ... on OrganizationInvitation {
    ///       id
    ///     }
    ///     ... on Package {
    ///       id
    ///     }
    ///     ... on PackageFile {
    ///       id
    ///     }
    ///     ... on PackageTag {
    ///       id
    ///     }
    ///     ... on PackageVersion {
    ///       id
    ///     }
    ///     ... on PinnedDiscussion {
    ///       id
    ///     }
    ///     ... on PinnedEvent {
    ///       id
    ///     }
    ///     ... on PinnedIssue {
    ///       id
    ///     }
    ///     ... on PrivateRepositoryForkingDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on PrivateRepositoryForkingEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///     ... on ProjectCard {
    ///       id
    ///     }
    ///     ... on ProjectColumn {
    ///       id
    ///     }
    ///     ... on ProjectNext {
    ///       id
    ///     }
    ///     ... on ProjectNextItem {
    ///       id
    ///     }
    ///     ... on ProjectNextItemFieldValue {
    ///       id
    ///     }
    ///     ... on PublicKey {
    ///       id
    ///     }
    ///     ... on PullRequest {
    ///       id
    ///     }
    ///     ... on PullRequestCommit {
    ///       id
    ///     }
    ///     ... on PullRequestCommitCommentThread {
    ///       id
    ///     }
    ///     ... on PullRequestReview {
    ///       id
    ///     }
    ///     ... on PullRequestReviewComment {
    ///       id
    ///     }
    ///     ... on PullRequestReviewThread {
    ///       id
    ///     }
    ///     ... on Push {
    ///       id
    ///     }
    ///     ... on PushAllowance {
    ///       id
    ///     }
    ///     ... on Reaction {
    ///       id
    ///     }
    ///     ... on ReadyForReviewEvent {
    ///       id
    ///     }
    ///     ... on Ref {
    ///       id
    ///     }
    ///     ... on ReferencedEvent {
    ///       id
    ///     }
    ///     ... on Release {
    ///       id
    ///     }
    ///     ... on ReleaseAsset {
    ///       id
    ///     }
    ///     ... on RemovedFromProjectEvent {
    ///       id
    ///     }
    ///     ... on RenamedTitleEvent {
    ///       id
    ///     }
    ///     ... on ReopenedEvent {
    ///       id
    ///     }
    ///     ... on RepoAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoAddTopicAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoArchivedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoChangeMergeSettingAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableContributorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableSockpuppetDisallowedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableContributorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableSockpuppetDisallowedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigLockAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigUnlockAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoDestroyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoRemoveTopicAuditEntry {
    ///       id
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///     ... on RepositoryInvitation {
    ///       id
    ///     }
    ///     ... on RepositoryMigration {
    ///       id
    ///     }
    ///     ... on RepositoryTopic {
    ///       id
    ///     }
    ///     ... on RepositoryVisibilityChangeDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on RepositoryVisibilityChangeEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on RepositoryVulnerabilityAlert {
    ///       id
    ///     }
    ///     ... on ReviewDismissalAllowance {
    ///       id
    ///     }
    ///     ... on ReviewDismissedEvent {
    ///       id
    ///     }
    ///     ... on ReviewRequest {
    ///       id
    ///     }
    ///     ... on ReviewRequestRemovedEvent {
    ///       id
    ///     }
    ///     ... on ReviewRequestedEvent {
    ///       id
    ///     }
    ///     ... on SavedReply {
    ///       id
    ///     }
    ///     ... on SecurityAdvisory {
    ///       id
    ///     }
    ///     ... on SponsorsActivity {
    ///       id
    ///     }
    ///     ... on SponsorsListing {
    ///       id
    ///     }
    ///     ... on SponsorsTier {
    ///       id
    ///     }
    ///     ... on Sponsorship {
    ///       id
    ///     }
    ///     ... on SponsorshipNewsletter {
    ///       id
    ///     }
    ///     ... on Status {
    ///       id
    ///     }
    ///     ... on StatusCheckRollup {
    ///       id
    ///     }
    ///     ... on StatusContext {
    ///       id
    ///     }
    ///     ... on SubscribedEvent {
    ///       id
    ///     }
    ///     ... on Tag {
    ///       id
    ///     }
    ///     ... on Team {
    ///       id
    ///     }
    ///     ... on TeamAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamAddRepositoryAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamChangeParentTeamAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamDiscussion {
    ///       id
    ///     }
    ///     ... on TeamDiscussionComment {
    ///       id
    ///     }
    ///     ... on TeamRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamRemoveRepositoryAuditEntry {
    ///       id
    ///     }
    ///     ... on Topic {
    ///       id
    ///     }
    ///     ... on TransferredEvent {
    ///       id
    ///     }
    ///     ... on Tree {
    ///       id
    ///     }
    ///     ... on UnassignedEvent {
    ///       id
    ///     }
    ///     ... on UnlabeledEvent {
    ///       id
    ///     }
    ///     ... on UnlockedEvent {
    ///       id
    ///     }
    ///     ... on UnmarkedAsDuplicateEvent {
    ///       id
    ///     }
    ///     ... on UnpinnedEvent {
    ///       id
    ///     }
    ///     ... on UnsubscribedEvent {
    ///       id
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///     ... on UserBlockedEvent {
    ///       id
    ///     }
    ///     ... on UserContentEdit {
    ///       id
    ///     }
    ///     ... on UserStatus {
    ///       id
    ///     }
    ///     ... on VerifiableDomain {
    ///       id
    ///     }
    ///     ... on Workflow {
    ///       id
    ///     }
    ///     ... on WorkflowRun {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigrationQueryDocument : global::StrawberryShake.IDocument
    {
        private GetMigrationQueryDocument()
        {
        }

        public static GetMigrationQueryDocument Instance { get; } = new GetMigrationQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x70, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x71, 0x75, 0x61, 0x73, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x42, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x62, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6f, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x57, 0x45, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x69, 0x74, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x44, 0x72, 0x61, 0x66, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4b, 0x65, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x47, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x66, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x66, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x6e, 0x6e, 0x65, 0x71, 0x75, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x72, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x73, 0x68, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x66, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x70, 0x75, 0x70, 0x70, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x47, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x54, 0x69, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4e, 0x65, 0x77, 0x73, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x61, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x6e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x6e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "32c18d9899eb4dee28fcde8b88d53a70");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMigration GraphQL operation
    /// <code>
    /// query GetMigration($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on Migration {
    ///       id
    ///       sourceUrl
    ///       migrationSource {
    ///         __typename
    ///         name
    ///         ... on MigrationSource {
    ///           id
    ///         }
    ///       }
    ///       state
    ///       failureReason
    ///     }
    ///     ... on AddedToProjectEvent {
    ///       id
    ///     }
    ///     ... on App {
    ///       id
    ///     }
    ///     ... on AssignedEvent {
    ///       id
    ///     }
    ///     ... on AutoMergeDisabledEvent {
    ///       id
    ///     }
    ///     ... on AutoMergeEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutoRebaseEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutoSquashEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutomaticBaseChangeFailedEvent {
    ///       id
    ///     }
    ///     ... on AutomaticBaseChangeSucceededEvent {
    ///       id
    ///     }
    ///     ... on BaseRefChangedEvent {
    ///       id
    ///     }
    ///     ... on BaseRefDeletedEvent {
    ///       id
    ///     }
    ///     ... on BaseRefForcePushedEvent {
    ///       id
    ///     }
    ///     ... on Blob {
    ///       id
    ///     }
    ///     ... on Bot {
    ///       id
    ///     }
    ///     ... on BranchProtectionRule {
    ///       id
    ///     }
    ///     ... on BypassForcePushAllowance {
    ///       id
    ///     }
    ///     ... on BypassPullRequestAllowance {
    ///       id
    ///     }
    ///     ... on CWE {
    ///       id
    ///     }
    ///     ... on CheckRun {
    ///       id
    ///     }
    ///     ... on CheckSuite {
    ///       id
    ///     }
    ///     ... on ClosedEvent {
    ///       id
    ///     }
    ///     ... on CodeOfConduct {
    ///       id
    ///     }
    ///     ... on CommentDeletedEvent {
    ///       id
    ///     }
    ///     ... on Commit {
    ///       id
    ///     }
    ///     ... on CommitComment {
    ///       id
    ///     }
    ///     ... on CommitCommentThread {
    ///       id
    ///     }
    ///     ... on ConnectedEvent {
    ///       id
    ///     }
    ///     ... on ConvertToDraftEvent {
    ///       id
    ///     }
    ///     ... on ConvertedNoteToIssueEvent {
    ///       id
    ///     }
    ///     ... on ConvertedToDiscussionEvent {
    ///       id
    ///     }
    ///     ... on CrossReferencedEvent {
    ///       id
    ///     }
    ///     ... on DemilestonedEvent {
    ///       id
    ///     }
    ///     ... on DeployKey {
    ///       id
    ///     }
    ///     ... on DeployedEvent {
    ///       id
    ///     }
    ///     ... on Deployment {
    ///       id
    ///     }
    ///     ... on DeploymentEnvironmentChangedEvent {
    ///       id
    ///     }
    ///     ... on DeploymentReview {
    ///       id
    ///     }
    ///     ... on DeploymentStatus {
    ///       id
    ///     }
    ///     ... on DisconnectedEvent {
    ///       id
    ///     }
    ///     ... on Discussion {
    ///       id
    ///     }
    ///     ... on DiscussionCategory {
    ///       id
    ///     }
    ///     ... on DiscussionComment {
    ///       id
    ///     }
    ///     ... on Enterprise {
    ///       id
    ///     }
    ///     ... on EnterpriseAdministratorInvitation {
    ///       id
    ///     }
    ///     ... on EnterpriseIdentityProvider {
    ///       id
    ///     }
    ///     ... on EnterpriseRepositoryInfo {
    ///       id
    ///     }
    ///     ... on EnterpriseServerInstallation {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccount {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccountEmail {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccountsUpload {
    ///       id
    ///     }
    ///     ... on EnterpriseUserAccount {
    ///       id
    ///     }
    ///     ... on Environment {
    ///       id
    ///     }
    ///     ... on ExternalIdentity {
    ///       id
    ///     }
    ///     ... on Gist {
    ///       id
    ///     }
    ///     ... on GistComment {
    ///       id
    ///     }
    ///     ... on HeadRefDeletedEvent {
    ///       id
    ///     }
    ///     ... on HeadRefForcePushedEvent {
    ///       id
    ///     }
    ///     ... on HeadRefRestoredEvent {
    ///       id
    ///     }
    ///     ... on Import {
    ///       id
    ///     }
    ///     ... on IpAllowListEntry {
    ///       id
    ///     }
    ///     ... on Issue {
    ///       id
    ///     }
    ///     ... on IssueComment {
    ///       id
    ///     }
    ///     ... on Label {
    ///       id
    ///     }
    ///     ... on LabeledEvent {
    ///       id
    ///     }
    ///     ... on Language {
    ///       id
    ///     }
    ///     ... on License {
    ///       id
    ///     }
    ///     ... on LockedEvent {
    ///       id
    ///     }
    ///     ... on Mannequin {
    ///       id
    ///     }
    ///     ... on MarkedAsDuplicateEvent {
    ///       id
    ///     }
    ///     ... on MarketplaceCategory {
    ///       id
    ///     }
    ///     ... on MarketplaceListing {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposClearAuditEntry {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on MentionedEvent {
    ///       id
    ///     }
    ///     ... on MergedEvent {
    ///       id
    ///     }
    ///     ... on MigrationSource {
    ///       id
    ///     }
    ///     ... on Milestone {
    ///       id
    ///     }
    ///     ... on MilestonedEvent {
    ///       id
    ///     }
    ///     ... on MovedColumnsInProjectEvent {
    ///       id
    ///     }
    ///     ... on OIDCProvider {
    ///       id
    ///     }
    ///     ... on OauthApplicationCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgAddBillingManagerAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgBlockUserAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgConfigDisableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgConfigEnableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableOauthAppRestrictionsAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableSamlAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableTwoFactorRequirementAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableOauthAppRestrictionsAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableSamlAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableTwoFactorRequirementAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgInviteMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgInviteToBusinessAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessApprovedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessDeniedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessRequestedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveBillingManagerAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveOutsideCollaboratorAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRestoreMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUnblockUserAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateDefaultRepositoryPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberRepositoryCreationPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on Organization {
    ///       id
    ///     }
    ///     ... on OrganizationIdentityProvider {
    ///       id
    ///     }
    ///     ... on OrganizationInvitation {
    ///       id
    ///     }
    ///     ... on Package {
    ///       id
    ///     }
    ///     ... on PackageFile {
    ///       id
    ///     }
    ///     ... on PackageTag {
    ///       id
    ///     }
    ///     ... on PackageVersion {
    ///       id
    ///     }
    ///     ... on PinnedDiscussion {
    ///       id
    ///     }
    ///     ... on PinnedEvent {
    ///       id
    ///     }
    ///     ... on PinnedIssue {
    ///       id
    ///     }
    ///     ... on PrivateRepositoryForkingDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on PrivateRepositoryForkingEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///     ... on ProjectCard {
    ///       id
    ///     }
    ///     ... on ProjectColumn {
    ///       id
    ///     }
    ///     ... on ProjectNext {
    ///       id
    ///     }
    ///     ... on ProjectNextItem {
    ///       id
    ///     }
    ///     ... on ProjectNextItemFieldValue {
    ///       id
    ///     }
    ///     ... on PublicKey {
    ///       id
    ///     }
    ///     ... on PullRequest {
    ///       id
    ///     }
    ///     ... on PullRequestCommit {
    ///       id
    ///     }
    ///     ... on PullRequestCommitCommentThread {
    ///       id
    ///     }
    ///     ... on PullRequestReview {
    ///       id
    ///     }
    ///     ... on PullRequestReviewComment {
    ///       id
    ///     }
    ///     ... on PullRequestReviewThread {
    ///       id
    ///     }
    ///     ... on Push {
    ///       id
    ///     }
    ///     ... on PushAllowance {
    ///       id
    ///     }
    ///     ... on Reaction {
    ///       id
    ///     }
    ///     ... on ReadyForReviewEvent {
    ///       id
    ///     }
    ///     ... on Ref {
    ///       id
    ///     }
    ///     ... on ReferencedEvent {
    ///       id
    ///     }
    ///     ... on Release {
    ///       id
    ///     }
    ///     ... on ReleaseAsset {
    ///       id
    ///     }
    ///     ... on RemovedFromProjectEvent {
    ///       id
    ///     }
    ///     ... on RenamedTitleEvent {
    ///       id
    ///     }
    ///     ... on ReopenedEvent {
    ///       id
    ///     }
    ///     ... on RepoAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoAddTopicAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoArchivedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoChangeMergeSettingAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableContributorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableSockpuppetDisallowedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableContributorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableSockpuppetDisallowedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigLockAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigUnlockAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoDestroyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoRemoveTopicAuditEntry {
    ///       id
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///     ... on RepositoryInvitation {
    ///       id
    ///     }
    ///     ... on RepositoryMigration {
    ///       id
    ///     }
    ///     ... on RepositoryTopic {
    ///       id
    ///     }
    ///     ... on RepositoryVisibilityChangeDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on RepositoryVisibilityChangeEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on RepositoryVulnerabilityAlert {
    ///       id
    ///     }
    ///     ... on ReviewDismissalAllowance {
    ///       id
    ///     }
    ///     ... on ReviewDismissedEvent {
    ///       id
    ///     }
    ///     ... on ReviewRequest {
    ///       id
    ///     }
    ///     ... on ReviewRequestRemovedEvent {
    ///       id
    ///     }
    ///     ... on ReviewRequestedEvent {
    ///       id
    ///     }
    ///     ... on SavedReply {
    ///       id
    ///     }
    ///     ... on SecurityAdvisory {
    ///       id
    ///     }
    ///     ... on SponsorsActivity {
    ///       id
    ///     }
    ///     ... on SponsorsListing {
    ///       id
    ///     }
    ///     ... on SponsorsTier {
    ///       id
    ///     }
    ///     ... on Sponsorship {
    ///       id
    ///     }
    ///     ... on SponsorshipNewsletter {
    ///       id
    ///     }
    ///     ... on Status {
    ///       id
    ///     }
    ///     ... on StatusCheckRollup {
    ///       id
    ///     }
    ///     ... on StatusContext {
    ///       id
    ///     }
    ///     ... on SubscribedEvent {
    ///       id
    ///     }
    ///     ... on Tag {
    ///       id
    ///     }
    ///     ... on Team {
    ///       id
    ///     }
    ///     ... on TeamAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamAddRepositoryAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamChangeParentTeamAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamDiscussion {
    ///       id
    ///     }
    ///     ... on TeamDiscussionComment {
    ///       id
    ///     }
    ///     ... on TeamRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamRemoveRepositoryAuditEntry {
    ///       id
    ///     }
    ///     ... on Topic {
    ///       id
    ///     }
    ///     ... on TransferredEvent {
    ///       id
    ///     }
    ///     ... on Tree {
    ///       id
    ///     }
    ///     ... on UnassignedEvent {
    ///       id
    ///     }
    ///     ... on UnlabeledEvent {
    ///       id
    ///     }
    ///     ... on UnlockedEvent {
    ///       id
    ///     }
    ///     ... on UnmarkedAsDuplicateEvent {
    ///       id
    ///     }
    ///     ... on UnpinnedEvent {
    ///       id
    ///     }
    ///     ... on UnsubscribedEvent {
    ///       id
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///     ... on UserBlockedEvent {
    ///       id
    ///     }
    ///     ... on UserContentEdit {
    ///       id
    ///     }
    ///     ... on UserStatus {
    ///       id
    ///     }
    ///     ... on VerifiableDomain {
    ///       id
    ///     }
    ///     ... on Workflow {
    ///       id
    ///     }
    ///     ... on WorkflowRun {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigrationQuery : global::OctoshiftCLI.GraphQL.IGetMigrationQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetMigrationResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetMigrationQuery(global::StrawberryShake.IOperationExecutor<IGetMigrationResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetMigrationResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMigrationResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMigrationResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetMigrationQueryDocument.Instance.Hash.Value, name: "GetMigration", document: GetMigrationQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetMigration GraphQL operation
    /// <code>
    /// query GetMigration($id: ID!) {
    ///   node(id: $id) {
    ///     __typename
    ///     ... on Migration {
    ///       id
    ///       sourceUrl
    ///       migrationSource {
    ///         __typename
    ///         name
    ///         ... on MigrationSource {
    ///           id
    ///         }
    ///       }
    ///       state
    ///       failureReason
    ///     }
    ///     ... on AddedToProjectEvent {
    ///       id
    ///     }
    ///     ... on App {
    ///       id
    ///     }
    ///     ... on AssignedEvent {
    ///       id
    ///     }
    ///     ... on AutoMergeDisabledEvent {
    ///       id
    ///     }
    ///     ... on AutoMergeEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutoRebaseEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutoSquashEnabledEvent {
    ///       id
    ///     }
    ///     ... on AutomaticBaseChangeFailedEvent {
    ///       id
    ///     }
    ///     ... on AutomaticBaseChangeSucceededEvent {
    ///       id
    ///     }
    ///     ... on BaseRefChangedEvent {
    ///       id
    ///     }
    ///     ... on BaseRefDeletedEvent {
    ///       id
    ///     }
    ///     ... on BaseRefForcePushedEvent {
    ///       id
    ///     }
    ///     ... on Blob {
    ///       id
    ///     }
    ///     ... on Bot {
    ///       id
    ///     }
    ///     ... on BranchProtectionRule {
    ///       id
    ///     }
    ///     ... on BypassForcePushAllowance {
    ///       id
    ///     }
    ///     ... on BypassPullRequestAllowance {
    ///       id
    ///     }
    ///     ... on CWE {
    ///       id
    ///     }
    ///     ... on CheckRun {
    ///       id
    ///     }
    ///     ... on CheckSuite {
    ///       id
    ///     }
    ///     ... on ClosedEvent {
    ///       id
    ///     }
    ///     ... on CodeOfConduct {
    ///       id
    ///     }
    ///     ... on CommentDeletedEvent {
    ///       id
    ///     }
    ///     ... on Commit {
    ///       id
    ///     }
    ///     ... on CommitComment {
    ///       id
    ///     }
    ///     ... on CommitCommentThread {
    ///       id
    ///     }
    ///     ... on ConnectedEvent {
    ///       id
    ///     }
    ///     ... on ConvertToDraftEvent {
    ///       id
    ///     }
    ///     ... on ConvertedNoteToIssueEvent {
    ///       id
    ///     }
    ///     ... on ConvertedToDiscussionEvent {
    ///       id
    ///     }
    ///     ... on CrossReferencedEvent {
    ///       id
    ///     }
    ///     ... on DemilestonedEvent {
    ///       id
    ///     }
    ///     ... on DeployKey {
    ///       id
    ///     }
    ///     ... on DeployedEvent {
    ///       id
    ///     }
    ///     ... on Deployment {
    ///       id
    ///     }
    ///     ... on DeploymentEnvironmentChangedEvent {
    ///       id
    ///     }
    ///     ... on DeploymentReview {
    ///       id
    ///     }
    ///     ... on DeploymentStatus {
    ///       id
    ///     }
    ///     ... on DisconnectedEvent {
    ///       id
    ///     }
    ///     ... on Discussion {
    ///       id
    ///     }
    ///     ... on DiscussionCategory {
    ///       id
    ///     }
    ///     ... on DiscussionComment {
    ///       id
    ///     }
    ///     ... on Enterprise {
    ///       id
    ///     }
    ///     ... on EnterpriseAdministratorInvitation {
    ///       id
    ///     }
    ///     ... on EnterpriseIdentityProvider {
    ///       id
    ///     }
    ///     ... on EnterpriseRepositoryInfo {
    ///       id
    ///     }
    ///     ... on EnterpriseServerInstallation {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccount {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccountEmail {
    ///       id
    ///     }
    ///     ... on EnterpriseServerUserAccountsUpload {
    ///       id
    ///     }
    ///     ... on EnterpriseUserAccount {
    ///       id
    ///     }
    ///     ... on Environment {
    ///       id
    ///     }
    ///     ... on ExternalIdentity {
    ///       id
    ///     }
    ///     ... on Gist {
    ///       id
    ///     }
    ///     ... on GistComment {
    ///       id
    ///     }
    ///     ... on HeadRefDeletedEvent {
    ///       id
    ///     }
    ///     ... on HeadRefForcePushedEvent {
    ///       id
    ///     }
    ///     ... on HeadRefRestoredEvent {
    ///       id
    ///     }
    ///     ... on Import {
    ///       id
    ///     }
    ///     ... on IpAllowListEntry {
    ///       id
    ///     }
    ///     ... on Issue {
    ///       id
    ///     }
    ///     ... on IssueComment {
    ///       id
    ///     }
    ///     ... on Label {
    ///       id
    ///     }
    ///     ... on LabeledEvent {
    ///       id
    ///     }
    ///     ... on Language {
    ///       id
    ///     }
    ///     ... on License {
    ///       id
    ///     }
    ///     ... on LockedEvent {
    ///       id
    ///     }
    ///     ... on Mannequin {
    ///       id
    ///     }
    ///     ... on MarkedAsDuplicateEvent {
    ///       id
    ///     }
    ///     ... on MarketplaceCategory {
    ///       id
    ///     }
    ///     ... on MarketplaceListing {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposClearAuditEntry {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on MembersCanDeleteReposEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on MentionedEvent {
    ///       id
    ///     }
    ///     ... on MergedEvent {
    ///       id
    ///     }
    ///     ... on MigrationSource {
    ///       id
    ///     }
    ///     ... on Milestone {
    ///       id
    ///     }
    ///     ... on MilestonedEvent {
    ///       id
    ///     }
    ///     ... on MovedColumnsInProjectEvent {
    ///       id
    ///     }
    ///     ... on OIDCProvider {
    ///       id
    ///     }
    ///     ... on OauthApplicationCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgAddBillingManagerAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgBlockUserAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgConfigDisableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgConfigEnableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableOauthAppRestrictionsAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableSamlAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgDisableTwoFactorRequirementAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableOauthAppRestrictionsAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableSamlAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgEnableTwoFactorRequirementAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgInviteMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgInviteToBusinessAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessApprovedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessDeniedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgOauthAppAccessRequestedAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveBillingManagerAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRemoveOutsideCollaboratorAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgRestoreMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUnblockUserAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateDefaultRepositoryPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberRepositoryCreationPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
    ///       id
    ///     }
    ///     ... on Organization {
    ///       id
    ///     }
    ///     ... on OrganizationIdentityProvider {
    ///       id
    ///     }
    ///     ... on OrganizationInvitation {
    ///       id
    ///     }
    ///     ... on Package {
    ///       id
    ///     }
    ///     ... on PackageFile {
    ///       id
    ///     }
    ///     ... on PackageTag {
    ///       id
    ///     }
    ///     ... on PackageVersion {
    ///       id
    ///     }
    ///     ... on PinnedDiscussion {
    ///       id
    ///     }
    ///     ... on PinnedEvent {
    ///       id
    ///     }
    ///     ... on PinnedIssue {
    ///       id
    ///     }
    ///     ... on PrivateRepositoryForkingDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on PrivateRepositoryForkingEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on Project {
    ///       id
    ///     }
    ///     ... on ProjectCard {
    ///       id
    ///     }
    ///     ... on ProjectColumn {
    ///       id
    ///     }
    ///     ... on ProjectNext {
    ///       id
    ///     }
    ///     ... on ProjectNextItem {
    ///       id
    ///     }
    ///     ... on ProjectNextItemFieldValue {
    ///       id
    ///     }
    ///     ... on PublicKey {
    ///       id
    ///     }
    ///     ... on PullRequest {
    ///       id
    ///     }
    ///     ... on PullRequestCommit {
    ///       id
    ///     }
    ///     ... on PullRequestCommitCommentThread {
    ///       id
    ///     }
    ///     ... on PullRequestReview {
    ///       id
    ///     }
    ///     ... on PullRequestReviewComment {
    ///       id
    ///     }
    ///     ... on PullRequestReviewThread {
    ///       id
    ///     }
    ///     ... on Push {
    ///       id
    ///     }
    ///     ... on PushAllowance {
    ///       id
    ///     }
    ///     ... on Reaction {
    ///       id
    ///     }
    ///     ... on ReadyForReviewEvent {
    ///       id
    ///     }
    ///     ... on Ref {
    ///       id
    ///     }
    ///     ... on ReferencedEvent {
    ///       id
    ///     }
    ///     ... on Release {
    ///       id
    ///     }
    ///     ... on ReleaseAsset {
    ///       id
    ///     }
    ///     ... on RemovedFromProjectEvent {
    ///       id
    ///     }
    ///     ... on RenamedTitleEvent {
    ///       id
    ///     }
    ///     ... on ReopenedEvent {
    ///       id
    ///     }
    ///     ... on RepoAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoAddTopicAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoArchivedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoChangeMergeSettingAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableContributorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigDisableSockpuppetDisallowedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableCollaboratorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableContributorsOnlyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigEnableSockpuppetDisallowedAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigLockAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoConfigUnlockAnonymousGitAccessAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoCreateAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoDestroyAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on RepoRemoveTopicAuditEntry {
    ///       id
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///     ... on RepositoryInvitation {
    ///       id
    ///     }
    ///     ... on RepositoryMigration {
    ///       id
    ///     }
    ///     ... on RepositoryTopic {
    ///       id
    ///     }
    ///     ... on RepositoryVisibilityChangeDisableAuditEntry {
    ///       id
    ///     }
    ///     ... on RepositoryVisibilityChangeEnableAuditEntry {
    ///       id
    ///     }
    ///     ... on RepositoryVulnerabilityAlert {
    ///       id
    ///     }
    ///     ... on ReviewDismissalAllowance {
    ///       id
    ///     }
    ///     ... on ReviewDismissedEvent {
    ///       id
    ///     }
    ///     ... on ReviewRequest {
    ///       id
    ///     }
    ///     ... on ReviewRequestRemovedEvent {
    ///       id
    ///     }
    ///     ... on ReviewRequestedEvent {
    ///       id
    ///     }
    ///     ... on SavedReply {
    ///       id
    ///     }
    ///     ... on SecurityAdvisory {
    ///       id
    ///     }
    ///     ... on SponsorsActivity {
    ///       id
    ///     }
    ///     ... on SponsorsListing {
    ///       id
    ///     }
    ///     ... on SponsorsTier {
    ///       id
    ///     }
    ///     ... on Sponsorship {
    ///       id
    ///     }
    ///     ... on SponsorshipNewsletter {
    ///       id
    ///     }
    ///     ... on Status {
    ///       id
    ///     }
    ///     ... on StatusCheckRollup {
    ///       id
    ///     }
    ///     ... on StatusContext {
    ///       id
    ///     }
    ///     ... on SubscribedEvent {
    ///       id
    ///     }
    ///     ... on Tag {
    ///       id
    ///     }
    ///     ... on Team {
    ///       id
    ///     }
    ///     ... on TeamAddMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamAddRepositoryAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamChangeParentTeamAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamDiscussion {
    ///       id
    ///     }
    ///     ... on TeamDiscussionComment {
    ///       id
    ///     }
    ///     ... on TeamRemoveMemberAuditEntry {
    ///       id
    ///     }
    ///     ... on TeamRemoveRepositoryAuditEntry {
    ///       id
    ///     }
    ///     ... on Topic {
    ///       id
    ///     }
    ///     ... on TransferredEvent {
    ///       id
    ///     }
    ///     ... on Tree {
    ///       id
    ///     }
    ///     ... on UnassignedEvent {
    ///       id
    ///     }
    ///     ... on UnlabeledEvent {
    ///       id
    ///     }
    ///     ... on UnlockedEvent {
    ///       id
    ///     }
    ///     ... on UnmarkedAsDuplicateEvent {
    ///       id
    ///     }
    ///     ... on UnpinnedEvent {
    ///       id
    ///     }
    ///     ... on UnsubscribedEvent {
    ///       id
    ///     }
    ///     ... on User {
    ///       id
    ///     }
    ///     ... on UserBlockedEvent {
    ///       id
    ///     }
    ///     ... on UserContentEdit {
    ///       id
    ///     }
    ///     ... on UserStatus {
    ///       id
    ///     }
    ///     ... on VerifiableDomain {
    ///       id
    ///     }
    ///     ... on Workflow {
    ///       id
    ///     }
    ///     ... on WorkflowRun {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetMigrationQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetMigrationResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetMigrationResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetOrganizationInfo GraphQL operation
    /// <code>
    /// query GetOrganizationInfo($login: String!) {
    ///   organization(login: $login) {
    ///     __typename
    ///     login
    ///     id
    ///     name
    ///     ... on Organization {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfoQueryDocument : global::StrawberryShake.IDocument
    {
        private GetOrganizationInfoQueryDocument()
        {
        }

        public static GetOrganizationInfoQueryDocument Instance { get; } = new GetOrganizationInfoQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x24, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x20, 0x24, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "56e507939dc47f5a11c5710fcd32690a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOrganizationInfo GraphQL operation
    /// <code>
    /// query GetOrganizationInfo($login: String!) {
    ///   organization(login: $login) {
    ///     __typename
    ///     login
    ///     id
    ///     name
    ///     ... on Organization {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfoQuery : global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetOrganizationInfoResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetOrganizationInfoQuery(global::StrawberryShake.IOperationExecutor<IGetOrganizationInfoResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetOrganizationInfoResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOrganizationInfoResult>> ExecuteAsync(global::System.String login, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(login);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOrganizationInfoResult>> Watch(global::System.String login, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(login);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String login)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("login", FormatLogin(login));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetOrganizationInfoQueryDocument.Instance.Hash.Value, name: "GetOrganizationInfo", document: GetOrganizationInfoQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatLogin(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetOrganizationInfo GraphQL operation
    /// <code>
    /// query GetOrganizationInfo($login: String!) {
    ///   organization(login: $login) {
    ///     __typename
    ///     login
    ///     id
    ///     name
    ///     ... on Organization {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGetOrganizationInfoQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetOrganizationInfoResult>> ExecuteAsync(global::System.String login, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetOrganizationInfoResult>> Watch(global::System.String login, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GrantMigratorRole GraphQL operation
    /// <code>
    /// mutation GrantMigratorRole($organizationId: ID!, $actor: String!, $actor_type: ActorType!) {
    ///   grantMigratorRole(input: { organizationId: $organizationId, actor: $actor, actorType: $actor_type }) {
    ///     __typename
    ///     success
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRoleMutationDocument : global::StrawberryShake.IDocument
    {
        private GrantMigratorRoleMutationDocument()
        {
        }

        public static GrantMigratorRoleMutationDocument Instance { get; } = new GrantMigratorRoleMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x28, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "431846d90031d0a0914240540c46e8f4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GrantMigratorRole GraphQL operation
    /// <code>
    /// mutation GrantMigratorRole($organizationId: ID!, $actor: String!, $actor_type: ActorType!) {
    ///   grantMigratorRole(input: { organizationId: $organizationId, actor: $actor, actorType: $actor_type }) {
    ///     __typename
    ///     success
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRoleMutation : global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGrantMigratorRoleResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _actorTypeFormatter;
        public GrantMigratorRoleMutation(global::StrawberryShake.IOperationExecutor<IGrantMigratorRoleResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _actorTypeFormatter = serializerResolver.GetInputValueFormatter("ActorType");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGrantMigratorRoleResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGrantMigratorRoleResult>> ExecuteAsync(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(organizationId, actor, actor_Type);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGrantMigratorRoleResult>> Watch(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(organizationId, actor, actor_Type);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("organizationId", FormatOrganizationId(organizationId));
            variables.Add("actor", FormatActor(actor));
            variables.Add("actor_type", FormatActor_type(actor_Type));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GrantMigratorRoleMutationDocument.Instance.Hash.Value, name: "GrantMigratorRole", document: GrantMigratorRoleMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatOrganizationId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatActor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatActor_type(global::OctoshiftCLI.GraphQL.ActorType value)
        {
            return _actorTypeFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GrantMigratorRole GraphQL operation
    /// <code>
    /// mutation GrantMigratorRole($organizationId: ID!, $actor: String!, $actor_type: ActorType!) {
    ///   grantMigratorRole(input: { organizationId: $organizationId, actor: $actor, actorType: $actor_type }) {
    ///     __typename
    ///     success
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGrantMigratorRoleMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGrantMigratorRoleResult>> ExecuteAsync(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGrantMigratorRoleResult>> Watch(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RevokeMigratorRole GraphQL operation
    /// <code>
    /// mutation RevokeMigratorRole($organizationId: ID!, $actor: String!, $actor_type: ActorType!) {
    ///   revokeMigratorRole(input: { organizationId: $organizationId, actor: $actor, actorType: $actor_type }) {
    ///     __typename
    ///     success
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRoleMutationDocument : global::StrawberryShake.IDocument
    {
        private RevokeMigratorRoleMutationDocument()
        {
        }

        public static RevokeMigratorRoleMutationDocument Instance { get; } = new RevokeMigratorRoleMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x28, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2c, 0x20, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a470eafbe2626e379a6f75026cc7056c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RevokeMigratorRole GraphQL operation
    /// <code>
    /// mutation RevokeMigratorRole($organizationId: ID!, $actor: String!, $actor_type: ActorType!) {
    ///   revokeMigratorRole(input: { organizationId: $organizationId, actor: $actor, actorType: $actor_type }) {
    ///     __typename
    ///     success
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRoleMutation : global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRevokeMigratorRoleResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _actorTypeFormatter;
        public RevokeMigratorRoleMutation(global::StrawberryShake.IOperationExecutor<IRevokeMigratorRoleResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _actorTypeFormatter = serializerResolver.GetInputValueFormatter("ActorType");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRevokeMigratorRoleResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRevokeMigratorRoleResult>> ExecuteAsync(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(organizationId, actor, actor_Type);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRevokeMigratorRoleResult>> Watch(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(organizationId, actor, actor_Type);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("organizationId", FormatOrganizationId(organizationId));
            variables.Add("actor", FormatActor(actor));
            variables.Add("actor_type", FormatActor_type(actor_Type));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RevokeMigratorRoleMutationDocument.Instance.Hash.Value, name: "RevokeMigratorRole", document: RevokeMigratorRoleMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatOrganizationId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatActor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatActor_type(global::OctoshiftCLI.GraphQL.ActorType value)
        {
            return _actorTypeFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RevokeMigratorRole GraphQL operation
    /// <code>
    /// mutation RevokeMigratorRole($organizationId: ID!, $actor: String!, $actor_type: ActorType!) {
    ///   revokeMigratorRole(input: { organizationId: $organizationId, actor: $actor, actorType: $actor_type }) {
    ///     __typename
    ///     success
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IRevokeMigratorRoleMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRevokeMigratorRoleResult>> ExecuteAsync(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRevokeMigratorRoleResult>> Watch(global::System.String organizationId, global::System.String actor, global::OctoshiftCLI.GraphQL.ActorType actor_Type, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the StartRepositoryMigration GraphQL operation
    /// <code>
    /// mutation StartRepositoryMigration($sourceId: ID!, $ownerId: ID!, $sourceRepositoryUrl: URI!, $repositoryName: String!, $continueOnError: Boolean!) {
    ///   startRepositoryMigration(input: { sourceId: $sourceId, ownerId: $ownerId, sourceRepositoryUrl: $sourceRepositoryUrl, repositoryName: $repositoryName, continueOnError: $continueOnError }) {
    ///     __typename
    ///     repositoryMigration {
    ///       __typename
    ///       id
    ///       migrationSource {
    ///         __typename
    ///         id
    ///         name
    ///         type
    ///         ... on MigrationSource {
    ///           id
    ///         }
    ///       }
    ///       sourceUrl
    ///       state
    ///       failureReason
    ///       ... on RepositoryMigration {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationMutationDocument : global::StrawberryShake.IDocument
    {
        private StartRepositoryMigrationMutationDocument()
        {
        }

        public static StartRepositoryMigrationMutationDocument Instance { get; } = new StartRepositoryMigrationMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x55, 0x52, 0x49, 0x21, 0x2c, 0x20, 0x24, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x2c, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x2c, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4929ea661a54d09d672e5f2f2bd3273f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the StartRepositoryMigration GraphQL operation
    /// <code>
    /// mutation StartRepositoryMigration($sourceId: ID!, $ownerId: ID!, $sourceRepositoryUrl: URI!, $repositoryName: String!, $continueOnError: Boolean!) {
    ///   startRepositoryMigration(input: { sourceId: $sourceId, ownerId: $ownerId, sourceRepositoryUrl: $sourceRepositoryUrl, repositoryName: $repositoryName, continueOnError: $continueOnError }) {
    ///     __typename
    ///     repositoryMigration {
    ///       __typename
    ///       id
    ///       migrationSource {
    ///         __typename
    ///         id
    ///         name
    ///         type
    ///         ... on MigrationSource {
    ///           id
    ///         }
    ///       }
    ///       sourceUrl
    ///       state
    ///       failureReason
    ///       ... on RepositoryMigration {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationMutation : global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IStartRepositoryMigrationResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uRIFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public StartRepositoryMigrationMutation(global::StrawberryShake.IOperationExecutor<IStartRepositoryMigrationResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _uRIFormatter = serializerResolver.GetInputValueFormatter("URI");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IStartRepositoryMigrationResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IStartRepositoryMigrationResult>> ExecuteAsync(global::System.String sourceId, global::System.String ownerId, global::System.Uri sourceRepositoryUrl, global::System.String repositoryName, global::System.Boolean continueOnError, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(sourceId, ownerId, sourceRepositoryUrl, repositoryName, continueOnError);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IStartRepositoryMigrationResult>> Watch(global::System.String sourceId, global::System.String ownerId, global::System.Uri sourceRepositoryUrl, global::System.String repositoryName, global::System.Boolean continueOnError, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(sourceId, ownerId, sourceRepositoryUrl, repositoryName, continueOnError);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String sourceId, global::System.String ownerId, global::System.Uri sourceRepositoryUrl, global::System.String repositoryName, global::System.Boolean continueOnError)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("sourceId", FormatSourceId(sourceId));
            variables.Add("ownerId", FormatOwnerId(ownerId));
            variables.Add("sourceRepositoryUrl", FormatSourceRepositoryUrl(sourceRepositoryUrl));
            variables.Add("repositoryName", FormatRepositoryName(repositoryName));
            variables.Add("continueOnError", FormatContinueOnError(continueOnError));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: StartRepositoryMigrationMutationDocument.Instance.Hash.Value, name: "StartRepositoryMigration", document: StartRepositoryMigrationMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSourceId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatOwnerId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatSourceRepositoryUrl(global::System.Uri value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _uRIFormatter.Format(value);
        }

        private global::System.Object? FormatRepositoryName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatContinueOnError(global::System.Boolean value)
        {
            return _booleanFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the StartRepositoryMigration GraphQL operation
    /// <code>
    /// mutation StartRepositoryMigration($sourceId: ID!, $ownerId: ID!, $sourceRepositoryUrl: URI!, $repositoryName: String!, $continueOnError: Boolean!) {
    ///   startRepositoryMigration(input: { sourceId: $sourceId, ownerId: $ownerId, sourceRepositoryUrl: $sourceRepositoryUrl, repositoryName: $repositoryName, continueOnError: $continueOnError }) {
    ///     __typename
    ///     repositoryMigration {
    ///       __typename
    ///       id
    ///       migrationSource {
    ///         __typename
    ///         id
    ///         name
    ///         type
    ///         ... on MigrationSource {
    ///           id
    ///         }
    ///       }
    ///       sourceUrl
    ///       state
    ///       failureReason
    ///       ... on RepositoryMigration {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IStartRepositoryMigrationMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IStartRepositoryMigrationResult>> ExecuteAsync(global::System.String sourceId, global::System.String ownerId, global::System.Uri sourceRepositoryUrl, global::System.String repositoryName, global::System.Boolean continueOnError, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IStartRepositoryMigrationResult>> Watch(global::System.String sourceId, global::System.String ownerId, global::System.Uri sourceRepositoryUrl, global::System.String repositoryName, global::System.Boolean continueOnError, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GithubGraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GithubGraphQLClient : global::OctoshiftCLI.GraphQL.IGithubGraphQLClient
    {
        private readonly global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation _createMigrationSource;
        private readonly global::OctoshiftCLI.GraphQL.IGetMigrationQuery _getMigration;
        private readonly global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery _getOrganizationInfo;
        private readonly global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation _grantMigratorRole;
        private readonly global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation _revokeMigratorRole;
        private readonly global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation _startRepositoryMigration;
        public GithubGraphQLClient(global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation createMigrationSource, global::OctoshiftCLI.GraphQL.IGetMigrationQuery getMigration, global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery getOrganizationInfo, global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation grantMigratorRole, global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation revokeMigratorRole, global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation startRepositoryMigration)
        {
            _createMigrationSource = createMigrationSource ?? throw new global::System.ArgumentNullException(nameof(createMigrationSource));
            _getMigration = getMigration ?? throw new global::System.ArgumentNullException(nameof(getMigration));
            _getOrganizationInfo = getOrganizationInfo ?? throw new global::System.ArgumentNullException(nameof(getOrganizationInfo));
            _grantMigratorRole = grantMigratorRole ?? throw new global::System.ArgumentNullException(nameof(grantMigratorRole));
            _revokeMigratorRole = revokeMigratorRole ?? throw new global::System.ArgumentNullException(nameof(revokeMigratorRole));
            _startRepositoryMigration = startRepositoryMigration ?? throw new global::System.ArgumentNullException(nameof(startRepositoryMigration));
        }

        public static global::System.String ClientName => "GithubGraphQLClient";
        public global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation CreateMigrationSource => _createMigrationSource;
        public global::OctoshiftCLI.GraphQL.IGetMigrationQuery GetMigration => _getMigration;
        public global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery GetOrganizationInfo => _getOrganizationInfo;
        public global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation GrantMigratorRole => _grantMigratorRole;
        public global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation RevokeMigratorRole => _revokeMigratorRole;
        public global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation StartRepositoryMigration => _startRepositoryMigration;
    }

    /// <summary>
    /// Represents the GithubGraphQLClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public interface IGithubGraphQLClient
    {
        global::OctoshiftCLI.GraphQL.ICreateMigrationSourceMutation CreateMigrationSource { get; }

        global::OctoshiftCLI.GraphQL.IGetMigrationQuery GetMigration { get; }

        global::OctoshiftCLI.GraphQL.IGetOrganizationInfoQuery GetOrganizationInfo { get; }

        global::OctoshiftCLI.GraphQL.IGrantMigratorRoleMutation GrantMigratorRole { get; }

        global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleMutation RevokeMigratorRole { get; }

        global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationMutation StartRepositoryMigration { get; }
    }
}

namespace OctoshiftCLI.GraphQL.State
{
    ///<summary>An Octoshift migration source.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MigrationSourceEntity
    {
        public MigrationSourceEntity(global::System.String id = default !, global::System.String name = default !, global::System.Uri url = default !, global::OctoshiftCLI.GraphQL.MigrationSourceType type = default !)
        {
            Id = id;
            Name = name;
            Url = url;
            Type = type;
        }

        public global::System.String Id { get; }

        ///<summary>The Octoshift migration source name.</summary>
        public global::System.String Name { get; }

        ///<summary>The Octoshift migration source URL.</summary>
        public global::System.Uri Url { get; }

        ///<summary>The Octoshift migration source type.</summary>
        public global::OctoshiftCLI.GraphQL.MigrationSourceType Type { get; }
    }

    ///<summary>Represents a 'added_to_project' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AddedToProjectEventEntity
    {
    }

    ///<summary>A GitHub App.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AppEntity
    {
    }

    ///<summary>Represents an 'assigned' event on any assignable object.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AssignedEventEntity
    {
    }

    ///<summary>Represents a 'auto_merge_disabled' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AutoMergeDisabledEventEntity
    {
    }

    ///<summary>Represents a 'auto_merge_enabled' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AutoMergeEnabledEventEntity
    {
    }

    ///<summary>Represents a 'auto_rebase_enabled' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AutoRebaseEnabledEventEntity
    {
    }

    ///<summary>Represents a 'auto_squash_enabled' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AutoSquashEnabledEventEntity
    {
    }

    ///<summary>Represents a 'automatic_base_change_failed' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AutomaticBaseChangeFailedEventEntity
    {
    }

    ///<summary>Represents a 'automatic_base_change_succeeded' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class AutomaticBaseChangeSucceededEventEntity
    {
    }

    ///<summary>Represents a 'base_ref_changed' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BaseRefChangedEventEntity
    {
    }

    ///<summary>Represents a 'base_ref_deleted' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BaseRefDeletedEventEntity
    {
    }

    ///<summary>Represents a 'base_ref_force_pushed' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BaseRefForcePushedEventEntity
    {
    }

    ///<summary>Represents a Git blob.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BlobEntity
    {
    }

    ///<summary>A special type of user which takes actions on behalf of GitHub Apps.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BotEntity
    {
    }

    ///<summary>A branch protection rule.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BranchProtectionRuleEntity
    {
    }

    ///<summary>A team or user who has the ability to bypass a force push requirement on a protected branch.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BypassForcePushAllowanceEntity
    {
    }

    ///<summary>A team or user who has the ability to bypass a pull request requirement on a protected branch.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class BypassPullRequestAllowanceEntity
    {
    }

    ///<summary>A common weakness enumeration</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CWEEntity
    {
    }

    ///<summary>A check run.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CheckRunEntity
    {
    }

    ///<summary>A check suite.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CheckSuiteEntity
    {
    }

    ///<summary>Represents a 'closed' event on any `Closable`.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ClosedEventEntity
    {
    }

    ///<summary>The Code of Conduct for a repository</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CodeOfConductEntity
    {
    }

    ///<summary>Represents a 'comment_deleted' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CommentDeletedEventEntity
    {
    }

    ///<summary>Represents a Git commit.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CommitEntity
    {
    }

    ///<summary>Represents a comment on a given Commit.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CommitCommentEntity
    {
    }

    ///<summary>A thread of comments on a commit.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CommitCommentThreadEntity
    {
    }

    ///<summary>Represents a 'connected' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConnectedEventEntity
    {
    }

    ///<summary>Represents a 'convert_to_draft' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConvertToDraftEventEntity
    {
    }

    ///<summary>Represents a 'converted_note_to_issue' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConvertedNoteToIssueEventEntity
    {
    }

    ///<summary>Represents a 'converted_to_discussion' event on a given issue.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ConvertedToDiscussionEventEntity
    {
    }

    ///<summary>Represents a mention made by one issue or pull request to another.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CrossReferencedEventEntity
    {
    }

    ///<summary>Represents a 'demilestoned' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DemilestonedEventEntity
    {
    }

    ///<summary>A repository deploy key.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeployKeyEntity
    {
    }

    ///<summary>Represents a 'deployed' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeployedEventEntity
    {
    }

    ///<summary>Represents triggered deployment instance.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeploymentEntity
    {
    }

    ///<summary>Represents a 'deployment_environment_changed' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeploymentEnvironmentChangedEventEntity
    {
    }

    ///<summary>A deployment review.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeploymentReviewEntity
    {
    }

    ///<summary>Describes the status of a given deployment attempt.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DeploymentStatusEntity
    {
    }

    ///<summary>Represents a 'disconnected' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DisconnectedEventEntity
    {
    }

    ///<summary>A discussion in a repository.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DiscussionEntity
    {
    }

    ///<summary>A category for discussions in a repository.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DiscussionCategoryEntity
    {
    }

    ///<summary>A comment on a discussion.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class DiscussionCommentEntity
    {
    }

    ///<summary>An account to manage multiple organizations with consolidated policy and billing.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseEntity
    {
    }

    ///<summary>An invitation for a user to become an owner or billing manager of an enterprise.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseAdministratorInvitationEntity
    {
    }

    ///<summary>An identity provider configured to provision identities for an enterprise.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseIdentityProviderEntity
    {
    }

    ///<summary>A subset of repository information queryable from an enterprise.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseRepositoryInfoEntity
    {
    }

    ///<summary>An Enterprise Server installation.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseServerInstallationEntity
    {
    }

    ///<summary>A user account on an Enterprise Server installation.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseServerUserAccountEntity
    {
    }

    ///<summary>An email belonging to a user account on an Enterprise Server installation.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseServerUserAccountEmailEntity
    {
    }

    ///<summary>A user accounts upload from an Enterprise Server installation.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseServerUserAccountsUploadEntity
    {
    }

    ///<summary>An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnterpriseUserAccountEntity
    {
    }

    ///<summary>An environment.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class EnvironmentEntity
    {
    }

    ///<summary>An external identity provisioned by SAML SSO or SCIM.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ExternalIdentityEntity
    {
    }

    ///<summary>A Gist.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GistEntity
    {
    }

    ///<summary>Represents a comment on an Gist.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GistCommentEntity
    {
    }

    ///<summary>Represents a 'head_ref_deleted' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class HeadRefDeletedEventEntity
    {
    }

    ///<summary>Represents a 'head_ref_force_pushed' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class HeadRefForcePushedEventEntity
    {
    }

    ///<summary>Represents a 'head_ref_restored' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class HeadRefRestoredEventEntity
    {
    }

    ///<summary>An import to GitHub</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ImportEntity
    {
    }

    ///<summary>An IP address or range of addresses that is allowed to access an owner's resources.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class IpAllowListEntryEntity
    {
    }

    ///<summary>An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class IssueEntity
    {
    }

    ///<summary>Represents a comment on an Issue.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class IssueCommentEntity
    {
    }

    ///<summary>A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LabelEntity
    {
    }

    ///<summary>Represents a 'labeled' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LabeledEventEntity
    {
    }

    ///<summary>Represents a given language found in repositories.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LanguageEntity
    {
    }

    ///<summary>A repository's open source license</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LicenseEntity
    {
    }

    ///<summary>Represents a 'locked' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class LockedEventEntity
    {
    }

    ///<summary>A placeholder user for attribution of imported data on GitHub.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MannequinEntity
    {
    }

    ///<summary>Represents a 'marked_as_duplicate' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MarkedAsDuplicateEventEntity
    {
    }

    ///<summary>A public description of a Marketplace category.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MarketplaceCategoryEntity
    {
    }

    ///<summary>A listing in the GitHub integration marketplace.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MarketplaceListingEntity
    {
    }

    ///<summary>Audit log entry for a members_can_delete_repos.clear event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MembersCanDeleteReposClearAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a members_can_delete_repos.disable event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MembersCanDeleteReposDisableAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a members_can_delete_repos.enable event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MembersCanDeleteReposEnableAuditEntryEntity
    {
    }

    ///<summary>Represents a 'mentioned' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MentionedEventEntity
    {
    }

    ///<summary>Represents a 'merged' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MergedEventEntity
    {
    }

    ///<summary>Represents a Milestone object on a given repository.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MilestoneEntity
    {
    }

    ///<summary>Represents a 'milestoned' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MilestonedEventEntity
    {
    }

    ///<summary>Represents a 'moved_columns_in_project' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class MovedColumnsInProjectEventEntity
    {
    }

    ///<summary>An OIDC identity provider configured to provision identities for an enterprise.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OIDCProviderEntity
    {
    }

    ///<summary>Audit log entry for a oauth_application.create event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OauthApplicationCreateAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.add_billing_manager</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgAddBillingManagerAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.add_member</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgAddMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.block_user</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgBlockUserAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.config.disable_collaborators_only event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgConfigDisableCollaboratorsOnlyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.config.enable_collaborators_only event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgConfigEnableCollaboratorsOnlyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.create event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgCreateAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.disable_oauth_app_restrictions event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgDisableOauthAppRestrictionsAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.disable_saml event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgDisableSamlAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.disable_two_factor_requirement event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgDisableTwoFactorRequirementAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.enable_oauth_app_restrictions event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgEnableOauthAppRestrictionsAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.enable_saml event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgEnableSamlAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.enable_two_factor_requirement event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgEnableTwoFactorRequirementAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.invite_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgInviteMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.invite_to_business event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgInviteToBusinessAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.oauth_app_access_approved event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgOauthAppAccessApprovedAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.oauth_app_access_denied event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgOauthAppAccessDeniedAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.oauth_app_access_requested event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgOauthAppAccessRequestedAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.remove_billing_manager event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgRemoveBillingManagerAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.remove_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgRemoveMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.remove_outside_collaborator event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgRemoveOutsideCollaboratorAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.restore_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgRestoreMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.unblock_user</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgUnblockUserAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.update_default_repository_permission</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgUpdateDefaultRepositoryPermissionAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.update_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgUpdateMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.update_member_repository_creation_permission event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a org.update_member_repository_invitation_permission event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity
    {
    }

    ///<summary>An account on GitHub, with one or more owners, that has repositories, members and teams.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrganizationEntity
    {
        public OrganizationEntity(global::System.String login = default !, global::System.String id = default !, global::System.String? name = default !)
        {
            Login = login;
            Id = id;
            Name = name;
        }

        ///<summary>The organization's login name.</summary>
        public global::System.String Login { get; }

        public global::System.String Id { get; }

        ///<summary>The organization's public profile name.</summary>
        public global::System.String? Name { get; }
    }

    ///<summary>An Identity Provider configured to provision SAML and SCIM identities for Organizations</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrganizationIdentityProviderEntity
    {
    }

    ///<summary>An Invitation for a user to an organization.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class OrganizationInvitationEntity
    {
    }

    ///<summary>Information for an uploaded package.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PackageEntity
    {
    }

    ///<summary>A file in a package version.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PackageFileEntity
    {
    }

    ///<summary>A version tag contains the mapping between a tag name and a version.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PackageTagEntity
    {
    }

    ///<summary>Information about a specific package version.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PackageVersionEntity
    {
    }

    ///<summary>A Pinned Discussion is a discussion pinned to a repository's index page.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PinnedDiscussionEntity
    {
    }

    ///<summary>Represents a 'pinned' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PinnedEventEntity
    {
    }

    ///<summary>A Pinned Issue is a issue pinned to a repository's index page.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PinnedIssueEntity
    {
    }

    ///<summary>Audit log entry for a private_repository_forking.disable event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PrivateRepositoryForkingDisableAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a private_repository_forking.enable event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PrivateRepositoryForkingEnableAuditEntryEntity
    {
    }

    ///<summary>Projects manage issues, pull requests and notes within a project owner.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProjectEntity
    {
    }

    ///<summary>A card in a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProjectCardEntity
    {
    }

    ///<summary>A column inside a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProjectColumnEntity
    {
    }

    ///<summary>New projects that manage issues, pull requests and drafts using tables and boards.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProjectNextEntity
    {
    }

    ///<summary>An item within a new Project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProjectNextItemEntity
    {
    }

    ///<summary>An value of a field in an item of a new Project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ProjectNextItemFieldValueEntity
    {
    }

    ///<summary>A user's public key.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PublicKeyEntity
    {
    }

    ///<summary>A repository pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PullRequestEntity
    {
    }

    ///<summary>Represents a Git commit part of a pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PullRequestCommitEntity
    {
    }

    ///<summary>Represents a commit comment thread part of a pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PullRequestCommitCommentThreadEntity
    {
    }

    ///<summary>A review object for a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PullRequestReviewEntity
    {
    }

    ///<summary>A review comment associated with a given repository pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PullRequestReviewCommentEntity
    {
    }

    ///<summary>A threaded list of comments for a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PullRequestReviewThreadEntity
    {
    }

    ///<summary>A Git push.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PushEntity
    {
    }

    ///<summary>A team, user or app who has the ability to push to a protected branch.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class PushAllowanceEntity
    {
    }

    ///<summary>An emoji reaction to a particular piece of content.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReactionEntity
    {
    }

    ///<summary>Represents a 'ready_for_review' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReadyForReviewEventEntity
    {
    }

    ///<summary>Represents a Git reference.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RefEntity
    {
    }

    ///<summary>Represents a 'referenced' event on a given `ReferencedSubject`.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReferencedEventEntity
    {
    }

    ///<summary>A release contains the content for a release.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReleaseEntity
    {
    }

    ///<summary>A release asset contains the content for a release asset.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReleaseAssetEntity
    {
    }

    ///<summary>Represents a 'removed_from_project' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RemovedFromProjectEventEntity
    {
    }

    ///<summary>Represents a 'renamed' event on a given issue or pull request</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RenamedTitleEventEntity
    {
    }

    ///<summary>Represents a 'reopened' event on any `Closable`.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReopenedEventEntity
    {
    }

    ///<summary>Audit log entry for a repo.access event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoAccessAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.add_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoAddMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.add_topic event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoAddTopicAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.archived event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoArchivedAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.change_merge_setting event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoChangeMergeSettingAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.disable_anonymous_git_access event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigDisableAnonymousGitAccessAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.disable_collaborators_only event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigDisableCollaboratorsOnlyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.disable_contributors_only event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigDisableContributorsOnlyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.disable_sockpuppet_disallowed event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigDisableSockpuppetDisallowedAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.enable_anonymous_git_access event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigEnableAnonymousGitAccessAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.enable_collaborators_only event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigEnableCollaboratorsOnlyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.enable_contributors_only event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigEnableContributorsOnlyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.enable_sockpuppet_disallowed event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigEnableSockpuppetDisallowedAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.lock_anonymous_git_access event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigLockAnonymousGitAccessAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.config.unlock_anonymous_git_access event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoConfigUnlockAnonymousGitAccessAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.create event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoCreateAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.destroy event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoDestroyAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.remove_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoRemoveMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repo.remove_topic event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepoRemoveTopicAuditEntryEntity
    {
    }

    ///<summary>A repository contains the content for a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryEntity
    {
    }

    ///<summary>An invitation for a user to be added to a repository.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryInvitationEntity
    {
    }

    ///<summary>An Octoshift repository migration.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryMigrationEntity
    {
        public RepositoryMigrationEntity(global::System.String id = default !, global::System.Uri sourceUrl = default !, global::StrawberryShake.EntityId migrationSource = default !, global::OctoshiftCLI.GraphQL.MigrationState state = default !, global::System.String? failureReason = default !)
        {
            Id = id;
            SourceUrl = sourceUrl;
            MigrationSource = migrationSource;
            State = state;
            FailureReason = failureReason;
        }

        public global::System.String Id { get; }

        ///<summary>The Octoshift migration source URL.</summary>
        public global::System.Uri SourceUrl { get; }

        ///<summary>The Octoshift migration source.</summary>
        public global::StrawberryShake.EntityId MigrationSource { get; }

        ///<summary>The Octoshift migration state.</summary>
        public global::OctoshiftCLI.GraphQL.MigrationState State { get; }

        ///<summary>The reason the migration failed.</summary>
        public global::System.String? FailureReason { get; }
    }

    ///<summary>A repository-topic connects a repository to a topic.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryTopicEntity
    {
    }

    ///<summary>Audit log entry for a repository_visibility_change.disable event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryVisibilityChangeDisableAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a repository_visibility_change.enable event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryVisibilityChangeEnableAuditEntryEntity
    {
    }

    ///<summary>A Dependabot alert for a repository with a dependency affected by a security vulnerability.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RepositoryVulnerabilityAlertEntity
    {
    }

    ///<summary>A team or user who has the ability to dismiss a review on a protected branch.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReviewDismissalAllowanceEntity
    {
    }

    ///<summary>Represents a 'review_dismissed' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReviewDismissedEventEntity
    {
    }

    ///<summary>A request for a user to review a pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReviewRequestEntity
    {
    }

    ///<summary>Represents an 'review_request_removed' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReviewRequestRemovedEventEntity
    {
    }

    ///<summary>Represents an 'review_requested' event on a given pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class ReviewRequestedEventEntity
    {
    }

    ///<summary>A Saved Reply is text a user can use to reply quickly.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SavedReplyEntity
    {
    }

    ///<summary>A GitHub Security Advisory</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SecurityAdvisoryEntity
    {
    }

    ///<summary>An event related to sponsorship activity.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SponsorsActivityEntity
    {
    }

    ///<summary>A GitHub Sponsors listing.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SponsorsListingEntity
    {
    }

    ///<summary>A GitHub Sponsors tier associated with a GitHub Sponsors listing.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SponsorsTierEntity
    {
    }

    ///<summary>A sponsorship relationship between a sponsor and a maintainer</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SponsorshipEntity
    {
    }

    ///<summary>An update sent to sponsors of a user or organization on GitHub Sponsors.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SponsorshipNewsletterEntity
    {
    }

    ///<summary>Represents a commit status.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StatusEntity
    {
    }

    ///<summary>Represents the rollup for both the check runs and status for a commit.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StatusCheckRollupEntity
    {
    }

    ///<summary>Represents an individual commit status context</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StatusContextEntity
    {
    }

    ///<summary>Represents a 'subscribed' event on a given `Subscribable`.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class SubscribedEventEntity
    {
    }

    ///<summary>Represents a Git tag.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TagEntity
    {
    }

    ///<summary>A team of users in an organization.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamEntity
    {
    }

    ///<summary>Audit log entry for a team.add_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamAddMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a team.add_repository event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamAddRepositoryAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a team.change_parent_team event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamChangeParentTeamAuditEntryEntity
    {
    }

    ///<summary>A team discussion.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamDiscussionEntity
    {
    }

    ///<summary>A comment on a team discussion.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamDiscussionCommentEntity
    {
    }

    ///<summary>Audit log entry for a team.remove_member event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamRemoveMemberAuditEntryEntity
    {
    }

    ///<summary>Audit log entry for a team.remove_repository event.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TeamRemoveRepositoryAuditEntryEntity
    {
    }

    ///<summary>A topic aggregates entities that are related to a subject.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TopicEntity
    {
    }

    ///<summary>Represents a 'transferred' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TransferredEventEntity
    {
    }

    ///<summary>Represents a Git tree.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class TreeEntity
    {
    }

    ///<summary>Represents an 'unassigned' event on any assignable object.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UnassignedEventEntity
    {
    }

    ///<summary>Represents an 'unlabeled' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UnlabeledEventEntity
    {
    }

    ///<summary>Represents an 'unlocked' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UnlockedEventEntity
    {
    }

    ///<summary>Represents an 'unmarked_as_duplicate' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UnmarkedAsDuplicateEventEntity
    {
    }

    ///<summary>Represents an 'unpinned' event on a given issue or pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UnpinnedEventEntity
    {
    }

    ///<summary>Represents an 'unsubscribed' event on a given `Subscribable`.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UnsubscribedEventEntity
    {
    }

    ///<summary>A user is an individual's account on GitHub that owns repositories and can make new content.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UserEntity
    {
    }

    ///<summary>Represents a 'user_blocked' event on a given user.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UserBlockedEventEntity
    {
    }

    ///<summary>An edit on user content</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UserContentEditEntity
    {
    }

    ///<summary>The user's description of what they're currently doing.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class UserStatusEntity
    {
    }

    ///<summary>A domain that can be verified or approved for an organization or an enterprise.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class VerifiableDomainEntity
    {
    }

    ///<summary>A workflow contains meta information about an Actions workflow file.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class WorkflowEntity
    {
    }

    ///<summary>A workflow run.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class WorkflowRunEntity
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourceResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.CreateMigrationSourceResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource> _createMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper;
        public CreateMigrationSourceResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource> createMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper = createMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult);
        public CreateMigrationSourceResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateMigrationSourceResultInfo info)
            {
                return new CreateMigrationSourceResult(MapICreateMigrationSource_CreateMigrationSource(info.CreateMigrationSource, snapshot));
            }

            throw new global::System.ArgumentException("CreateMigrationSourceResultInfo expected.");
        }

        private global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource? MapICreateMigrationSource_CreateMigrationSource(global::OctoshiftCLI.GraphQL.State.CreateMigrationSourcePayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            ICreateMigrationSource_CreateMigrationSource returnValue = default !;
            if (data?.__typename.Equals("CreateMigrationSourcePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new CreateMigrationSource_CreateMigrationSource_CreateMigrationSourcePayload(MapICreateMigrationSource_CreateMigrationSource_MigrationSource(data.MigrationSource, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::OctoshiftCLI.GraphQL.ICreateMigrationSource_CreateMigrationSource_MigrationSource? MapICreateMigrationSource_CreateMigrationSource_MigrationSource(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                return _createMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourceResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateMigrationSourceResultInfo(global::OctoshiftCLI.GraphQL.State.CreateMigrationSourcePayloadData? createMigrationSource, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateMigrationSource = createMigrationSource;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Creates an Octoshift migration source.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.State.CreateMigrationSourcePayloadData? CreateMigrationSource { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateMigrationSourceResultInfo(CreateMigrationSource, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource Map(global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateMigrationSource_CreateMigrationSource_MigrationSource_MigrationSource(entity.Id, entity.Name, entity.Url, entity.Type);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigrationResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.GetMigrationResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity, GetMigration_Node_AddedToProjectEvent> _getMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AppEntity, GetMigration_Node_App> _getMigration_Node_AppFromAppEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AssignedEventEntity, GetMigration_Node_AssignedEvent> _getMigration_Node_AssignedEventFromAssignedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity, GetMigration_Node_AutoMergeDisabledEvent> _getMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity, GetMigration_Node_AutoMergeEnabledEvent> _getMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity, GetMigration_Node_AutoRebaseEnabledEvent> _getMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity, GetMigration_Node_AutoSquashEnabledEvent> _getMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity, GetMigration_Node_AutomaticBaseChangeFailedEvent> _getMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity, GetMigration_Node_AutomaticBaseChangeSucceededEvent> _getMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity, GetMigration_Node_BaseRefChangedEvent> _getMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity, GetMigration_Node_BaseRefDeletedEvent> _getMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity, GetMigration_Node_BaseRefForcePushedEvent> _getMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BlobEntity, GetMigration_Node_Blob> _getMigration_Node_BlobFromBlobEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BotEntity, GetMigration_Node_Bot> _getMigration_Node_BotFromBotEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity, GetMigration_Node_BranchProtectionRule> _getMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity, GetMigration_Node_BypassForcePushAllowance> _getMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity, GetMigration_Node_BypassPullRequestAllowance> _getMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CWEEntity, GetMigration_Node_CWE> _getMigration_Node_CWEFromCWEEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckRunEntity, GetMigration_Node_CheckRun> _getMigration_Node_CheckRunFromCheckRunEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity, GetMigration_Node_CheckSuite> _getMigration_Node_CheckSuiteFromCheckSuiteEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ClosedEventEntity, GetMigration_Node_ClosedEvent> _getMigration_Node_ClosedEventFromClosedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity, GetMigration_Node_CodeOfConduct> _getMigration_Node_CodeOfConductFromCodeOfConductEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity, GetMigration_Node_CommentDeletedEvent> _getMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitEntity, GetMigration_Node_Commit> _getMigration_Node_CommitFromCommitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentEntity, GetMigration_Node_CommitComment> _getMigration_Node_CommitCommentFromCommitCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity, GetMigration_Node_CommitCommentThread> _getMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity, GetMigration_Node_ConnectedEvent> _getMigration_Node_ConnectedEventFromConnectedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity, GetMigration_Node_ConvertToDraftEvent> _getMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity, GetMigration_Node_ConvertedNoteToIssueEvent> _getMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity, GetMigration_Node_ConvertedToDiscussionEvent> _getMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity, GetMigration_Node_CrossReferencedEvent> _getMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity, GetMigration_Node_DemilestonedEvent> _getMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployKeyEntity, GetMigration_Node_DeployKey> _getMigration_Node_DeployKeyFromDeployKeyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployedEventEntity, GetMigration_Node_DeployedEvent> _getMigration_Node_DeployedEventFromDeployedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEntity, GetMigration_Node_Deployment> _getMigration_Node_DeploymentFromDeploymentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity, GetMigration_Node_DeploymentEnvironmentChangedEvent> _getMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity, GetMigration_Node_DeploymentReview> _getMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity, GetMigration_Node_DeploymentStatus> _getMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity, GetMigration_Node_DisconnectedEvent> _getMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionEntity, GetMigration_Node_Discussion> _getMigration_Node_DiscussionFromDiscussionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity, GetMigration_Node_DiscussionCategory> _getMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity, GetMigration_Node_DiscussionComment> _getMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseEntity, GetMigration_Node_Enterprise> _getMigration_Node_EnterpriseFromEnterpriseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity, GetMigration_Node_EnterpriseAdministratorInvitation> _getMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity, GetMigration_Node_EnterpriseIdentityProvider> _getMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity, GetMigration_Node_EnterpriseRepositoryInfo> _getMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity, GetMigration_Node_EnterpriseServerInstallation> _getMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity, GetMigration_Node_EnterpriseServerUserAccount> _getMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity, GetMigration_Node_EnterpriseServerUserAccountEmail> _getMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity, GetMigration_Node_EnterpriseServerUserAccountsUpload> _getMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity, GetMigration_Node_EnterpriseUserAccount> _getMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnvironmentEntity, GetMigration_Node_Environment> _getMigration_Node_EnvironmentFromEnvironmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity, GetMigration_Node_ExternalIdentity> _getMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistEntity, GetMigration_Node_Gist> _getMigration_Node_GistFromGistEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistCommentEntity, GetMigration_Node_GistComment> _getMigration_Node_GistCommentFromGistCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity, GetMigration_Node_HeadRefDeletedEvent> _getMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity, GetMigration_Node_HeadRefForcePushedEvent> _getMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity, GetMigration_Node_HeadRefRestoredEvent> _getMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ImportEntity, GetMigration_Node_Import> _getMigration_Node_ImportFromImportEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity, GetMigration_Node_IpAllowListEntry> _getMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueEntity, GetMigration_Node_Issue> _getMigration_Node_IssueFromIssueEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueCommentEntity, GetMigration_Node_IssueComment> _getMigration_Node_IssueCommentFromIssueCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabelEntity, GetMigration_Node_Label> _getMigration_Node_LabelFromLabelEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabeledEventEntity, GetMigration_Node_LabeledEvent> _getMigration_Node_LabeledEventFromLabeledEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LanguageEntity, GetMigration_Node_Language> _getMigration_Node_LanguageFromLanguageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LicenseEntity, GetMigration_Node_License> _getMigration_Node_LicenseFromLicenseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LockedEventEntity, GetMigration_Node_LockedEvent> _getMigration_Node_LockedEventFromLockedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MannequinEntity, GetMigration_Node_Mannequin> _getMigration_Node_MannequinFromMannequinEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity, GetMigration_Node_MarkedAsDuplicateEvent> _getMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity, GetMigration_Node_MarketplaceCategory> _getMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity, GetMigration_Node_MarketplaceListing> _getMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposClearAuditEntry> _getMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposDisableAuditEntry> _getMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposEnableAuditEntry> _getMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MentionedEventEntity, GetMigration_Node_MentionedEvent> _getMigration_Node_MentionedEventFromMentionedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MergedEventEntity, GetMigration_Node_MergedEvent> _getMigration_Node_MergedEventFromMergedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, GetMigration_Node_MigrationSource> _getMigration_Node_MigrationSourceFromMigrationSourceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestoneEntity, GetMigration_Node_Milestone> _getMigration_Node_MilestoneFromMilestoneEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity, GetMigration_Node_MilestonedEvent> _getMigration_Node_MilestonedEventFromMilestonedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity, GetMigration_Node_MovedColumnsInProjectEvent> _getMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity, GetMigration_Node_OIDCProvider> _getMigration_Node_OIDCProviderFromOIDCProviderEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity, GetMigration_Node_OauthApplicationCreateAuditEntry> _getMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity, GetMigration_Node_OrgAddBillingManagerAuditEntry> _getMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity, GetMigration_Node_OrgAddMemberAuditEntry> _getMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity, GetMigration_Node_OrgBlockUserAuditEntry> _getMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry> _getMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry> _getMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity, GetMigration_Node_OrgCreateAuditEntry> _getMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity, GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry> _getMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity, GetMigration_Node_OrgDisableSamlAuditEntry> _getMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity, GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry> _getMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity, GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry> _getMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity, GetMigration_Node_OrgEnableSamlAuditEntry> _getMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity, GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry> _getMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity, GetMigration_Node_OrgInviteMemberAuditEntry> _getMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity, GetMigration_Node_OrgInviteToBusinessAuditEntry> _getMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry> _getMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry> _getMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry> _getMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity, GetMigration_Node_OrgRemoveBillingManagerAuditEntry> _getMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity, GetMigration_Node_OrgRemoveMemberAuditEntry> _getMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity, GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry> _getMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity, GetMigration_Node_OrgRestoreMemberAuditEntry> _getMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity, GetMigration_Node_OrgUnblockUserAuditEntry> _getMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry> _getMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity, GetMigration_Node_OrgUpdateMemberAuditEntry> _getMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry> _getMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry> _getMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, GetMigration_Node_Organization> _getMigration_Node_OrganizationFromOrganizationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity, GetMigration_Node_OrganizationIdentityProvider> _getMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity, GetMigration_Node_OrganizationInvitation> _getMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageEntity, GetMigration_Node_Package> _getMigration_Node_PackageFromPackageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageFileEntity, GetMigration_Node_PackageFile> _getMigration_Node_PackageFileFromPackageFileEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageTagEntity, GetMigration_Node_PackageTag> _getMigration_Node_PackageTagFromPackageTagEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageVersionEntity, GetMigration_Node_PackageVersion> _getMigration_Node_PackageVersionFromPackageVersionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity, GetMigration_Node_PinnedDiscussion> _getMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedEventEntity, GetMigration_Node_PinnedEvent> _getMigration_Node_PinnedEventFromPinnedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity, GetMigration_Node_PinnedIssue> _getMigration_Node_PinnedIssueFromPinnedIssueEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity, GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry> _getMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity, GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry> _getMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectEntity, GetMigration_Node_Project> _getMigration_Node_ProjectFromProjectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectCardEntity, GetMigration_Node_ProjectCard> _getMigration_Node_ProjectCardFromProjectCardEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity, GetMigration_Node_ProjectColumn> _getMigration_Node_ProjectColumnFromProjectColumnEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextEntity, GetMigration_Node_ProjectNext> _getMigration_Node_ProjectNextFromProjectNextEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity, GetMigration_Node_ProjectNextItem> _getMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity, GetMigration_Node_ProjectNextItemFieldValue> _getMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PublicKeyEntity, GetMigration_Node_PublicKey> _getMigration_Node_PublicKeyFromPublicKeyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestEntity, GetMigration_Node_PullRequest> _getMigration_Node_PullRequestFromPullRequestEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity, GetMigration_Node_PullRequestCommit> _getMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity, GetMigration_Node_PullRequestCommitCommentThread> _getMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity, GetMigration_Node_PullRequestReview> _getMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity, GetMigration_Node_PullRequestReviewComment> _getMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity, GetMigration_Node_PullRequestReviewThread> _getMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushEntity, GetMigration_Node_Push> _getMigration_Node_PushFromPushEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity, GetMigration_Node_PushAllowance> _getMigration_Node_PushAllowanceFromPushAllowanceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReactionEntity, GetMigration_Node_Reaction> _getMigration_Node_ReactionFromReactionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity, GetMigration_Node_ReadyForReviewEvent> _getMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RefEntity, GetMigration_Node_Ref> _getMigration_Node_RefFromRefEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity, GetMigration_Node_ReferencedEvent> _getMigration_Node_ReferencedEventFromReferencedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseEntity, GetMigration_Node_Release> _getMigration_Node_ReleaseFromReleaseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity, GetMigration_Node_ReleaseAsset> _getMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity, GetMigration_Node_RemovedFromProjectEvent> _getMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity, GetMigration_Node_RenamedTitleEvent> _getMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity, GetMigration_Node_ReopenedEvent> _getMigration_Node_ReopenedEventFromReopenedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity, GetMigration_Node_RepoAccessAuditEntry> _getMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity, GetMigration_Node_RepoAddMemberAuditEntry> _getMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity, GetMigration_Node_RepoAddTopicAuditEntry> _getMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity, GetMigration_Node_RepoArchivedAuditEntry> _getMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity, GetMigration_Node_RepoChangeMergeSettingAuditEntry> _getMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry> _getMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry> _getMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry> _getMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity, GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry> _getMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry> _getMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry> _getMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry> _getMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity, GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry> _getMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry> _getMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry> _getMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity, GetMigration_Node_RepoCreateAuditEntry> _getMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity, GetMigration_Node_RepoDestroyAuditEntry> _getMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity, GetMigration_Node_RepoRemoveMemberAuditEntry> _getMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity, GetMigration_Node_RepoRemoveTopicAuditEntry> _getMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryEntity, GetMigration_Node_Repository> _getMigration_Node_RepositoryFromRepositoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity, GetMigration_Node_RepositoryInvitation> _getMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, GetMigration_Node_RepositoryMigration> _getMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity, GetMigration_Node_RepositoryTopic> _getMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity, GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry> _getMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity, GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry> _getMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity, GetMigration_Node_RepositoryVulnerabilityAlert> _getMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity, GetMigration_Node_ReviewDismissalAllowance> _getMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity, GetMigration_Node_ReviewDismissedEvent> _getMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity, GetMigration_Node_ReviewRequest> _getMigration_Node_ReviewRequestFromReviewRequestEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity, GetMigration_Node_ReviewRequestRemovedEvent> _getMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity, GetMigration_Node_ReviewRequestedEvent> _getMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SavedReplyEntity, GetMigration_Node_SavedReply> _getMigration_Node_SavedReplyFromSavedReplyEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity, GetMigration_Node_SecurityAdvisory> _getMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity, GetMigration_Node_SponsorsActivity> _getMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity, GetMigration_Node_SponsorsListing> _getMigration_Node_SponsorsListingFromSponsorsListingEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity, GetMigration_Node_SponsorsTier> _getMigration_Node_SponsorsTierFromSponsorsTierEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipEntity, GetMigration_Node_Sponsorship> _getMigration_Node_SponsorshipFromSponsorshipEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity, GetMigration_Node_SponsorshipNewsletter> _getMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusEntity, GetMigration_Node_Status> _getMigration_Node_StatusFromStatusEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity, GetMigration_Node_StatusCheckRollup> _getMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusContextEntity, GetMigration_Node_StatusContext> _getMigration_Node_StatusContextFromStatusContextEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity, GetMigration_Node_SubscribedEvent> _getMigration_Node_SubscribedEventFromSubscribedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TagEntity, GetMigration_Node_Tag> _getMigration_Node_TagFromTagEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamEntity, GetMigration_Node_Team> _getMigration_Node_TeamFromTeamEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity, GetMigration_Node_TeamAddMemberAuditEntry> _getMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity, GetMigration_Node_TeamAddRepositoryAuditEntry> _getMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity, GetMigration_Node_TeamChangeParentTeamAuditEntry> _getMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity, GetMigration_Node_TeamDiscussion> _getMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity, GetMigration_Node_TeamDiscussionComment> _getMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity, GetMigration_Node_TeamRemoveMemberAuditEntry> _getMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity, GetMigration_Node_TeamRemoveRepositoryAuditEntry> _getMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TopicEntity, GetMigration_Node_Topic> _getMigration_Node_TopicFromTopicEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TransferredEventEntity, GetMigration_Node_TransferredEvent> _getMigration_Node_TransferredEventFromTransferredEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TreeEntity, GetMigration_Node_Tree> _getMigration_Node_TreeFromTreeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity, GetMigration_Node_UnassignedEvent> _getMigration_Node_UnassignedEventFromUnassignedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity, GetMigration_Node_UnlabeledEvent> _getMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity, GetMigration_Node_UnlockedEvent> _getMigration_Node_UnlockedEventFromUnlockedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity, GetMigration_Node_UnmarkedAsDuplicateEvent> _getMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity, GetMigration_Node_UnpinnedEvent> _getMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity, GetMigration_Node_UnsubscribedEvent> _getMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserEntity, GetMigration_Node_User> _getMigration_Node_UserFromUserEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity, GetMigration_Node_UserBlockedEvent> _getMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserContentEditEntity, GetMigration_Node_UserContentEdit> _getMigration_Node_UserContentEditFromUserContentEditEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserStatusEntity, GetMigration_Node_UserStatus> _getMigration_Node_UserStatusFromUserStatusEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity, GetMigration_Node_VerifiableDomain> _getMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowEntity, GetMigration_Node_Workflow> _getMigration_Node_WorkflowFromWorkflowEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity, GetMigration_Node_WorkflowRun> _getMigration_Node_WorkflowRunFromWorkflowRunEntityMapper;
        public GetMigrationResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity, GetMigration_Node_AddedToProjectEvent> getMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AppEntity, GetMigration_Node_App> getMigration_Node_AppFromAppEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AssignedEventEntity, GetMigration_Node_AssignedEvent> getMigration_Node_AssignedEventFromAssignedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity, GetMigration_Node_AutoMergeDisabledEvent> getMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity, GetMigration_Node_AutoMergeEnabledEvent> getMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity, GetMigration_Node_AutoRebaseEnabledEvent> getMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity, GetMigration_Node_AutoSquashEnabledEvent> getMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity, GetMigration_Node_AutomaticBaseChangeFailedEvent> getMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity, GetMigration_Node_AutomaticBaseChangeSucceededEvent> getMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity, GetMigration_Node_BaseRefChangedEvent> getMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity, GetMigration_Node_BaseRefDeletedEvent> getMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity, GetMigration_Node_BaseRefForcePushedEvent> getMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BlobEntity, GetMigration_Node_Blob> getMigration_Node_BlobFromBlobEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BotEntity, GetMigration_Node_Bot> getMigration_Node_BotFromBotEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity, GetMigration_Node_BranchProtectionRule> getMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity, GetMigration_Node_BypassForcePushAllowance> getMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity, GetMigration_Node_BypassPullRequestAllowance> getMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CWEEntity, GetMigration_Node_CWE> getMigration_Node_CWEFromCWEEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckRunEntity, GetMigration_Node_CheckRun> getMigration_Node_CheckRunFromCheckRunEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity, GetMigration_Node_CheckSuite> getMigration_Node_CheckSuiteFromCheckSuiteEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ClosedEventEntity, GetMigration_Node_ClosedEvent> getMigration_Node_ClosedEventFromClosedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity, GetMigration_Node_CodeOfConduct> getMigration_Node_CodeOfConductFromCodeOfConductEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity, GetMigration_Node_CommentDeletedEvent> getMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitEntity, GetMigration_Node_Commit> getMigration_Node_CommitFromCommitEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentEntity, GetMigration_Node_CommitComment> getMigration_Node_CommitCommentFromCommitCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity, GetMigration_Node_CommitCommentThread> getMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity, GetMigration_Node_ConnectedEvent> getMigration_Node_ConnectedEventFromConnectedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity, GetMigration_Node_ConvertToDraftEvent> getMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity, GetMigration_Node_ConvertedNoteToIssueEvent> getMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity, GetMigration_Node_ConvertedToDiscussionEvent> getMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity, GetMigration_Node_CrossReferencedEvent> getMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity, GetMigration_Node_DemilestonedEvent> getMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployKeyEntity, GetMigration_Node_DeployKey> getMigration_Node_DeployKeyFromDeployKeyEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployedEventEntity, GetMigration_Node_DeployedEvent> getMigration_Node_DeployedEventFromDeployedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEntity, GetMigration_Node_Deployment> getMigration_Node_DeploymentFromDeploymentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity, GetMigration_Node_DeploymentEnvironmentChangedEvent> getMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity, GetMigration_Node_DeploymentReview> getMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity, GetMigration_Node_DeploymentStatus> getMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity, GetMigration_Node_DisconnectedEvent> getMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionEntity, GetMigration_Node_Discussion> getMigration_Node_DiscussionFromDiscussionEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity, GetMigration_Node_DiscussionCategory> getMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity, GetMigration_Node_DiscussionComment> getMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseEntity, GetMigration_Node_Enterprise> getMigration_Node_EnterpriseFromEnterpriseEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity, GetMigration_Node_EnterpriseAdministratorInvitation> getMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity, GetMigration_Node_EnterpriseIdentityProvider> getMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity, GetMigration_Node_EnterpriseRepositoryInfo> getMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity, GetMigration_Node_EnterpriseServerInstallation> getMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity, GetMigration_Node_EnterpriseServerUserAccount> getMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity, GetMigration_Node_EnterpriseServerUserAccountEmail> getMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity, GetMigration_Node_EnterpriseServerUserAccountsUpload> getMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity, GetMigration_Node_EnterpriseUserAccount> getMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnvironmentEntity, GetMigration_Node_Environment> getMigration_Node_EnvironmentFromEnvironmentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity, GetMigration_Node_ExternalIdentity> getMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistEntity, GetMigration_Node_Gist> getMigration_Node_GistFromGistEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistCommentEntity, GetMigration_Node_GistComment> getMigration_Node_GistCommentFromGistCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity, GetMigration_Node_HeadRefDeletedEvent> getMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity, GetMigration_Node_HeadRefForcePushedEvent> getMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity, GetMigration_Node_HeadRefRestoredEvent> getMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ImportEntity, GetMigration_Node_Import> getMigration_Node_ImportFromImportEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity, GetMigration_Node_IpAllowListEntry> getMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueEntity, GetMigration_Node_Issue> getMigration_Node_IssueFromIssueEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueCommentEntity, GetMigration_Node_IssueComment> getMigration_Node_IssueCommentFromIssueCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabelEntity, GetMigration_Node_Label> getMigration_Node_LabelFromLabelEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabeledEventEntity, GetMigration_Node_LabeledEvent> getMigration_Node_LabeledEventFromLabeledEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LanguageEntity, GetMigration_Node_Language> getMigration_Node_LanguageFromLanguageEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LicenseEntity, GetMigration_Node_License> getMigration_Node_LicenseFromLicenseEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LockedEventEntity, GetMigration_Node_LockedEvent> getMigration_Node_LockedEventFromLockedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MannequinEntity, GetMigration_Node_Mannequin> getMigration_Node_MannequinFromMannequinEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity, GetMigration_Node_MarkedAsDuplicateEvent> getMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity, GetMigration_Node_MarketplaceCategory> getMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity, GetMigration_Node_MarketplaceListing> getMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposClearAuditEntry> getMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposDisableAuditEntry> getMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposEnableAuditEntry> getMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MentionedEventEntity, GetMigration_Node_MentionedEvent> getMigration_Node_MentionedEventFromMentionedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MergedEventEntity, GetMigration_Node_MergedEvent> getMigration_Node_MergedEventFromMergedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, GetMigration_Node_MigrationSource> getMigration_Node_MigrationSourceFromMigrationSourceEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestoneEntity, GetMigration_Node_Milestone> getMigration_Node_MilestoneFromMilestoneEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity, GetMigration_Node_MilestonedEvent> getMigration_Node_MilestonedEventFromMilestonedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity, GetMigration_Node_MovedColumnsInProjectEvent> getMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity, GetMigration_Node_OIDCProvider> getMigration_Node_OIDCProviderFromOIDCProviderEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity, GetMigration_Node_OauthApplicationCreateAuditEntry> getMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity, GetMigration_Node_OrgAddBillingManagerAuditEntry> getMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity, GetMigration_Node_OrgAddMemberAuditEntry> getMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity, GetMigration_Node_OrgBlockUserAuditEntry> getMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry> getMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry> getMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity, GetMigration_Node_OrgCreateAuditEntry> getMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity, GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry> getMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity, GetMigration_Node_OrgDisableSamlAuditEntry> getMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity, GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry> getMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity, GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry> getMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity, GetMigration_Node_OrgEnableSamlAuditEntry> getMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity, GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry> getMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity, GetMigration_Node_OrgInviteMemberAuditEntry> getMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity, GetMigration_Node_OrgInviteToBusinessAuditEntry> getMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry> getMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry> getMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry> getMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity, GetMigration_Node_OrgRemoveBillingManagerAuditEntry> getMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity, GetMigration_Node_OrgRemoveMemberAuditEntry> getMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity, GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry> getMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity, GetMigration_Node_OrgRestoreMemberAuditEntry> getMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity, GetMigration_Node_OrgUnblockUserAuditEntry> getMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry> getMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity, GetMigration_Node_OrgUpdateMemberAuditEntry> getMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry> getMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry> getMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, GetMigration_Node_Organization> getMigration_Node_OrganizationFromOrganizationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity, GetMigration_Node_OrganizationIdentityProvider> getMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity, GetMigration_Node_OrganizationInvitation> getMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageEntity, GetMigration_Node_Package> getMigration_Node_PackageFromPackageEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageFileEntity, GetMigration_Node_PackageFile> getMigration_Node_PackageFileFromPackageFileEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageTagEntity, GetMigration_Node_PackageTag> getMigration_Node_PackageTagFromPackageTagEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageVersionEntity, GetMigration_Node_PackageVersion> getMigration_Node_PackageVersionFromPackageVersionEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity, GetMigration_Node_PinnedDiscussion> getMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedEventEntity, GetMigration_Node_PinnedEvent> getMigration_Node_PinnedEventFromPinnedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity, GetMigration_Node_PinnedIssue> getMigration_Node_PinnedIssueFromPinnedIssueEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity, GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry> getMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity, GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry> getMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectEntity, GetMigration_Node_Project> getMigration_Node_ProjectFromProjectEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectCardEntity, GetMigration_Node_ProjectCard> getMigration_Node_ProjectCardFromProjectCardEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity, GetMigration_Node_ProjectColumn> getMigration_Node_ProjectColumnFromProjectColumnEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextEntity, GetMigration_Node_ProjectNext> getMigration_Node_ProjectNextFromProjectNextEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity, GetMigration_Node_ProjectNextItem> getMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity, GetMigration_Node_ProjectNextItemFieldValue> getMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PublicKeyEntity, GetMigration_Node_PublicKey> getMigration_Node_PublicKeyFromPublicKeyEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestEntity, GetMigration_Node_PullRequest> getMigration_Node_PullRequestFromPullRequestEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity, GetMigration_Node_PullRequestCommit> getMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity, GetMigration_Node_PullRequestCommitCommentThread> getMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity, GetMigration_Node_PullRequestReview> getMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity, GetMigration_Node_PullRequestReviewComment> getMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity, GetMigration_Node_PullRequestReviewThread> getMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushEntity, GetMigration_Node_Push> getMigration_Node_PushFromPushEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity, GetMigration_Node_PushAllowance> getMigration_Node_PushAllowanceFromPushAllowanceEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReactionEntity, GetMigration_Node_Reaction> getMigration_Node_ReactionFromReactionEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity, GetMigration_Node_ReadyForReviewEvent> getMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RefEntity, GetMigration_Node_Ref> getMigration_Node_RefFromRefEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity, GetMigration_Node_ReferencedEvent> getMigration_Node_ReferencedEventFromReferencedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseEntity, GetMigration_Node_Release> getMigration_Node_ReleaseFromReleaseEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity, GetMigration_Node_ReleaseAsset> getMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity, GetMigration_Node_RemovedFromProjectEvent> getMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity, GetMigration_Node_RenamedTitleEvent> getMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity, GetMigration_Node_ReopenedEvent> getMigration_Node_ReopenedEventFromReopenedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity, GetMigration_Node_RepoAccessAuditEntry> getMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity, GetMigration_Node_RepoAddMemberAuditEntry> getMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity, GetMigration_Node_RepoAddTopicAuditEntry> getMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity, GetMigration_Node_RepoArchivedAuditEntry> getMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity, GetMigration_Node_RepoChangeMergeSettingAuditEntry> getMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry> getMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry> getMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry> getMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity, GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry> getMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry> getMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry> getMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry> getMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity, GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry> getMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry> getMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry> getMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity, GetMigration_Node_RepoCreateAuditEntry> getMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity, GetMigration_Node_RepoDestroyAuditEntry> getMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity, GetMigration_Node_RepoRemoveMemberAuditEntry> getMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity, GetMigration_Node_RepoRemoveTopicAuditEntry> getMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryEntity, GetMigration_Node_Repository> getMigration_Node_RepositoryFromRepositoryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity, GetMigration_Node_RepositoryInvitation> getMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, GetMigration_Node_RepositoryMigration> getMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity, GetMigration_Node_RepositoryTopic> getMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity, GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry> getMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity, GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry> getMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity, GetMigration_Node_RepositoryVulnerabilityAlert> getMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity, GetMigration_Node_ReviewDismissalAllowance> getMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity, GetMigration_Node_ReviewDismissedEvent> getMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity, GetMigration_Node_ReviewRequest> getMigration_Node_ReviewRequestFromReviewRequestEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity, GetMigration_Node_ReviewRequestRemovedEvent> getMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity, GetMigration_Node_ReviewRequestedEvent> getMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SavedReplyEntity, GetMigration_Node_SavedReply> getMigration_Node_SavedReplyFromSavedReplyEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity, GetMigration_Node_SecurityAdvisory> getMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity, GetMigration_Node_SponsorsActivity> getMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity, GetMigration_Node_SponsorsListing> getMigration_Node_SponsorsListingFromSponsorsListingEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity, GetMigration_Node_SponsorsTier> getMigration_Node_SponsorsTierFromSponsorsTierEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipEntity, GetMigration_Node_Sponsorship> getMigration_Node_SponsorshipFromSponsorshipEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity, GetMigration_Node_SponsorshipNewsletter> getMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusEntity, GetMigration_Node_Status> getMigration_Node_StatusFromStatusEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity, GetMigration_Node_StatusCheckRollup> getMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusContextEntity, GetMigration_Node_StatusContext> getMigration_Node_StatusContextFromStatusContextEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity, GetMigration_Node_SubscribedEvent> getMigration_Node_SubscribedEventFromSubscribedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TagEntity, GetMigration_Node_Tag> getMigration_Node_TagFromTagEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamEntity, GetMigration_Node_Team> getMigration_Node_TeamFromTeamEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity, GetMigration_Node_TeamAddMemberAuditEntry> getMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity, GetMigration_Node_TeamAddRepositoryAuditEntry> getMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity, GetMigration_Node_TeamChangeParentTeamAuditEntry> getMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity, GetMigration_Node_TeamDiscussion> getMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity, GetMigration_Node_TeamDiscussionComment> getMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity, GetMigration_Node_TeamRemoveMemberAuditEntry> getMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity, GetMigration_Node_TeamRemoveRepositoryAuditEntry> getMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TopicEntity, GetMigration_Node_Topic> getMigration_Node_TopicFromTopicEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TransferredEventEntity, GetMigration_Node_TransferredEvent> getMigration_Node_TransferredEventFromTransferredEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TreeEntity, GetMigration_Node_Tree> getMigration_Node_TreeFromTreeEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity, GetMigration_Node_UnassignedEvent> getMigration_Node_UnassignedEventFromUnassignedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity, GetMigration_Node_UnlabeledEvent> getMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity, GetMigration_Node_UnlockedEvent> getMigration_Node_UnlockedEventFromUnlockedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity, GetMigration_Node_UnmarkedAsDuplicateEvent> getMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity, GetMigration_Node_UnpinnedEvent> getMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity, GetMigration_Node_UnsubscribedEvent> getMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserEntity, GetMigration_Node_User> getMigration_Node_UserFromUserEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity, GetMigration_Node_UserBlockedEvent> getMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserContentEditEntity, GetMigration_Node_UserContentEdit> getMigration_Node_UserContentEditFromUserContentEditEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserStatusEntity, GetMigration_Node_UserStatus> getMigration_Node_UserStatusFromUserStatusEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity, GetMigration_Node_VerifiableDomain> getMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowEntity, GetMigration_Node_Workflow> getMigration_Node_WorkflowFromWorkflowEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity, GetMigration_Node_WorkflowRun> getMigration_Node_WorkflowRunFromWorkflowRunEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper = getMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper));
            _getMigration_Node_AppFromAppEntityMapper = getMigration_Node_AppFromAppEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AppFromAppEntityMapper));
            _getMigration_Node_AssignedEventFromAssignedEventEntityMapper = getMigration_Node_AssignedEventFromAssignedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AssignedEventFromAssignedEventEntityMapper));
            _getMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper = getMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper));
            _getMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper = getMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper));
            _getMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper = getMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper));
            _getMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper = getMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper));
            _getMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper = getMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper));
            _getMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper = getMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper));
            _getMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper = getMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper));
            _getMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper = getMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper));
            _getMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper = getMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper));
            _getMigration_Node_BlobFromBlobEntityMapper = getMigration_Node_BlobFromBlobEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BlobFromBlobEntityMapper));
            _getMigration_Node_BotFromBotEntityMapper = getMigration_Node_BotFromBotEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BotFromBotEntityMapper));
            _getMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper = getMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper));
            _getMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper = getMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper));
            _getMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper = getMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper));
            _getMigration_Node_CWEFromCWEEntityMapper = getMigration_Node_CWEFromCWEEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CWEFromCWEEntityMapper));
            _getMigration_Node_CheckRunFromCheckRunEntityMapper = getMigration_Node_CheckRunFromCheckRunEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CheckRunFromCheckRunEntityMapper));
            _getMigration_Node_CheckSuiteFromCheckSuiteEntityMapper = getMigration_Node_CheckSuiteFromCheckSuiteEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CheckSuiteFromCheckSuiteEntityMapper));
            _getMigration_Node_ClosedEventFromClosedEventEntityMapper = getMigration_Node_ClosedEventFromClosedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ClosedEventFromClosedEventEntityMapper));
            _getMigration_Node_CodeOfConductFromCodeOfConductEntityMapper = getMigration_Node_CodeOfConductFromCodeOfConductEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CodeOfConductFromCodeOfConductEntityMapper));
            _getMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper = getMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper));
            _getMigration_Node_CommitFromCommitEntityMapper = getMigration_Node_CommitFromCommitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CommitFromCommitEntityMapper));
            _getMigration_Node_CommitCommentFromCommitCommentEntityMapper = getMigration_Node_CommitCommentFromCommitCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CommitCommentFromCommitCommentEntityMapper));
            _getMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper = getMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper));
            _getMigration_Node_ConnectedEventFromConnectedEventEntityMapper = getMigration_Node_ConnectedEventFromConnectedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ConnectedEventFromConnectedEventEntityMapper));
            _getMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper = getMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper));
            _getMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper = getMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper));
            _getMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper = getMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper));
            _getMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper = getMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper));
            _getMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper = getMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper));
            _getMigration_Node_DeployKeyFromDeployKeyEntityMapper = getMigration_Node_DeployKeyFromDeployKeyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DeployKeyFromDeployKeyEntityMapper));
            _getMigration_Node_DeployedEventFromDeployedEventEntityMapper = getMigration_Node_DeployedEventFromDeployedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DeployedEventFromDeployedEventEntityMapper));
            _getMigration_Node_DeploymentFromDeploymentEntityMapper = getMigration_Node_DeploymentFromDeploymentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DeploymentFromDeploymentEntityMapper));
            _getMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper = getMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper));
            _getMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper = getMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper));
            _getMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper = getMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper));
            _getMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper = getMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper));
            _getMigration_Node_DiscussionFromDiscussionEntityMapper = getMigration_Node_DiscussionFromDiscussionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DiscussionFromDiscussionEntityMapper));
            _getMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper = getMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper));
            _getMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper = getMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper));
            _getMigration_Node_EnterpriseFromEnterpriseEntityMapper = getMigration_Node_EnterpriseFromEnterpriseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseFromEnterpriseEntityMapper));
            _getMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper = getMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper));
            _getMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper = getMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper));
            _getMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper = getMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper));
            _getMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper = getMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper));
            _getMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper = getMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper));
            _getMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper = getMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper));
            _getMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper = getMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper));
            _getMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper = getMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper));
            _getMigration_Node_EnvironmentFromEnvironmentEntityMapper = getMigration_Node_EnvironmentFromEnvironmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_EnvironmentFromEnvironmentEntityMapper));
            _getMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper = getMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper));
            _getMigration_Node_GistFromGistEntityMapper = getMigration_Node_GistFromGistEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_GistFromGistEntityMapper));
            _getMigration_Node_GistCommentFromGistCommentEntityMapper = getMigration_Node_GistCommentFromGistCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_GistCommentFromGistCommentEntityMapper));
            _getMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper = getMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper));
            _getMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper = getMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper));
            _getMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper = getMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper));
            _getMigration_Node_ImportFromImportEntityMapper = getMigration_Node_ImportFromImportEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ImportFromImportEntityMapper));
            _getMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper = getMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper));
            _getMigration_Node_IssueFromIssueEntityMapper = getMigration_Node_IssueFromIssueEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_IssueFromIssueEntityMapper));
            _getMigration_Node_IssueCommentFromIssueCommentEntityMapper = getMigration_Node_IssueCommentFromIssueCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_IssueCommentFromIssueCommentEntityMapper));
            _getMigration_Node_LabelFromLabelEntityMapper = getMigration_Node_LabelFromLabelEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_LabelFromLabelEntityMapper));
            _getMigration_Node_LabeledEventFromLabeledEventEntityMapper = getMigration_Node_LabeledEventFromLabeledEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_LabeledEventFromLabeledEventEntityMapper));
            _getMigration_Node_LanguageFromLanguageEntityMapper = getMigration_Node_LanguageFromLanguageEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_LanguageFromLanguageEntityMapper));
            _getMigration_Node_LicenseFromLicenseEntityMapper = getMigration_Node_LicenseFromLicenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_LicenseFromLicenseEntityMapper));
            _getMigration_Node_LockedEventFromLockedEventEntityMapper = getMigration_Node_LockedEventFromLockedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_LockedEventFromLockedEventEntityMapper));
            _getMigration_Node_MannequinFromMannequinEntityMapper = getMigration_Node_MannequinFromMannequinEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MannequinFromMannequinEntityMapper));
            _getMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper = getMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper));
            _getMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper = getMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper));
            _getMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper = getMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper));
            _getMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper = getMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper));
            _getMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper = getMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper));
            _getMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper = getMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper));
            _getMigration_Node_MentionedEventFromMentionedEventEntityMapper = getMigration_Node_MentionedEventFromMentionedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MentionedEventFromMentionedEventEntityMapper));
            _getMigration_Node_MergedEventFromMergedEventEntityMapper = getMigration_Node_MergedEventFromMergedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MergedEventFromMergedEventEntityMapper));
            _getMigration_Node_MigrationSourceFromMigrationSourceEntityMapper = getMigration_Node_MigrationSourceFromMigrationSourceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MigrationSourceFromMigrationSourceEntityMapper));
            _getMigration_Node_MilestoneFromMilestoneEntityMapper = getMigration_Node_MilestoneFromMilestoneEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MilestoneFromMilestoneEntityMapper));
            _getMigration_Node_MilestonedEventFromMilestonedEventEntityMapper = getMigration_Node_MilestonedEventFromMilestonedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MilestonedEventFromMilestonedEventEntityMapper));
            _getMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper = getMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper));
            _getMigration_Node_OIDCProviderFromOIDCProviderEntityMapper = getMigration_Node_OIDCProviderFromOIDCProviderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OIDCProviderFromOIDCProviderEntityMapper));
            _getMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper = getMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper));
            _getMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper = getMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper));
            _getMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper = getMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper));
            _getMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper = getMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper));
            _getMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper = getMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper));
            _getMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper = getMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper));
            _getMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper = getMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper));
            _getMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper = getMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper));
            _getMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper = getMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper));
            _getMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper = getMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper));
            _getMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper = getMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper));
            _getMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper = getMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper));
            _getMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper = getMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper));
            _getMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper = getMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper));
            _getMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper = getMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper));
            _getMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper = getMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper));
            _getMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper = getMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper));
            _getMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper = getMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper));
            _getMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper = getMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper));
            _getMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper = getMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper));
            _getMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper = getMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper));
            _getMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper = getMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper));
            _getMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper = getMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper));
            _getMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper = getMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper));
            _getMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper = getMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper));
            _getMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper = getMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper));
            _getMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper = getMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper));
            _getMigration_Node_OrganizationFromOrganizationEntityMapper = getMigration_Node_OrganizationFromOrganizationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrganizationFromOrganizationEntityMapper));
            _getMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper = getMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper));
            _getMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper = getMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper));
            _getMigration_Node_PackageFromPackageEntityMapper = getMigration_Node_PackageFromPackageEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PackageFromPackageEntityMapper));
            _getMigration_Node_PackageFileFromPackageFileEntityMapper = getMigration_Node_PackageFileFromPackageFileEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PackageFileFromPackageFileEntityMapper));
            _getMigration_Node_PackageTagFromPackageTagEntityMapper = getMigration_Node_PackageTagFromPackageTagEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PackageTagFromPackageTagEntityMapper));
            _getMigration_Node_PackageVersionFromPackageVersionEntityMapper = getMigration_Node_PackageVersionFromPackageVersionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PackageVersionFromPackageVersionEntityMapper));
            _getMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper = getMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper));
            _getMigration_Node_PinnedEventFromPinnedEventEntityMapper = getMigration_Node_PinnedEventFromPinnedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PinnedEventFromPinnedEventEntityMapper));
            _getMigration_Node_PinnedIssueFromPinnedIssueEntityMapper = getMigration_Node_PinnedIssueFromPinnedIssueEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PinnedIssueFromPinnedIssueEntityMapper));
            _getMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper = getMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper));
            _getMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper = getMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper));
            _getMigration_Node_ProjectFromProjectEntityMapper = getMigration_Node_ProjectFromProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ProjectFromProjectEntityMapper));
            _getMigration_Node_ProjectCardFromProjectCardEntityMapper = getMigration_Node_ProjectCardFromProjectCardEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ProjectCardFromProjectCardEntityMapper));
            _getMigration_Node_ProjectColumnFromProjectColumnEntityMapper = getMigration_Node_ProjectColumnFromProjectColumnEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ProjectColumnFromProjectColumnEntityMapper));
            _getMigration_Node_ProjectNextFromProjectNextEntityMapper = getMigration_Node_ProjectNextFromProjectNextEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ProjectNextFromProjectNextEntityMapper));
            _getMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper = getMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper));
            _getMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper = getMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper));
            _getMigration_Node_PublicKeyFromPublicKeyEntityMapper = getMigration_Node_PublicKeyFromPublicKeyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PublicKeyFromPublicKeyEntityMapper));
            _getMigration_Node_PullRequestFromPullRequestEntityMapper = getMigration_Node_PullRequestFromPullRequestEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PullRequestFromPullRequestEntityMapper));
            _getMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper = getMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper));
            _getMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper = getMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper));
            _getMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper = getMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper));
            _getMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper = getMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper));
            _getMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper = getMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper));
            _getMigration_Node_PushFromPushEntityMapper = getMigration_Node_PushFromPushEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PushFromPushEntityMapper));
            _getMigration_Node_PushAllowanceFromPushAllowanceEntityMapper = getMigration_Node_PushAllowanceFromPushAllowanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_PushAllowanceFromPushAllowanceEntityMapper));
            _getMigration_Node_ReactionFromReactionEntityMapper = getMigration_Node_ReactionFromReactionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReactionFromReactionEntityMapper));
            _getMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper = getMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper));
            _getMigration_Node_RefFromRefEntityMapper = getMigration_Node_RefFromRefEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RefFromRefEntityMapper));
            _getMigration_Node_ReferencedEventFromReferencedEventEntityMapper = getMigration_Node_ReferencedEventFromReferencedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReferencedEventFromReferencedEventEntityMapper));
            _getMigration_Node_ReleaseFromReleaseEntityMapper = getMigration_Node_ReleaseFromReleaseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReleaseFromReleaseEntityMapper));
            _getMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper = getMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper));
            _getMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper = getMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper));
            _getMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper = getMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper));
            _getMigration_Node_ReopenedEventFromReopenedEventEntityMapper = getMigration_Node_ReopenedEventFromReopenedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReopenedEventFromReopenedEventEntityMapper));
            _getMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper = getMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper));
            _getMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper = getMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper));
            _getMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper = getMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper));
            _getMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper = getMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper));
            _getMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper = getMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper = getMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper = getMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper = getMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper = getMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper = getMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper = getMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper = getMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper = getMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper = getMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper));
            _getMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper = getMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper));
            _getMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper = getMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper));
            _getMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper = getMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper));
            _getMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper = getMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper));
            _getMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper = getMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper));
            _getMigration_Node_RepositoryFromRepositoryEntityMapper = getMigration_Node_RepositoryFromRepositoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryFromRepositoryEntityMapper));
            _getMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper = getMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper));
            _getMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper = getMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper));
            _getMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper = getMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper));
            _getMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper = getMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper));
            _getMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper = getMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper));
            _getMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper = getMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper));
            _getMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper = getMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper));
            _getMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper = getMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper));
            _getMigration_Node_ReviewRequestFromReviewRequestEntityMapper = getMigration_Node_ReviewRequestFromReviewRequestEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReviewRequestFromReviewRequestEntityMapper));
            _getMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper = getMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper));
            _getMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper = getMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper));
            _getMigration_Node_SavedReplyFromSavedReplyEntityMapper = getMigration_Node_SavedReplyFromSavedReplyEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SavedReplyFromSavedReplyEntityMapper));
            _getMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper = getMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper));
            _getMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper = getMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper));
            _getMigration_Node_SponsorsListingFromSponsorsListingEntityMapper = getMigration_Node_SponsorsListingFromSponsorsListingEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SponsorsListingFromSponsorsListingEntityMapper));
            _getMigration_Node_SponsorsTierFromSponsorsTierEntityMapper = getMigration_Node_SponsorsTierFromSponsorsTierEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SponsorsTierFromSponsorsTierEntityMapper));
            _getMigration_Node_SponsorshipFromSponsorshipEntityMapper = getMigration_Node_SponsorshipFromSponsorshipEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SponsorshipFromSponsorshipEntityMapper));
            _getMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper = getMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper));
            _getMigration_Node_StatusFromStatusEntityMapper = getMigration_Node_StatusFromStatusEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_StatusFromStatusEntityMapper));
            _getMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper = getMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper));
            _getMigration_Node_StatusContextFromStatusContextEntityMapper = getMigration_Node_StatusContextFromStatusContextEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_StatusContextFromStatusContextEntityMapper));
            _getMigration_Node_SubscribedEventFromSubscribedEventEntityMapper = getMigration_Node_SubscribedEventFromSubscribedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_SubscribedEventFromSubscribedEventEntityMapper));
            _getMigration_Node_TagFromTagEntityMapper = getMigration_Node_TagFromTagEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TagFromTagEntityMapper));
            _getMigration_Node_TeamFromTeamEntityMapper = getMigration_Node_TeamFromTeamEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamFromTeamEntityMapper));
            _getMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper = getMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper));
            _getMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper = getMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper));
            _getMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper = getMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper));
            _getMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper = getMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper));
            _getMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper = getMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper));
            _getMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper = getMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper));
            _getMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper = getMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper));
            _getMigration_Node_TopicFromTopicEntityMapper = getMigration_Node_TopicFromTopicEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TopicFromTopicEntityMapper));
            _getMigration_Node_TransferredEventFromTransferredEventEntityMapper = getMigration_Node_TransferredEventFromTransferredEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TransferredEventFromTransferredEventEntityMapper));
            _getMigration_Node_TreeFromTreeEntityMapper = getMigration_Node_TreeFromTreeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_TreeFromTreeEntityMapper));
            _getMigration_Node_UnassignedEventFromUnassignedEventEntityMapper = getMigration_Node_UnassignedEventFromUnassignedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UnassignedEventFromUnassignedEventEntityMapper));
            _getMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper = getMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper));
            _getMigration_Node_UnlockedEventFromUnlockedEventEntityMapper = getMigration_Node_UnlockedEventFromUnlockedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UnlockedEventFromUnlockedEventEntityMapper));
            _getMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper = getMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper));
            _getMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper = getMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper));
            _getMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper = getMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper));
            _getMigration_Node_UserFromUserEntityMapper = getMigration_Node_UserFromUserEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UserFromUserEntityMapper));
            _getMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper = getMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper));
            _getMigration_Node_UserContentEditFromUserContentEditEntityMapper = getMigration_Node_UserContentEditFromUserContentEditEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UserContentEditFromUserContentEditEntityMapper));
            _getMigration_Node_UserStatusFromUserStatusEntityMapper = getMigration_Node_UserStatusFromUserStatusEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_UserStatusFromUserStatusEntityMapper));
            _getMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper = getMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper));
            _getMigration_Node_WorkflowFromWorkflowEntityMapper = getMigration_Node_WorkflowFromWorkflowEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_WorkflowFromWorkflowEntityMapper));
            _getMigration_Node_WorkflowRunFromWorkflowRunEntityMapper = getMigration_Node_WorkflowRunFromWorkflowRunEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_WorkflowRunFromWorkflowRunEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OctoshiftCLI.GraphQL.IGetMigrationResult);
        public GetMigrationResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetMigrationResultInfo info)
            {
                return new GetMigrationResult(MapIGetMigration_Node(info.Node, snapshot));
            }

            throw new global::System.ArgumentException("GetMigrationResultInfo expected.");
        }

        private global::OctoshiftCLI.GraphQL.IGetMigration_Node? MapIGetMigration_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("AddedToProjectEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("App", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AppFromAppEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AppEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AssignedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AssignedEventFromAssignedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AssignedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AutoMergeDisabledEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AutoMergeEnabledEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AutoRebaseEnabledEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AutoSquashEnabledEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AutomaticBaseChangeFailedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("AutomaticBaseChangeSucceededEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BaseRefChangedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BaseRefDeletedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BaseRefForcePushedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BlobFromBlobEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BlobEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Bot", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BotFromBotEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BotEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BranchProtectionRule", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BypassForcePushAllowance", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("BypassPullRequestAllowance", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CWE", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CWEFromCWEEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CWEEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CheckRun", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CheckRunFromCheckRunEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CheckRunEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CheckSuite", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CheckSuiteFromCheckSuiteEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ClosedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ClosedEventFromClosedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ClosedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CodeOfConduct", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CodeOfConductFromCodeOfConductEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CommentDeletedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CommitFromCommitEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CommitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CommitComment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CommitCommentFromCommitCommentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CommitCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CommitCommentThread", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ConnectedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ConnectedEventFromConnectedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ConvertToDraftEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ConvertedNoteToIssueEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ConvertedToDiscussionEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("CrossReferencedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DemilestonedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DeployKey", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DeployKeyFromDeployKeyEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DeployKeyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DeployedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DeployedEventFromDeployedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DeployedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Deployment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DeploymentFromDeploymentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DeploymentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DeploymentEnvironmentChangedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DeploymentReview", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DeploymentStatus", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DisconnectedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Discussion", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DiscussionFromDiscussionEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DiscussionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DiscussionCategory", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("DiscussionComment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Enterprise", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseFromEnterpriseEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseAdministratorInvitation", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseIdentityProvider", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseRepositoryInfo", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseServerInstallation", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseServerUserAccount", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseServerUserAccountEmail", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseServerUserAccountsUpload", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("EnterpriseUserAccount", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Environment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_EnvironmentFromEnvironmentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.EnvironmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ExternalIdentity", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Gist", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_GistFromGistEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.GistEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("GistComment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_GistCommentFromGistCommentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.GistCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("HeadRefDeletedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("HeadRefForcePushedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("HeadRefRestoredEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Import", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ImportFromImportEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ImportEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("IpAllowListEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Issue", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_IssueFromIssueEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.IssueEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("IssueComment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_IssueCommentFromIssueCommentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.IssueCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Label", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_LabelFromLabelEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.LabelEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("LabeledEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_LabeledEventFromLabeledEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.LabeledEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Language", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_LanguageFromLanguageEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.LanguageEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("License", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_LicenseFromLicenseEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.LicenseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("LockedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_LockedEventFromLockedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.LockedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Mannequin", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MannequinFromMannequinEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MannequinEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MarkedAsDuplicateEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MarketplaceCategory", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MarketplaceListing", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MembersCanDeleteReposClearAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MembersCanDeleteReposDisableAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MembersCanDeleteReposEnableAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MentionedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MentionedEventFromMentionedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MentionedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MergedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MergedEventFromMergedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MergedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MigrationSourceFromMigrationSourceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Milestone", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MilestoneFromMilestoneEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MilestoneEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MilestonedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MilestonedEventFromMilestonedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("MovedColumnsInProjectEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OIDCProvider", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OIDCProviderFromOIDCProviderEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OauthApplicationCreateAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgAddBillingManagerAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgAddMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgBlockUserAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgConfigDisableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgConfigEnableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgCreateAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgDisableOauthAppRestrictionsAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgDisableSamlAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgDisableTwoFactorRequirementAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgEnableOauthAppRestrictionsAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgEnableSamlAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgEnableTwoFactorRequirementAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgInviteMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgInviteToBusinessAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgOauthAppAccessApprovedAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgOauthAppAccessDeniedAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgOauthAppAccessRequestedAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgRemoveBillingManagerAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgRemoveMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgRemoveOutsideCollaboratorAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgRestoreMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgUnblockUserAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgUpdateDefaultRepositoryPermissionAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgUpdateMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgUpdateMemberRepositoryCreationPermissionAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrgUpdateMemberRepositoryInvitationPermissionAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Organization", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrganizationFromOrganizationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrganizationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrganizationIdentityProvider", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("OrganizationInvitation", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Package", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PackageFromPackageEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PackageEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PackageFile", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PackageFileFromPackageFileEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PackageFileEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PackageTag", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PackageTagFromPackageTagEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PackageTagEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PackageVersion", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PackageVersionFromPackageVersionEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PackageVersionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PinnedDiscussion", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PinnedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PinnedEventFromPinnedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PinnedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PinnedIssue", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PinnedIssueFromPinnedIssueEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PrivateRepositoryForkingDisableAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PrivateRepositoryForkingEnableAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ProjectFromProjectEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ProjectCard", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ProjectCardFromProjectCardEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ProjectCardEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ProjectColumn", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ProjectColumnFromProjectColumnEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ProjectNext", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ProjectNextFromProjectNextEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ProjectNextEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ProjectNextItem", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ProjectNextItemFieldValue", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PublicKey", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PublicKeyFromPublicKeyEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PublicKeyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PullRequest", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PullRequestFromPullRequestEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PullRequestEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PullRequestCommit", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PullRequestCommitCommentThread", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PullRequestReview", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PullRequestReviewComment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PullRequestReviewThread", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Push", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PushFromPushEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PushEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("PushAllowance", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_PushAllowanceFromPushAllowanceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Reaction", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReactionFromReactionEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReactionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReadyForReviewEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Ref", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RefFromRefEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RefEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReferencedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReferencedEventFromReferencedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Release", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReleaseFromReleaseEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReleaseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReleaseAsset", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RemovedFromProjectEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RenamedTitleEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReopenedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReopenedEventFromReopenedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoAddMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoAddTopicAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoArchivedAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoChangeMergeSettingAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigDisableAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigDisableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigDisableContributorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigDisableSockpuppetDisallowedAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigEnableAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigEnableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigEnableContributorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigEnableSockpuppetDisallowedAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigLockAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoConfigUnlockAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoCreateAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoDestroyAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoRemoveMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepoRemoveTopicAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryFromRepositoryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepositoryInvitation", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepositoryMigration", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepositoryTopic", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepositoryVisibilityChangeDisableAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepositoryVisibilityChangeEnableAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("RepositoryVulnerabilityAlert", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReviewDismissalAllowance", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReviewDismissedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReviewRequest", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReviewRequestFromReviewRequestEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReviewRequestRemovedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("ReviewRequestedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SavedReply", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SavedReplyFromSavedReplyEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SavedReplyEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SecurityAdvisory", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SponsorsActivity", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SponsorsListing", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SponsorsListingFromSponsorsListingEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SponsorsTier", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SponsorsTierFromSponsorsTierEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Sponsorship", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SponsorshipFromSponsorshipEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SponsorshipEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SponsorshipNewsletter", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Status", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_StatusFromStatusEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.StatusEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("StatusCheckRollup", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("StatusContext", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_StatusContextFromStatusContextEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.StatusContextEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("SubscribedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_SubscribedEventFromSubscribedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TagFromTagEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TagEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Team", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamFromTeamEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamAddMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamAddRepositoryAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamChangeParentTeamAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamDiscussion", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamDiscussionComment", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamRemoveMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TeamRemoveRepositoryAuditEntry", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Topic", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TopicFromTopicEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TopicEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("TransferredEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TransferredEventFromTransferredEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TransferredEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_TreeFromTreeEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.TreeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UnassignedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UnassignedEventFromUnassignedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UnlabeledEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UnlockedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UnlockedEventFromUnlockedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UnmarkedAsDuplicateEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UnpinnedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UnsubscribedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UserFromUserEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UserEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UserBlockedEvent", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UserContentEdit", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UserContentEditFromUserContentEditEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UserContentEditEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("UserStatus", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_UserStatusFromUserStatusEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.UserStatusEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("VerifiableDomain", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_WorkflowFromWorkflowEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.WorkflowEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("WorkflowRun", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_WorkflowRunFromWorkflowRunEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigrationResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetMigrationResultInfo(global::StrawberryShake.EntityId? node, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Node = node;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Fetches an object given its ID.
        /// </summary>
        public global::StrawberryShake.EntityId? Node { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetMigrationResultInfo(Node, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity, GetMigration_Node_AddedToProjectEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AddedToProjectEventFromAddedToProjectEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AddedToProjectEvent Map(global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AddedToProjectEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AppFromAppEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AppEntity, GetMigration_Node_App>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AppFromAppEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_App Map(global::OctoshiftCLI.GraphQL.State.AppEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_App();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AssignedEventFromAssignedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AssignedEventEntity, GetMigration_Node_AssignedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AssignedEventFromAssignedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AssignedEvent Map(global::OctoshiftCLI.GraphQL.State.AssignedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AssignedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity, GetMigration_Node_AutoMergeDisabledEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AutoMergeDisabledEventFromAutoMergeDisabledEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AutoMergeDisabledEvent Map(global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AutoMergeDisabledEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity, GetMigration_Node_AutoMergeEnabledEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AutoMergeEnabledEventFromAutoMergeEnabledEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AutoMergeEnabledEvent Map(global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AutoMergeEnabledEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity, GetMigration_Node_AutoRebaseEnabledEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AutoRebaseEnabledEventFromAutoRebaseEnabledEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AutoRebaseEnabledEvent Map(global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AutoRebaseEnabledEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity, GetMigration_Node_AutoSquashEnabledEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AutoSquashEnabledEventFromAutoSquashEnabledEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AutoSquashEnabledEvent Map(global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AutoSquashEnabledEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity, GetMigration_Node_AutomaticBaseChangeFailedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AutomaticBaseChangeFailedEventFromAutomaticBaseChangeFailedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AutomaticBaseChangeFailedEvent Map(global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AutomaticBaseChangeFailedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity, GetMigration_Node_AutomaticBaseChangeSucceededEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_AutomaticBaseChangeSucceededEventFromAutomaticBaseChangeSucceededEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_AutomaticBaseChangeSucceededEvent Map(global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_AutomaticBaseChangeSucceededEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity, GetMigration_Node_BaseRefChangedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BaseRefChangedEventFromBaseRefChangedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_BaseRefChangedEvent Map(global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_BaseRefChangedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity, GetMigration_Node_BaseRefDeletedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BaseRefDeletedEventFromBaseRefDeletedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_BaseRefDeletedEvent Map(global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_BaseRefDeletedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity, GetMigration_Node_BaseRefForcePushedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BaseRefForcePushedEventFromBaseRefForcePushedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_BaseRefForcePushedEvent Map(global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_BaseRefForcePushedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BlobFromBlobEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BlobEntity, GetMigration_Node_Blob>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BlobFromBlobEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Blob Map(global::OctoshiftCLI.GraphQL.State.BlobEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Blob();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BotFromBotEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BotEntity, GetMigration_Node_Bot>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BotFromBotEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Bot Map(global::OctoshiftCLI.GraphQL.State.BotEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Bot();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity, GetMigration_Node_BranchProtectionRule>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BranchProtectionRuleFromBranchProtectionRuleEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_BranchProtectionRule Map(global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_BranchProtectionRule();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity, GetMigration_Node_BypassForcePushAllowance>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BypassForcePushAllowanceFromBypassForcePushAllowanceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_BypassForcePushAllowance Map(global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_BypassForcePushAllowance();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity, GetMigration_Node_BypassPullRequestAllowance>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_BypassPullRequestAllowanceFromBypassPullRequestAllowanceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_BypassPullRequestAllowance Map(global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_BypassPullRequestAllowance();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CWEFromCWEEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CWEEntity, GetMigration_Node_CWE>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CWEFromCWEEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CWE Map(global::OctoshiftCLI.GraphQL.State.CWEEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CWE();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CheckRunFromCheckRunEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckRunEntity, GetMigration_Node_CheckRun>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CheckRunFromCheckRunEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CheckRun Map(global::OctoshiftCLI.GraphQL.State.CheckRunEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CheckRun();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CheckSuiteFromCheckSuiteEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity, GetMigration_Node_CheckSuite>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CheckSuiteFromCheckSuiteEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CheckSuite Map(global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CheckSuite();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ClosedEventFromClosedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ClosedEventEntity, GetMigration_Node_ClosedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ClosedEventFromClosedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ClosedEvent Map(global::OctoshiftCLI.GraphQL.State.ClosedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ClosedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CodeOfConductFromCodeOfConductEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity, GetMigration_Node_CodeOfConduct>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CodeOfConductFromCodeOfConductEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CodeOfConduct Map(global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CodeOfConduct();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity, GetMigration_Node_CommentDeletedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CommentDeletedEventFromCommentDeletedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CommentDeletedEvent Map(global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CommentDeletedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommitFromCommitEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitEntity, GetMigration_Node_Commit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CommitFromCommitEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Commit Map(global::OctoshiftCLI.GraphQL.State.CommitEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Commit();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommitCommentFromCommitCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentEntity, GetMigration_Node_CommitComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CommitCommentFromCommitCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CommitComment Map(global::OctoshiftCLI.GraphQL.State.CommitCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CommitComment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity, GetMigration_Node_CommitCommentThread>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CommitCommentThreadFromCommitCommentThreadEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CommitCommentThread Map(global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CommitCommentThread();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConnectedEventFromConnectedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity, GetMigration_Node_ConnectedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ConnectedEventFromConnectedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ConnectedEvent Map(global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ConnectedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity, GetMigration_Node_ConvertToDraftEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ConvertToDraftEventFromConvertToDraftEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ConvertToDraftEvent Map(global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ConvertToDraftEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity, GetMigration_Node_ConvertedNoteToIssueEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ConvertedNoteToIssueEventFromConvertedNoteToIssueEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ConvertedNoteToIssueEvent Map(global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ConvertedNoteToIssueEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity, GetMigration_Node_ConvertedToDiscussionEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ConvertedToDiscussionEventFromConvertedToDiscussionEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ConvertedToDiscussionEvent Map(global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ConvertedToDiscussionEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity, GetMigration_Node_CrossReferencedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_CrossReferencedEventFromCrossReferencedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_CrossReferencedEvent Map(global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_CrossReferencedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity, GetMigration_Node_DemilestonedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DemilestonedEventFromDemilestonedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DemilestonedEvent Map(global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DemilestonedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeployKeyFromDeployKeyEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployKeyEntity, GetMigration_Node_DeployKey>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DeployKeyFromDeployKeyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DeployKey Map(global::OctoshiftCLI.GraphQL.State.DeployKeyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DeployKey();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeployedEventFromDeployedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeployedEventEntity, GetMigration_Node_DeployedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DeployedEventFromDeployedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DeployedEvent Map(global::OctoshiftCLI.GraphQL.State.DeployedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DeployedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentFromDeploymentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEntity, GetMigration_Node_Deployment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DeploymentFromDeploymentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Deployment Map(global::OctoshiftCLI.GraphQL.State.DeploymentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Deployment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity, GetMigration_Node_DeploymentEnvironmentChangedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DeploymentEnvironmentChangedEventFromDeploymentEnvironmentChangedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DeploymentEnvironmentChangedEvent Map(global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DeploymentEnvironmentChangedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity, GetMigration_Node_DeploymentReview>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DeploymentReviewFromDeploymentReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DeploymentReview Map(global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DeploymentReview();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity, GetMigration_Node_DeploymentStatus>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DeploymentStatusFromDeploymentStatusEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DeploymentStatus Map(global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DeploymentStatus();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity, GetMigration_Node_DisconnectedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DisconnectedEventFromDisconnectedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DisconnectedEvent Map(global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DisconnectedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DiscussionFromDiscussionEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionEntity, GetMigration_Node_Discussion>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DiscussionFromDiscussionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Discussion Map(global::OctoshiftCLI.GraphQL.State.DiscussionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Discussion();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity, GetMigration_Node_DiscussionCategory>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DiscussionCategoryFromDiscussionCategoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DiscussionCategory Map(global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DiscussionCategory();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity, GetMigration_Node_DiscussionComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_DiscussionCommentFromDiscussionCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_DiscussionComment Map(global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_DiscussionComment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseFromEnterpriseEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseEntity, GetMigration_Node_Enterprise>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseFromEnterpriseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Enterprise Map(global::OctoshiftCLI.GraphQL.State.EnterpriseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Enterprise();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity, GetMigration_Node_EnterpriseAdministratorInvitation>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseAdministratorInvitationFromEnterpriseAdministratorInvitationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseAdministratorInvitation Map(global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseAdministratorInvitation();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity, GetMigration_Node_EnterpriseIdentityProvider>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseIdentityProviderFromEnterpriseIdentityProviderEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseIdentityProvider Map(global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseIdentityProvider();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity, GetMigration_Node_EnterpriseRepositoryInfo>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseRepositoryInfoFromEnterpriseRepositoryInfoEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseRepositoryInfo Map(global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseRepositoryInfo();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity, GetMigration_Node_EnterpriseServerInstallation>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseServerInstallationFromEnterpriseServerInstallationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseServerInstallation Map(global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseServerInstallation();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity, GetMigration_Node_EnterpriseServerUserAccount>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseServerUserAccountFromEnterpriseServerUserAccountEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseServerUserAccount Map(global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseServerUserAccount();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity, GetMigration_Node_EnterpriseServerUserAccountEmail>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseServerUserAccountEmailFromEnterpriseServerUserAccountEmailEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseServerUserAccountEmail Map(global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseServerUserAccountEmail();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity, GetMigration_Node_EnterpriseServerUserAccountsUpload>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseServerUserAccountsUploadFromEnterpriseServerUserAccountsUploadEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseServerUserAccountsUpload Map(global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseServerUserAccountsUpload();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity, GetMigration_Node_EnterpriseUserAccount>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnterpriseUserAccountFromEnterpriseUserAccountEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_EnterpriseUserAccount Map(global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_EnterpriseUserAccount();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_EnvironmentFromEnvironmentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.EnvironmentEntity, GetMigration_Node_Environment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_EnvironmentFromEnvironmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Environment Map(global::OctoshiftCLI.GraphQL.State.EnvironmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Environment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity, GetMigration_Node_ExternalIdentity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ExternalIdentityFromExternalIdentityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ExternalIdentity Map(global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ExternalIdentity();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_GistFromGistEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistEntity, GetMigration_Node_Gist>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_GistFromGistEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Gist Map(global::OctoshiftCLI.GraphQL.State.GistEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Gist();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_GistCommentFromGistCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.GistCommentEntity, GetMigration_Node_GistComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_GistCommentFromGistCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_GistComment Map(global::OctoshiftCLI.GraphQL.State.GistCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_GistComment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity, GetMigration_Node_HeadRefDeletedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_HeadRefDeletedEventFromHeadRefDeletedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_HeadRefDeletedEvent Map(global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_HeadRefDeletedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity, GetMigration_Node_HeadRefForcePushedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_HeadRefForcePushedEventFromHeadRefForcePushedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_HeadRefForcePushedEvent Map(global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_HeadRefForcePushedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity, GetMigration_Node_HeadRefRestoredEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_HeadRefRestoredEventFromHeadRefRestoredEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_HeadRefRestoredEvent Map(global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_HeadRefRestoredEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ImportFromImportEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ImportEntity, GetMigration_Node_Import>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ImportFromImportEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Import Map(global::OctoshiftCLI.GraphQL.State.ImportEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Import();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity, GetMigration_Node_IpAllowListEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_IpAllowListEntryFromIpAllowListEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_IpAllowListEntry Map(global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_IpAllowListEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_IssueFromIssueEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueEntity, GetMigration_Node_Issue>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_IssueFromIssueEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Issue Map(global::OctoshiftCLI.GraphQL.State.IssueEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Issue();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_IssueCommentFromIssueCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.IssueCommentEntity, GetMigration_Node_IssueComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_IssueCommentFromIssueCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_IssueComment Map(global::OctoshiftCLI.GraphQL.State.IssueCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_IssueComment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LabelFromLabelEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabelEntity, GetMigration_Node_Label>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_LabelFromLabelEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Label Map(global::OctoshiftCLI.GraphQL.State.LabelEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Label();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LabeledEventFromLabeledEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LabeledEventEntity, GetMigration_Node_LabeledEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_LabeledEventFromLabeledEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_LabeledEvent Map(global::OctoshiftCLI.GraphQL.State.LabeledEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_LabeledEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LanguageFromLanguageEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LanguageEntity, GetMigration_Node_Language>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_LanguageFromLanguageEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Language Map(global::OctoshiftCLI.GraphQL.State.LanguageEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Language();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LicenseFromLicenseEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LicenseEntity, GetMigration_Node_License>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_LicenseFromLicenseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_License Map(global::OctoshiftCLI.GraphQL.State.LicenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_License();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_LockedEventFromLockedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.LockedEventEntity, GetMigration_Node_LockedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_LockedEventFromLockedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_LockedEvent Map(global::OctoshiftCLI.GraphQL.State.LockedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_LockedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MannequinFromMannequinEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MannequinEntity, GetMigration_Node_Mannequin>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MannequinFromMannequinEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Mannequin Map(global::OctoshiftCLI.GraphQL.State.MannequinEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Mannequin();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity, GetMigration_Node_MarkedAsDuplicateEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MarkedAsDuplicateEventFromMarkedAsDuplicateEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MarkedAsDuplicateEvent Map(global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MarkedAsDuplicateEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity, GetMigration_Node_MarketplaceCategory>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MarketplaceCategoryFromMarketplaceCategoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MarketplaceCategory Map(global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MarketplaceCategory();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity, GetMigration_Node_MarketplaceListing>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MarketplaceListingFromMarketplaceListingEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MarketplaceListing Map(global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MarketplaceListing();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposClearAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MembersCanDeleteReposClearAuditEntryFromMembersCanDeleteReposClearAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MembersCanDeleteReposClearAuditEntry Map(global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MembersCanDeleteReposClearAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposDisableAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MembersCanDeleteReposDisableAuditEntryFromMembersCanDeleteReposDisableAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MembersCanDeleteReposDisableAuditEntry Map(global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MembersCanDeleteReposDisableAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity, GetMigration_Node_MembersCanDeleteReposEnableAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MembersCanDeleteReposEnableAuditEntryFromMembersCanDeleteReposEnableAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MembersCanDeleteReposEnableAuditEntry Map(global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MembersCanDeleteReposEnableAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MentionedEventFromMentionedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MentionedEventEntity, GetMigration_Node_MentionedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MentionedEventFromMentionedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MentionedEvent Map(global::OctoshiftCLI.GraphQL.State.MentionedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MentionedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MergedEventFromMergedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MergedEventEntity, GetMigration_Node_MergedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MergedEventFromMergedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MergedEvent Map(global::OctoshiftCLI.GraphQL.State.MergedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MergedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MigrationSourceFromMigrationSourceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, GetMigration_Node_MigrationSource>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MigrationSourceFromMigrationSourceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MigrationSource Map(global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MigrationSource();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MilestoneFromMilestoneEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestoneEntity, GetMigration_Node_Milestone>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MilestoneFromMilestoneEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Milestone Map(global::OctoshiftCLI.GraphQL.State.MilestoneEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Milestone();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MilestonedEventFromMilestonedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity, GetMigration_Node_MilestonedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MilestonedEventFromMilestonedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MilestonedEvent Map(global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MilestonedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity, GetMigration_Node_MovedColumnsInProjectEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MovedColumnsInProjectEventFromMovedColumnsInProjectEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MovedColumnsInProjectEvent Map(global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MovedColumnsInProjectEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OIDCProviderFromOIDCProviderEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity, GetMigration_Node_OIDCProvider>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OIDCProviderFromOIDCProviderEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OIDCProvider Map(global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OIDCProvider();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity, GetMigration_Node_OauthApplicationCreateAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OauthApplicationCreateAuditEntryFromOauthApplicationCreateAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OauthApplicationCreateAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OauthApplicationCreateAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity, GetMigration_Node_OrgAddBillingManagerAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgAddBillingManagerAuditEntryFromOrgAddBillingManagerAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgAddBillingManagerAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgAddBillingManagerAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity, GetMigration_Node_OrgAddMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgAddMemberAuditEntryFromOrgAddMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgAddMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgAddMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity, GetMigration_Node_OrgBlockUserAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgBlockUserAuditEntryFromOrgBlockUserAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgBlockUserAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgBlockUserAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntryFromOrgConfigDisableCollaboratorsOnlyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgConfigDisableCollaboratorsOnlyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntryFromOrgConfigEnableCollaboratorsOnlyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgConfigEnableCollaboratorsOnlyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity, GetMigration_Node_OrgCreateAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgCreateAuditEntryFromOrgCreateAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgCreateAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgCreateAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity, GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntryFromOrgDisableOauthAppRestrictionsAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgDisableOauthAppRestrictionsAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity, GetMigration_Node_OrgDisableSamlAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgDisableSamlAuditEntryFromOrgDisableSamlAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgDisableSamlAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgDisableSamlAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity, GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntryFromOrgDisableTwoFactorRequirementAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgDisableTwoFactorRequirementAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity, GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntryFromOrgEnableOauthAppRestrictionsAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgEnableOauthAppRestrictionsAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity, GetMigration_Node_OrgEnableSamlAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgEnableSamlAuditEntryFromOrgEnableSamlAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgEnableSamlAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgEnableSamlAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity, GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntryFromOrgEnableTwoFactorRequirementAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgEnableTwoFactorRequirementAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity, GetMigration_Node_OrgInviteMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgInviteMemberAuditEntryFromOrgInviteMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgInviteMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgInviteMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity, GetMigration_Node_OrgInviteToBusinessAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgInviteToBusinessAuditEntryFromOrgInviteToBusinessAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgInviteToBusinessAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgInviteToBusinessAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgOauthAppAccessApprovedAuditEntryFromOrgOauthAppAccessApprovedAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgOauthAppAccessApprovedAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgOauthAppAccessDeniedAuditEntryFromOrgOauthAppAccessDeniedAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgOauthAppAccessDeniedAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity, GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgOauthAppAccessRequestedAuditEntryFromOrgOauthAppAccessRequestedAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgOauthAppAccessRequestedAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity, GetMigration_Node_OrgRemoveBillingManagerAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgRemoveBillingManagerAuditEntryFromOrgRemoveBillingManagerAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgRemoveBillingManagerAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgRemoveBillingManagerAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity, GetMigration_Node_OrgRemoveMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgRemoveMemberAuditEntryFromOrgRemoveMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgRemoveMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgRemoveMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity, GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntryFromOrgRemoveOutsideCollaboratorAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgRemoveOutsideCollaboratorAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity, GetMigration_Node_OrgRestoreMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgRestoreMemberAuditEntryFromOrgRestoreMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgRestoreMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgRestoreMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity, GetMigration_Node_OrgUnblockUserAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgUnblockUserAuditEntryFromOrgUnblockUserAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgUnblockUserAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgUnblockUserAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntryFromOrgUpdateDefaultRepositoryPermissionAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgUpdateDefaultRepositoryPermissionAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity, GetMigration_Node_OrgUpdateMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgUpdateMemberAuditEntryFromOrgUpdateMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgUpdateMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgUpdateMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntryFromOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgUpdateMemberRepositoryCreationPermissionAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity, GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntryFromOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry Map(global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrgUpdateMemberRepositoryInvitationPermissionAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrganizationFromOrganizationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, GetMigration_Node_Organization>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrganizationFromOrganizationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Organization Map(global::OctoshiftCLI.GraphQL.State.OrganizationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Organization();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity, GetMigration_Node_OrganizationIdentityProvider>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrganizationIdentityProviderFromOrganizationIdentityProviderEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrganizationIdentityProvider Map(global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrganizationIdentityProvider();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity, GetMigration_Node_OrganizationInvitation>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_OrganizationInvitationFromOrganizationInvitationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_OrganizationInvitation Map(global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_OrganizationInvitation();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageFromPackageEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageEntity, GetMigration_Node_Package>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PackageFromPackageEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Package Map(global::OctoshiftCLI.GraphQL.State.PackageEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Package();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageFileFromPackageFileEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageFileEntity, GetMigration_Node_PackageFile>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PackageFileFromPackageFileEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PackageFile Map(global::OctoshiftCLI.GraphQL.State.PackageFileEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PackageFile();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageTagFromPackageTagEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageTagEntity, GetMigration_Node_PackageTag>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PackageTagFromPackageTagEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PackageTag Map(global::OctoshiftCLI.GraphQL.State.PackageTagEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PackageTag();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PackageVersionFromPackageVersionEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PackageVersionEntity, GetMigration_Node_PackageVersion>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PackageVersionFromPackageVersionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PackageVersion Map(global::OctoshiftCLI.GraphQL.State.PackageVersionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PackageVersion();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity, GetMigration_Node_PinnedDiscussion>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PinnedDiscussionFromPinnedDiscussionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PinnedDiscussion Map(global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PinnedDiscussion();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PinnedEventFromPinnedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedEventEntity, GetMigration_Node_PinnedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PinnedEventFromPinnedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PinnedEvent Map(global::OctoshiftCLI.GraphQL.State.PinnedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PinnedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PinnedIssueFromPinnedIssueEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity, GetMigration_Node_PinnedIssue>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PinnedIssueFromPinnedIssueEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PinnedIssue Map(global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PinnedIssue();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity, GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PrivateRepositoryForkingDisableAuditEntryFromPrivateRepositoryForkingDisableAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry Map(global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PrivateRepositoryForkingDisableAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity, GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PrivateRepositoryForkingEnableAuditEntryFromPrivateRepositoryForkingEnableAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry Map(global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PrivateRepositoryForkingEnableAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectFromProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectEntity, GetMigration_Node_Project>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ProjectFromProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Project Map(global::OctoshiftCLI.GraphQL.State.ProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Project();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectCardFromProjectCardEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectCardEntity, GetMigration_Node_ProjectCard>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ProjectCardFromProjectCardEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ProjectCard Map(global::OctoshiftCLI.GraphQL.State.ProjectCardEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ProjectCard();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectColumnFromProjectColumnEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity, GetMigration_Node_ProjectColumn>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ProjectColumnFromProjectColumnEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ProjectColumn Map(global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ProjectColumn();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectNextFromProjectNextEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextEntity, GetMigration_Node_ProjectNext>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ProjectNextFromProjectNextEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ProjectNext Map(global::OctoshiftCLI.GraphQL.State.ProjectNextEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ProjectNext();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity, GetMigration_Node_ProjectNextItem>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ProjectNextItemFromProjectNextItemEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ProjectNextItem Map(global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ProjectNextItem();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity, GetMigration_Node_ProjectNextItemFieldValue>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ProjectNextItemFieldValueFromProjectNextItemFieldValueEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ProjectNextItemFieldValue Map(global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ProjectNextItemFieldValue();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PublicKeyFromPublicKeyEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PublicKeyEntity, GetMigration_Node_PublicKey>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PublicKeyFromPublicKeyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PublicKey Map(global::OctoshiftCLI.GraphQL.State.PublicKeyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PublicKey();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestFromPullRequestEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestEntity, GetMigration_Node_PullRequest>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PullRequestFromPullRequestEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PullRequest Map(global::OctoshiftCLI.GraphQL.State.PullRequestEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PullRequest();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity, GetMigration_Node_PullRequestCommit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PullRequestCommitFromPullRequestCommitEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PullRequestCommit Map(global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PullRequestCommit();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity, GetMigration_Node_PullRequestCommitCommentThread>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PullRequestCommitCommentThreadFromPullRequestCommitCommentThreadEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PullRequestCommitCommentThread Map(global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PullRequestCommitCommentThread();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity, GetMigration_Node_PullRequestReview>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PullRequestReviewFromPullRequestReviewEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PullRequestReview Map(global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PullRequestReview();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity, GetMigration_Node_PullRequestReviewComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PullRequestReviewCommentFromPullRequestReviewCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PullRequestReviewComment Map(global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PullRequestReviewComment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity, GetMigration_Node_PullRequestReviewThread>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PullRequestReviewThreadFromPullRequestReviewThreadEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PullRequestReviewThread Map(global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PullRequestReviewThread();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PushFromPushEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushEntity, GetMigration_Node_Push>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PushFromPushEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Push Map(global::OctoshiftCLI.GraphQL.State.PushEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Push();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_PushAllowanceFromPushAllowanceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity, GetMigration_Node_PushAllowance>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_PushAllowanceFromPushAllowanceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_PushAllowance Map(global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_PushAllowance();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReactionFromReactionEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReactionEntity, GetMigration_Node_Reaction>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReactionFromReactionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Reaction Map(global::OctoshiftCLI.GraphQL.State.ReactionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Reaction();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity, GetMigration_Node_ReadyForReviewEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReadyForReviewEventFromReadyForReviewEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReadyForReviewEvent Map(global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReadyForReviewEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RefFromRefEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RefEntity, GetMigration_Node_Ref>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RefFromRefEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Ref Map(global::OctoshiftCLI.GraphQL.State.RefEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Ref();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReferencedEventFromReferencedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity, GetMigration_Node_ReferencedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReferencedEventFromReferencedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReferencedEvent Map(global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReferencedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReleaseFromReleaseEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseEntity, GetMigration_Node_Release>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReleaseFromReleaseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Release Map(global::OctoshiftCLI.GraphQL.State.ReleaseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Release();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity, GetMigration_Node_ReleaseAsset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReleaseAssetFromReleaseAssetEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReleaseAsset Map(global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReleaseAsset();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity, GetMigration_Node_RemovedFromProjectEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RemovedFromProjectEventFromRemovedFromProjectEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RemovedFromProjectEvent Map(global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RemovedFromProjectEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity, GetMigration_Node_RenamedTitleEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RenamedTitleEventFromRenamedTitleEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RenamedTitleEvent Map(global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RenamedTitleEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReopenedEventFromReopenedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity, GetMigration_Node_ReopenedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReopenedEventFromReopenedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReopenedEvent Map(global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReopenedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity, GetMigration_Node_RepoAccessAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoAccessAuditEntryFromRepoAccessAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoAccessAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoAccessAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity, GetMigration_Node_RepoAddMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoAddMemberAuditEntryFromRepoAddMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoAddMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoAddMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity, GetMigration_Node_RepoAddTopicAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoAddTopicAuditEntryFromRepoAddTopicAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoAddTopicAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoAddTopicAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity, GetMigration_Node_RepoArchivedAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoArchivedAuditEntryFromRepoArchivedAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoArchivedAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoArchivedAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity, GetMigration_Node_RepoChangeMergeSettingAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoChangeMergeSettingAuditEntryFromRepoChangeMergeSettingAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoChangeMergeSettingAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoChangeMergeSettingAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntryFromRepoConfigDisableAnonymousGitAccessAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigDisableAnonymousGitAccessAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntryFromRepoConfigDisableCollaboratorsOnlyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigDisableCollaboratorsOnlyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntryFromRepoConfigDisableContributorsOnlyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigDisableContributorsOnlyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity, GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntryFromRepoConfigDisableSockpuppetDisallowedAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigDisableSockpuppetDisallowedAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntryFromRepoConfigEnableAnonymousGitAccessAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigEnableAnonymousGitAccessAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntryFromRepoConfigEnableCollaboratorsOnlyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigEnableCollaboratorsOnlyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity, GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntryFromRepoConfigEnableContributorsOnlyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigEnableContributorsOnlyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity, GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntryFromRepoConfigEnableSockpuppetDisallowedAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigEnableSockpuppetDisallowedAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntryFromRepoConfigLockAnonymousGitAccessAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigLockAnonymousGitAccessAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity, GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntryFromRepoConfigUnlockAnonymousGitAccessAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoConfigUnlockAnonymousGitAccessAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity, GetMigration_Node_RepoCreateAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoCreateAuditEntryFromRepoCreateAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoCreateAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoCreateAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity, GetMigration_Node_RepoDestroyAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoDestroyAuditEntryFromRepoDestroyAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoDestroyAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoDestroyAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity, GetMigration_Node_RepoRemoveMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoRemoveMemberAuditEntryFromRepoRemoveMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoRemoveMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoRemoveMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity, GetMigration_Node_RepoRemoveTopicAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepoRemoveTopicAuditEntryFromRepoRemoveTopicAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepoRemoveTopicAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepoRemoveTopicAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryFromRepositoryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryEntity, GetMigration_Node_Repository>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepositoryFromRepositoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Repository Map(global::OctoshiftCLI.GraphQL.State.RepositoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Repository();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity, GetMigration_Node_RepositoryInvitation>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepositoryInvitationFromRepositoryInvitationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepositoryInvitation Map(global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepositoryInvitation();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, GetMigration_Node_RepositoryMigration>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, GetMigration_Node_MigrationSource_MigrationSource> _getMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper;
        public GetMigration_Node_RepositoryMigrationFromRepositoryMigrationEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, GetMigration_Node_MigrationSource_MigrationSource> getMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper = getMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper));
        }

        public GetMigration_Node_RepositoryMigration Map(global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepositoryMigration(entity.Id, entity.SourceUrl, MapNonNullableIGetMigration_Node_MigrationSource_1(entity.MigrationSource, snapshot), entity.State, entity.FailureReason);
        }

        private global::OctoshiftCLI.GraphQL.IGetMigration_Node_MigrationSource_1 MapNonNullableIGetMigration_Node_MigrationSource_1(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                return _getMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity, GetMigration_Node_RepositoryTopic>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepositoryTopicFromRepositoryTopicEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepositoryTopic Map(global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepositoryTopic();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity, GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntryFromRepositoryVisibilityChangeDisableAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepositoryVisibilityChangeDisableAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity, GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntryFromRepositoryVisibilityChangeEnableAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry Map(global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepositoryVisibilityChangeEnableAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity, GetMigration_Node_RepositoryVulnerabilityAlert>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_RepositoryVulnerabilityAlertFromRepositoryVulnerabilityAlertEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_RepositoryVulnerabilityAlert Map(global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_RepositoryVulnerabilityAlert();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity, GetMigration_Node_ReviewDismissalAllowance>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReviewDismissalAllowanceFromReviewDismissalAllowanceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReviewDismissalAllowance Map(global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReviewDismissalAllowance();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity, GetMigration_Node_ReviewDismissedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReviewDismissedEventFromReviewDismissedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReviewDismissedEvent Map(global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReviewDismissedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewRequestFromReviewRequestEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity, GetMigration_Node_ReviewRequest>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReviewRequestFromReviewRequestEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReviewRequest Map(global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReviewRequest();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity, GetMigration_Node_ReviewRequestRemovedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReviewRequestRemovedEventFromReviewRequestRemovedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReviewRequestRemovedEvent Map(global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReviewRequestRemovedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity, GetMigration_Node_ReviewRequestedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_ReviewRequestedEventFromReviewRequestedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_ReviewRequestedEvent Map(global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_ReviewRequestedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SavedReplyFromSavedReplyEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SavedReplyEntity, GetMigration_Node_SavedReply>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SavedReplyFromSavedReplyEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SavedReply Map(global::OctoshiftCLI.GraphQL.State.SavedReplyEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SavedReply();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity, GetMigration_Node_SecurityAdvisory>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SecurityAdvisoryFromSecurityAdvisoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SecurityAdvisory Map(global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SecurityAdvisory();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity, GetMigration_Node_SponsorsActivity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SponsorsActivityFromSponsorsActivityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SponsorsActivity Map(global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SponsorsActivity();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorsListingFromSponsorsListingEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity, GetMigration_Node_SponsorsListing>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SponsorsListingFromSponsorsListingEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SponsorsListing Map(global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SponsorsListing();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorsTierFromSponsorsTierEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity, GetMigration_Node_SponsorsTier>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SponsorsTierFromSponsorsTierEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SponsorsTier Map(global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SponsorsTier();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorshipFromSponsorshipEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipEntity, GetMigration_Node_Sponsorship>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SponsorshipFromSponsorshipEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Sponsorship Map(global::OctoshiftCLI.GraphQL.State.SponsorshipEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Sponsorship();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity, GetMigration_Node_SponsorshipNewsletter>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SponsorshipNewsletterFromSponsorshipNewsletterEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SponsorshipNewsletter Map(global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SponsorshipNewsletter();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_StatusFromStatusEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusEntity, GetMigration_Node_Status>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_StatusFromStatusEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Status Map(global::OctoshiftCLI.GraphQL.State.StatusEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Status();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity, GetMigration_Node_StatusCheckRollup>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_StatusCheckRollupFromStatusCheckRollupEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_StatusCheckRollup Map(global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_StatusCheckRollup();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_StatusContextFromStatusContextEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.StatusContextEntity, GetMigration_Node_StatusContext>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_StatusContextFromStatusContextEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_StatusContext Map(global::OctoshiftCLI.GraphQL.State.StatusContextEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_StatusContext();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_SubscribedEventFromSubscribedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity, GetMigration_Node_SubscribedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_SubscribedEventFromSubscribedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_SubscribedEvent Map(global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_SubscribedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TagFromTagEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TagEntity, GetMigration_Node_Tag>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TagFromTagEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Tag Map(global::OctoshiftCLI.GraphQL.State.TagEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Tag();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamFromTeamEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamEntity, GetMigration_Node_Team>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamFromTeamEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Team Map(global::OctoshiftCLI.GraphQL.State.TeamEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Team();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity, GetMigration_Node_TeamAddMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamAddMemberAuditEntryFromTeamAddMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamAddMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamAddMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity, GetMigration_Node_TeamAddRepositoryAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamAddRepositoryAuditEntryFromTeamAddRepositoryAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamAddRepositoryAuditEntry Map(global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamAddRepositoryAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity, GetMigration_Node_TeamChangeParentTeamAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamChangeParentTeamAuditEntryFromTeamChangeParentTeamAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamChangeParentTeamAuditEntry Map(global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamChangeParentTeamAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity, GetMigration_Node_TeamDiscussion>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamDiscussionFromTeamDiscussionEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamDiscussion Map(global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamDiscussion();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity, GetMigration_Node_TeamDiscussionComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamDiscussionCommentFromTeamDiscussionCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamDiscussionComment Map(global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamDiscussionComment();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity, GetMigration_Node_TeamRemoveMemberAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamRemoveMemberAuditEntryFromTeamRemoveMemberAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamRemoveMemberAuditEntry Map(global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamRemoveMemberAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity, GetMigration_Node_TeamRemoveRepositoryAuditEntry>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TeamRemoveRepositoryAuditEntryFromTeamRemoveRepositoryAuditEntryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TeamRemoveRepositoryAuditEntry Map(global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TeamRemoveRepositoryAuditEntry();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TopicFromTopicEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TopicEntity, GetMigration_Node_Topic>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TopicFromTopicEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Topic Map(global::OctoshiftCLI.GraphQL.State.TopicEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Topic();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TransferredEventFromTransferredEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TransferredEventEntity, GetMigration_Node_TransferredEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TransferredEventFromTransferredEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_TransferredEvent Map(global::OctoshiftCLI.GraphQL.State.TransferredEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_TransferredEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_TreeFromTreeEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.TreeEntity, GetMigration_Node_Tree>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_TreeFromTreeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Tree Map(global::OctoshiftCLI.GraphQL.State.TreeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Tree();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnassignedEventFromUnassignedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity, GetMigration_Node_UnassignedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UnassignedEventFromUnassignedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UnassignedEvent Map(global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UnassignedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity, GetMigration_Node_UnlabeledEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UnlabeledEventFromUnlabeledEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UnlabeledEvent Map(global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UnlabeledEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnlockedEventFromUnlockedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity, GetMigration_Node_UnlockedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UnlockedEventFromUnlockedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UnlockedEvent Map(global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UnlockedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity, GetMigration_Node_UnmarkedAsDuplicateEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UnmarkedAsDuplicateEventFromUnmarkedAsDuplicateEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UnmarkedAsDuplicateEvent Map(global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UnmarkedAsDuplicateEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity, GetMigration_Node_UnpinnedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UnpinnedEventFromUnpinnedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UnpinnedEvent Map(global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UnpinnedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity, GetMigration_Node_UnsubscribedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UnsubscribedEventFromUnsubscribedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UnsubscribedEvent Map(global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UnsubscribedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserFromUserEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserEntity, GetMigration_Node_User>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UserFromUserEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_User Map(global::OctoshiftCLI.GraphQL.State.UserEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_User();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity, GetMigration_Node_UserBlockedEvent>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UserBlockedEventFromUserBlockedEventEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UserBlockedEvent Map(global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UserBlockedEvent();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserContentEditFromUserContentEditEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserContentEditEntity, GetMigration_Node_UserContentEdit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UserContentEditFromUserContentEditEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UserContentEdit Map(global::OctoshiftCLI.GraphQL.State.UserContentEditEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UserContentEdit();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_UserStatusFromUserStatusEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.UserStatusEntity, GetMigration_Node_UserStatus>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_UserStatusFromUserStatusEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_UserStatus Map(global::OctoshiftCLI.GraphQL.State.UserStatusEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_UserStatus();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity, GetMigration_Node_VerifiableDomain>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_VerifiableDomainFromVerifiableDomainEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_VerifiableDomain Map(global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_VerifiableDomain();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_WorkflowFromWorkflowEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowEntity, GetMigration_Node_Workflow>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_WorkflowFromWorkflowEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_Workflow Map(global::OctoshiftCLI.GraphQL.State.WorkflowEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_Workflow();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_WorkflowRunFromWorkflowRunEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity, GetMigration_Node_WorkflowRun>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_WorkflowRunFromWorkflowRunEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_WorkflowRun Map(global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_WorkflowRun();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, GetMigration_Node_MigrationSource_MigrationSource>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetMigration_Node_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetMigration_Node_MigrationSource_MigrationSource Map(global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetMigration_Node_MigrationSource_MigrationSource(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfoResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.GetOrganizationInfoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, GetOrganizationInfo_Organization_Organization> _getOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper;
        public GetOrganizationInfoResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, GetOrganizationInfo_Organization_Organization> getOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper = getOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult);
        public GetOrganizationInfoResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetOrganizationInfoResultInfo info)
            {
                return new GetOrganizationInfoResult(MapIGetOrganizationInfo_Organization(info.Organization, snapshot));
            }

            throw new global::System.ArgumentException("GetOrganizationInfoResultInfo expected.");
        }

        private global::OctoshiftCLI.GraphQL.IGetOrganizationInfo_Organization? MapIGetOrganizationInfo_Organization(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Organization", global::System.StringComparison.Ordinal))
            {
                return _getOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.OrganizationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfoResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetOrganizationInfoResultInfo(global::StrawberryShake.EntityId? organization, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Organization = organization;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Lookup a organization by login.
        /// </summary>
        public global::StrawberryShake.EntityId? Organization { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetOrganizationInfoResultInfo(Organization, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.OrganizationEntity, GetOrganizationInfo_Organization_Organization>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetOrganizationInfo_Organization_OrganizationFromOrganizationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetOrganizationInfo_Organization_Organization Map(global::OctoshiftCLI.GraphQL.State.OrganizationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetOrganizationInfo_Organization_Organization(entity.Login, entity.Id, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRoleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.GrantMigratorRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GrantMigratorRoleResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult);
        public GrantMigratorRoleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GrantMigratorRoleResultInfo info)
            {
                return new GrantMigratorRoleResult(MapIGrantMigratorRole_GrantMigratorRole(info.GrantMigratorRole, snapshot));
            }

            throw new global::System.ArgumentException("GrantMigratorRoleResultInfo expected.");
        }

        private global::OctoshiftCLI.GraphQL.IGrantMigratorRole_GrantMigratorRole? MapIGrantMigratorRole_GrantMigratorRole(global::OctoshiftCLI.GraphQL.State.GrantMigratorRolePayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGrantMigratorRole_GrantMigratorRole returnValue = default !;
            if (data?.__typename.Equals("GrantMigratorRolePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GrantMigratorRole_GrantMigratorRole_GrantMigratorRolePayload(data.Success);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRoleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GrantMigratorRoleResultInfo(global::OctoshiftCLI.GraphQL.State.GrantMigratorRolePayloadData? grantMigratorRole, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GrantMigratorRole = grantMigratorRole;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Grant the migrator role to a user or a team.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.State.GrantMigratorRolePayloadData? GrantMigratorRole { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GrantMigratorRoleResultInfo(GrantMigratorRole, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRoleResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.RevokeMigratorRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RevokeMigratorRoleResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult);
        public RevokeMigratorRoleResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RevokeMigratorRoleResultInfo info)
            {
                return new RevokeMigratorRoleResult(MapIRevokeMigratorRole_RevokeMigratorRole(info.RevokeMigratorRole, snapshot));
            }

            throw new global::System.ArgumentException("RevokeMigratorRoleResultInfo expected.");
        }

        private global::OctoshiftCLI.GraphQL.IRevokeMigratorRole_RevokeMigratorRole? MapIRevokeMigratorRole_RevokeMigratorRole(global::OctoshiftCLI.GraphQL.State.RevokeMigratorRolePayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IRevokeMigratorRole_RevokeMigratorRole returnValue = default !;
            if (data?.__typename.Equals("RevokeMigratorRolePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new RevokeMigratorRole_RevokeMigratorRole_RevokeMigratorRolePayload(data.Success);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRoleResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RevokeMigratorRoleResultInfo(global::OctoshiftCLI.GraphQL.State.RevokeMigratorRolePayloadData? revokeMigratorRole, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            RevokeMigratorRole = revokeMigratorRole;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Revoke the migrator role from a user or a team.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.State.RevokeMigratorRolePayloadData? RevokeMigratorRole { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RevokeMigratorRoleResultInfo(RevokeMigratorRole, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.StartRepositoryMigrationResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration> _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource> _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper;
        public StartRepositoryMigrationResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration> startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource> startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper = startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper));
            _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper = startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult);
        public StartRepositoryMigrationResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is StartRepositoryMigrationResultInfo info)
            {
                return new StartRepositoryMigrationResult(MapIStartRepositoryMigration_StartRepositoryMigration(info.StartRepositoryMigration, snapshot));
            }

            throw new global::System.ArgumentException("StartRepositoryMigrationResultInfo expected.");
        }

        private global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration? MapIStartRepositoryMigration_StartRepositoryMigration(global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationPayloadData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IStartRepositoryMigration_StartRepositoryMigration returnValue = default !;
            if (data?.__typename.Equals("StartRepositoryMigrationPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new StartRepositoryMigration_StartRepositoryMigration_StartRepositoryMigrationPayload(MapIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration(data.RepositoryMigration, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration? MapIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("RepositoryMigration", global::System.StringComparison.Ordinal))
            {
                return _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource MapNonNullableIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                return _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public StartRepositoryMigrationResultInfo(global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationPayloadData? startRepositoryMigration, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            StartRepositoryMigration = startRepositoryMigration;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Start a repository migration.
        /// </summary>
        public global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationPayloadData? StartRepositoryMigration { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new StartRepositoryMigrationResultInfo(StartRepositoryMigration, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource> _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper;
        public StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigrationFromRepositoryMigrationEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource> startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper = startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper));
        }

        public StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration Map(global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_RepositoryMigration(entity.Id, MapNonNullableIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource(entity.MigrationSource, snapshot), entity.SourceUrl, entity.State, entity.FailureReason);
        }

        private global::OctoshiftCLI.GraphQL.IStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource MapNonNullableIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                return _startRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper.Map(snapshot.GetEntity<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper : global::StrawberryShake.IEntityMapper<global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity, StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSourceFromMigrationSourceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource Map(global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new StartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSource_MigrationSource(entity.Id, entity.Name, entity.Type);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourceBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationSourceType> _migrationSourceTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Uri> _uRIParser;
        public CreateMigrationSourceBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.ICreateMigrationSourceResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _migrationSourceTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationSourceType>("MigrationSourceType") ?? throw new global::System.ArgumentException("No serializer for type `MigrationSourceType` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _uRIParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Uri>("URI") ?? throw new global::System.ArgumentException("No serializer for type `URI` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateMigrationSourceResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateMigrationSourceResult Result, CreateMigrationSourceResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<ICreateMigrationSourceResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateMigrationSourceResult, CreateMigrationSourceResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::OctoshiftCLI.GraphQL.State.CreateMigrationSourcePayloadData? createMigrationSourceId = default !;
            _entityStore.Update(session =>
            {
                createMigrationSourceId = DeserializeICreateMigrationSource_CreateMigrationSource(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createMigrationSource"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateMigrationSourceResultInfo(createMigrationSourceId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::OctoshiftCLI.GraphQL.State.CreateMigrationSourcePayloadData? DeserializeICreateMigrationSource_CreateMigrationSource(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CreateMigrationSourcePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OctoshiftCLI.GraphQL.State.CreateMigrationSourcePayloadData(typename, migrationSource: UpdateICreateMigrationSource_CreateMigrationSource_MigrationSourceEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "migrationSource"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateICreateMigrationSource_CreateMigrationSource_MigrationSourceEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableMigrationSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableMigrationSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Uri DeserializeNonNullableUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uRIParser.Parse(obj.Value.GetString()!);
        }

        private global::OctoshiftCLI.GraphQL.MigrationSourceType DeserializeNonNullableMigrationSourceType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _migrationSourceTypeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetMigrationBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetMigrationResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetMigrationResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationState> _migrationStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Uri> _uRIParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetMigrationBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetMigrationResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _migrationStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationState>("MigrationState") ?? throw new global::System.ArgumentException("No serializer for type `MigrationState` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _uRIParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Uri>("URI") ?? throw new global::System.ArgumentException("No serializer for type `URI` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetMigrationResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetMigrationResult Result, GetMigrationResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetMigrationResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetMigrationResult, GetMigrationResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? nodeId = default !;
            _entityStore.Update(session =>
            {
                nodeId = UpdateIGetMigration_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetMigrationResultInfo(nodeId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetMigration_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AddedToProjectEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AddedToProjectEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("App", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AppEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AppEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AppEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AssignedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AssignedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AssignedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AssignedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AutoMergeDisabledEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoMergeDisabledEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AutoMergeEnabledEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoMergeEnabledEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AutoRebaseEnabledEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoRebaseEnabledEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AutoSquashEnabledEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutoSquashEnabledEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AutomaticBaseChangeFailedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeFailedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("AutomaticBaseChangeSucceededEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.AutomaticBaseChangeSucceededEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("BaseRefChangedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BaseRefChangedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("BaseRefDeletedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BaseRefDeletedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("BaseRefForcePushedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BaseRefForcePushedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BlobEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BlobEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BlobEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Bot", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BotEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BotEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BotEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("BranchProtectionRule", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BranchProtectionRuleEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("BypassForcePushAllowance", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BypassForcePushAllowanceEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("BypassPullRequestAllowance", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.BypassPullRequestAllowanceEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CWE", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CWEEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CWEEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CWEEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CheckRun", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CheckRunEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CheckRunEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CheckRunEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CheckSuite", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CheckSuiteEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ClosedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ClosedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ClosedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ClosedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CodeOfConduct", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CodeOfConductEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CommentDeletedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommentDeletedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CommitEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommitEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommitEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CommitComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CommitCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommitCommentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommitCommentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CommitCommentThread", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CommitCommentThreadEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ConnectedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConnectedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ConvertToDraftEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConvertToDraftEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ConvertedNoteToIssueEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConvertedNoteToIssueEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ConvertedToDiscussionEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ConvertedToDiscussionEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("CrossReferencedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.CrossReferencedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DemilestonedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DemilestonedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DeployKey", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DeployKeyEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeployKeyEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeployKeyEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DeployedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DeployedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeployedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeployedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Deployment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DeploymentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DeploymentEnvironmentChangedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentEnvironmentChangedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DeploymentReview", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentReviewEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DeploymentStatus", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DeploymentStatusEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DisconnectedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DisconnectedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Discussion", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DiscussionEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DiscussionEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DiscussionEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DiscussionCategory", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DiscussionCategoryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("DiscussionComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.DiscussionCommentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Enterprise", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseAdministratorInvitation", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseAdministratorInvitationEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseIdentityProvider", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseIdentityProviderEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseRepositoryInfo", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseRepositoryInfoEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseServerInstallation", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerInstallationEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseServerUserAccount", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseServerUserAccountEmail", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountEmailEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseServerUserAccountsUpload", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseServerUserAccountsUploadEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("EnterpriseUserAccount", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnterpriseUserAccountEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Environment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.EnvironmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnvironmentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.EnvironmentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ExternalIdentity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ExternalIdentityEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Gist", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.GistEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.GistEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.GistEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("GistComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.GistCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.GistCommentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.GistCommentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("HeadRefDeletedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.HeadRefDeletedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("HeadRefForcePushedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.HeadRefForcePushedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("HeadRefRestoredEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.HeadRefRestoredEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Import", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ImportEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ImportEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ImportEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("IpAllowListEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.IpAllowListEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Issue", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.IssueEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.IssueEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.IssueEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("IssueComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.IssueCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.IssueCommentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.IssueCommentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Label", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.LabelEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LabelEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LabelEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("LabeledEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.LabeledEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LabeledEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LabeledEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Language", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.LanguageEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LanguageEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LanguageEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("License", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.LicenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LicenseEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LicenseEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("LockedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.LockedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LockedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.LockedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Mannequin", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MannequinEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MannequinEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MannequinEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MarkedAsDuplicateEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MarkedAsDuplicateEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MarketplaceCategory", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MarketplaceCategoryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MarketplaceListing", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MarketplaceListingEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MembersCanDeleteReposClearAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposClearAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MembersCanDeleteReposDisableAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposDisableAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MembersCanDeleteReposEnableAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MembersCanDeleteReposEnableAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MentionedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MentionedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MentionedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MentionedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MergedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MergedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MergedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MergedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(entity.Id, entity.Name, entity.Url, entity.Type));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(default !, default !, default !, default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Milestone", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MilestoneEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MilestoneEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MilestoneEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MilestonedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MilestonedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("MovedColumnsInProjectEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MovedColumnsInProjectEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OIDCProvider", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OIDCProviderEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OauthApplicationCreateAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OauthApplicationCreateAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgAddBillingManagerAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgAddBillingManagerAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgAddMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgAddMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgBlockUserAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgBlockUserAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgConfigDisableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgConfigDisableCollaboratorsOnlyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgConfigEnableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgConfigEnableCollaboratorsOnlyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgCreateAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgCreateAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgDisableOauthAppRestrictionsAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgDisableOauthAppRestrictionsAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgDisableSamlAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgDisableSamlAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgDisableTwoFactorRequirementAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgDisableTwoFactorRequirementAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgEnableOauthAppRestrictionsAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgEnableOauthAppRestrictionsAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgEnableSamlAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgEnableSamlAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgEnableTwoFactorRequirementAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgEnableTwoFactorRequirementAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgInviteMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgInviteMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgInviteToBusinessAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgInviteToBusinessAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgOauthAppAccessApprovedAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessApprovedAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgOauthAppAccessDeniedAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessDeniedAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgOauthAppAccessRequestedAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgOauthAppAccessRequestedAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgRemoveBillingManagerAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRemoveBillingManagerAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgRemoveMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRemoveMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgRemoveOutsideCollaboratorAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRemoveOutsideCollaboratorAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgRestoreMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgRestoreMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgUnblockUserAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUnblockUserAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgUpdateDefaultRepositoryPermissionAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateDefaultRepositoryPermissionAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgUpdateMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgUpdateMemberRepositoryCreationPermissionAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryCreationPermissionAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrgUpdateMemberRepositoryInvitationPermissionAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Organization", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrganizationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationEntity(entity.Login, entity.Id, entity.Name));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationEntity(default !, default !, default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrganizationIdentityProvider", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationIdentityProviderEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("OrganizationInvitation", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationInvitationEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Package", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PackageEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PackageFile", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PackageFileEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageFileEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageFileEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PackageTag", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PackageTagEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageTagEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageTagEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PackageVersion", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PackageVersionEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageVersionEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PackageVersionEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PinnedDiscussion", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PinnedDiscussionEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PinnedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PinnedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PinnedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PinnedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PinnedIssue", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PinnedIssueEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PrivateRepositoryForkingDisableAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingDisableAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PrivateRepositoryForkingEnableAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PrivateRepositoryForkingEnableAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Project", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ProjectCard", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ProjectCardEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectCardEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectCardEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ProjectColumn", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectColumnEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ProjectNext", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ProjectNextEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectNextEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectNextEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ProjectNextItem", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectNextItemEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ProjectNextItemFieldValue", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ProjectNextItemFieldValueEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PublicKey", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PublicKeyEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PublicKeyEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PublicKeyEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PullRequest", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PullRequestEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PullRequestCommit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestCommitEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PullRequestCommitCommentThread", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestCommitCommentThreadEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PullRequestReview", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestReviewEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PullRequestReviewComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestReviewCommentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PullRequestReviewThread", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PullRequestReviewThreadEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Push", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PushEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PushEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PushEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("PushAllowance", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.PushAllowanceEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Reaction", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReactionEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReactionEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReactionEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReadyForReviewEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReadyForReviewEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Ref", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RefEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RefEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RefEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReferencedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReferencedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Release", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReleaseEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReleaseEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReleaseEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReleaseAsset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReleaseAssetEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RemovedFromProjectEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RemovedFromProjectEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RenamedTitleEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RenamedTitleEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReopenedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReopenedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoAccessAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoAddMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoAddMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoAddTopicAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoAddTopicAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoArchivedAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoArchivedAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoChangeMergeSettingAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoChangeMergeSettingAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigDisableAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableAnonymousGitAccessAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigDisableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableCollaboratorsOnlyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigDisableContributorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableContributorsOnlyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigDisableSockpuppetDisallowedAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigDisableSockpuppetDisallowedAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigEnableAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableAnonymousGitAccessAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigEnableCollaboratorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableCollaboratorsOnlyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigEnableContributorsOnlyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableContributorsOnlyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigEnableSockpuppetDisallowedAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigEnableSockpuppetDisallowedAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigLockAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigLockAnonymousGitAccessAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoConfigUnlockAnonymousGitAccessAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoConfigUnlockAnonymousGitAccessAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoCreateAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoCreateAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoDestroyAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoDestroyAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoRemoveMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoRemoveMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepoRemoveTopicAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepoRemoveTopicAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepositoryInvitation", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryInvitationEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepositoryMigration", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sourceUrl")), UpdateNonNullableIGetMigration_Node_MigrationSource_1Entity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "migrationSource"), entityIds), DeserializeNonNullableMigrationState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "failureReason"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sourceUrl")), UpdateNonNullableIGetMigration_Node_MigrationSource_1Entity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "migrationSource"), entityIds), DeserializeNonNullableMigrationState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "failureReason"))));
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepositoryTopic", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryTopicEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepositoryVisibilityChangeDisableAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeDisableAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepositoryVisibilityChangeEnableAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryVisibilityChangeEnableAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("RepositoryVulnerabilityAlert", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryVulnerabilityAlertEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReviewDismissalAllowance", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewDismissalAllowanceEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReviewDismissedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewDismissedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReviewRequest", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewRequestEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReviewRequestRemovedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewRequestRemovedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("ReviewRequestedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.ReviewRequestedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SavedReply", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SavedReplyEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SavedReplyEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SavedReplyEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SecurityAdvisory", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SecurityAdvisoryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SponsorsActivity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorsActivityEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SponsorsListing", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorsListingEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SponsorsTier", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorsTierEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Sponsorship", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SponsorshipEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorshipEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorshipEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SponsorshipNewsletter", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SponsorshipNewsletterEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Status", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.StatusEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.StatusEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.StatusEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("StatusCheckRollup", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.StatusCheckRollupEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("StatusContext", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.StatusContextEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.StatusContextEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.StatusContextEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("SubscribedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.SubscribedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TagEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TagEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TagEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Team", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamAddMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamAddMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamAddRepositoryAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamAddRepositoryAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamChangeParentTeamAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamChangeParentTeamAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamDiscussion", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamDiscussionEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamDiscussionComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamDiscussionCommentEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamRemoveMemberAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamRemoveMemberAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TeamRemoveRepositoryAuditEntry", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TeamRemoveRepositoryAuditEntryEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Topic", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TopicEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TopicEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TopicEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("TransferredEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TransferredEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TransferredEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TransferredEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.TreeEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TreeEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.TreeEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UnassignedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnassignedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UnlabeledEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnlabeledEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UnlockedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnlockedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UnmarkedAsDuplicateEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnmarkedAsDuplicateEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UnpinnedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnpinnedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UnsubscribedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UnsubscribedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("User", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UserEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UserBlockedEvent", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserBlockedEventEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UserContentEdit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UserContentEditEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserContentEditEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserContentEditEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("UserStatus", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.UserStatusEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserStatusEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.UserStatusEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("VerifiableDomain", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.VerifiableDomainEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("Workflow", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.WorkflowEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.WorkflowEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.WorkflowEntity());
                }

                return entityId;
            }

            if (entityId.Name.Equals("WorkflowRun", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity());
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.WorkflowRunEntity());
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Uri DeserializeNonNullableUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uRIParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetMigration_Node_MigrationSource_1Entity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(entity.Id, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Url, entity.Type));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(default !, DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::OctoshiftCLI.GraphQL.MigrationState DeserializeNonNullableMigrationState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _migrationStateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GetOrganizationInfoBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        public GetOrganizationInfoBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGetOrganizationInfoResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetOrganizationInfoResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetOrganizationInfoResult Result, GetOrganizationInfoResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetOrganizationInfoResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetOrganizationInfoResult, GetOrganizationInfoResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? organizationId = default !;
            _entityStore.Update(session =>
            {
                organizationId = UpdateIGetOrganizationInfo_OrganizationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "organization"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetOrganizationInfoResultInfo(organizationId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetOrganizationInfo_OrganizationEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Organization", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.OrganizationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.OrganizationEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "login")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRoleBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.ActorType> _actorTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GrantMigratorRoleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IGrantMigratorRoleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _actorTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.ActorType>("ActorType") ?? throw new global::System.ArgumentException("No serializer for type `ActorType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGrantMigratorRoleResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGrantMigratorRoleResult Result, GrantMigratorRoleResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGrantMigratorRoleResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGrantMigratorRoleResult, GrantMigratorRoleResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GrantMigratorRoleResultInfo(DeserializeIGrantMigratorRole_GrantMigratorRole(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "grantMigratorRole")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::OctoshiftCLI.GraphQL.State.GrantMigratorRolePayloadData? DeserializeIGrantMigratorRole_GrantMigratorRole(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GrantMigratorRolePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OctoshiftCLI.GraphQL.State.GrantMigratorRolePayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRoleBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.ActorType> _actorTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public RevokeMigratorRoleBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IRevokeMigratorRoleResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _actorTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.ActorType>("ActorType") ?? throw new global::System.ArgumentException("No serializer for type `ActorType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IRevokeMigratorRoleResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRevokeMigratorRoleResult Result, RevokeMigratorRoleResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRevokeMigratorRoleResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRevokeMigratorRoleResult, RevokeMigratorRoleResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RevokeMigratorRoleResultInfo(DeserializeIRevokeMigratorRole_RevokeMigratorRole(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "revokeMigratorRole")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::OctoshiftCLI.GraphQL.State.RevokeMigratorRolePayloadData? DeserializeIRevokeMigratorRole_RevokeMigratorRole(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RevokeMigratorRolePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OctoshiftCLI.GraphQL.State.RevokeMigratorRolePayloadData(typename, success: DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "success")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationSourceType> _migrationSourceTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationState> _migrationStateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Uri> _uRIParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public StartRepositoryMigrationBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OctoshiftCLI.GraphQL.IStartRepositoryMigrationResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _migrationSourceTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationSourceType>("MigrationSourceType") ?? throw new global::System.ArgumentException("No serializer for type `MigrationSourceType` found.");
            _migrationStateParser = serializerResolver.GetLeafValueParser<global::System.String, global::OctoshiftCLI.GraphQL.MigrationState>("MigrationState") ?? throw new global::System.ArgumentException("No serializer for type `MigrationState` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _uRIParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Uri>("URI") ?? throw new global::System.ArgumentException("No serializer for type `URI` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IStartRepositoryMigrationResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IStartRepositoryMigrationResult Result, StartRepositoryMigrationResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IStartRepositoryMigrationResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IStartRepositoryMigrationResult, StartRepositoryMigrationResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationPayloadData? startRepositoryMigrationId = default !;
            _entityStore.Update(session =>
            {
                startRepositoryMigrationId = DeserializeIStartRepositoryMigration_StartRepositoryMigration(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startRepositoryMigration"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new StartRepositoryMigrationResultInfo(startRepositoryMigrationId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationPayloadData? DeserializeIStartRepositoryMigration_StartRepositoryMigration(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("StartRepositoryMigrationPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::OctoshiftCLI.GraphQL.State.StartRepositoryMigrationPayloadData(typename, repositoryMigration: UpdateIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigrationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "repositoryMigration"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigrationEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("RepositoryMigration", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sourceUrl")), UpdateNonNullableIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSourceEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "migrationSource"), entityIds), DeserializeNonNullableMigrationState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "failureReason"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.RepositoryMigrationEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sourceUrl")), UpdateNonNullableIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSourceEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "migrationSource"), entityIds), DeserializeNonNullableMigrationState(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "failureReason"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIStartRepositoryMigration_StartRepositoryMigration_RepositoryMigration_MigrationSourceEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("MigrationSource", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity? entity))
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Url, DeserializeNonNullableMigrationSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OctoshiftCLI.GraphQL.State.MigrationSourceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, DeserializeNonNullableMigrationSourceType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::OctoshiftCLI.GraphQL.MigrationSourceType DeserializeNonNullableMigrationSourceType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _migrationSourceTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Uri DeserializeNonNullableUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uRIParser.Parse(obj.Value.GetString()!);
        }

        private global::OctoshiftCLI.GraphQL.MigrationState DeserializeNonNullableMigrationState(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _migrationStateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>Autogenerated return type of CreateMigrationSource</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class CreateMigrationSourcePayloadData
    {
        public CreateMigrationSourcePayloadData(global::System.String __typename, global::StrawberryShake.EntityId? migrationSource = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            MigrationSource = migrationSource;
        }

        public global::System.String __typename { get; }

        ///<summary>The created Octoshift migration source.</summary>
        public global::StrawberryShake.EntityId? MigrationSource { get; }
    }

    ///<summary>Autogenerated return type of GrantMigratorRole</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GrantMigratorRolePayloadData
    {
        public GrantMigratorRolePayloadData(global::System.String __typename, global::System.Boolean? success = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Success = success;
        }

        public global::System.String __typename { get; }

        ///<summary>Did the operation succeed?</summary>
        public global::System.Boolean? Success { get; }
    }

    ///<summary>Autogenerated return type of RevokeMigratorRole</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class RevokeMigratorRolePayloadData
    {
        public RevokeMigratorRolePayloadData(global::System.String __typename, global::System.Boolean? success = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Success = success;
        }

        public global::System.String __typename { get; }

        ///<summary>Did the operation succeed?</summary>
        public global::System.Boolean? Success { get; }
    }

    ///<summary>Autogenerated return type of StartRepositoryMigration</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class StartRepositoryMigrationPayloadData
    {
        public StartRepositoryMigrationPayloadData(global::System.String __typename, global::StrawberryShake.EntityId? repositoryMigration = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            RepositoryMigration = repositoryMigration;
        }

        public global::System.String __typename { get; }

        ///<summary>The new Octoshift repository migration.</summary>
        public global::StrawberryShake.EntityId? RepositoryMigration { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GithubGraphQLClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "MigrationSource" => ParseMigrationSourceEntityId(obj, __typename),
                "AddedToProjectEvent" => ParseAddedToProjectEventEntityId(obj, __typename),
                "App" => ParseAppEntityId(obj, __typename),
                "AssignedEvent" => ParseAssignedEventEntityId(obj, __typename),
                "AutoMergeDisabledEvent" => ParseAutoMergeDisabledEventEntityId(obj, __typename),
                "AutoMergeEnabledEvent" => ParseAutoMergeEnabledEventEntityId(obj, __typename),
                "AutoRebaseEnabledEvent" => ParseAutoRebaseEnabledEventEntityId(obj, __typename),
                "AutoSquashEnabledEvent" => ParseAutoSquashEnabledEventEntityId(obj, __typename),
                "AutomaticBaseChangeFailedEvent" => ParseAutomaticBaseChangeFailedEventEntityId(obj, __typename),
                "AutomaticBaseChangeSucceededEvent" => ParseAutomaticBaseChangeSucceededEventEntityId(obj, __typename),
                "BaseRefChangedEvent" => ParseBaseRefChangedEventEntityId(obj, __typename),
                "BaseRefDeletedEvent" => ParseBaseRefDeletedEventEntityId(obj, __typename),
                "BaseRefForcePushedEvent" => ParseBaseRefForcePushedEventEntityId(obj, __typename),
                "Blob" => ParseBlobEntityId(obj, __typename),
                "Bot" => ParseBotEntityId(obj, __typename),
                "BranchProtectionRule" => ParseBranchProtectionRuleEntityId(obj, __typename),
                "BypassForcePushAllowance" => ParseBypassForcePushAllowanceEntityId(obj, __typename),
                "BypassPullRequestAllowance" => ParseBypassPullRequestAllowanceEntityId(obj, __typename),
                "CWE" => ParseCWEEntityId(obj, __typename),
                "CheckRun" => ParseCheckRunEntityId(obj, __typename),
                "CheckSuite" => ParseCheckSuiteEntityId(obj, __typename),
                "ClosedEvent" => ParseClosedEventEntityId(obj, __typename),
                "CodeOfConduct" => ParseCodeOfConductEntityId(obj, __typename),
                "CommentDeletedEvent" => ParseCommentDeletedEventEntityId(obj, __typename),
                "Commit" => ParseCommitEntityId(obj, __typename),
                "CommitComment" => ParseCommitCommentEntityId(obj, __typename),
                "CommitCommentThread" => ParseCommitCommentThreadEntityId(obj, __typename),
                "ConnectedEvent" => ParseConnectedEventEntityId(obj, __typename),
                "ConvertToDraftEvent" => ParseConvertToDraftEventEntityId(obj, __typename),
                "ConvertedNoteToIssueEvent" => ParseConvertedNoteToIssueEventEntityId(obj, __typename),
                "ConvertedToDiscussionEvent" => ParseConvertedToDiscussionEventEntityId(obj, __typename),
                "CrossReferencedEvent" => ParseCrossReferencedEventEntityId(obj, __typename),
                "DemilestonedEvent" => ParseDemilestonedEventEntityId(obj, __typename),
                "DeployKey" => ParseDeployKeyEntityId(obj, __typename),
                "DeployedEvent" => ParseDeployedEventEntityId(obj, __typename),
                "Deployment" => ParseDeploymentEntityId(obj, __typename),
                "DeploymentEnvironmentChangedEvent" => ParseDeploymentEnvironmentChangedEventEntityId(obj, __typename),
                "DeploymentReview" => ParseDeploymentReviewEntityId(obj, __typename),
                "DeploymentStatus" => ParseDeploymentStatusEntityId(obj, __typename),
                "DisconnectedEvent" => ParseDisconnectedEventEntityId(obj, __typename),
                "Discussion" => ParseDiscussionEntityId(obj, __typename),
                "DiscussionCategory" => ParseDiscussionCategoryEntityId(obj, __typename),
                "DiscussionComment" => ParseDiscussionCommentEntityId(obj, __typename),
                "Enterprise" => ParseEnterpriseEntityId(obj, __typename),
                "EnterpriseAdministratorInvitation" => ParseEnterpriseAdministratorInvitationEntityId(obj, __typename),
                "EnterpriseIdentityProvider" => ParseEnterpriseIdentityProviderEntityId(obj, __typename),
                "EnterpriseRepositoryInfo" => ParseEnterpriseRepositoryInfoEntityId(obj, __typename),
                "EnterpriseServerInstallation" => ParseEnterpriseServerInstallationEntityId(obj, __typename),
                "EnterpriseServerUserAccount" => ParseEnterpriseServerUserAccountEntityId(obj, __typename),
                "EnterpriseServerUserAccountEmail" => ParseEnterpriseServerUserAccountEmailEntityId(obj, __typename),
                "EnterpriseServerUserAccountsUpload" => ParseEnterpriseServerUserAccountsUploadEntityId(obj, __typename),
                "EnterpriseUserAccount" => ParseEnterpriseUserAccountEntityId(obj, __typename),
                "Environment" => ParseEnvironmentEntityId(obj, __typename),
                "ExternalIdentity" => ParseExternalIdentityEntityId(obj, __typename),
                "Gist" => ParseGistEntityId(obj, __typename),
                "GistComment" => ParseGistCommentEntityId(obj, __typename),
                "HeadRefDeletedEvent" => ParseHeadRefDeletedEventEntityId(obj, __typename),
                "HeadRefForcePushedEvent" => ParseHeadRefForcePushedEventEntityId(obj, __typename),
                "HeadRefRestoredEvent" => ParseHeadRefRestoredEventEntityId(obj, __typename),
                "Import" => ParseImportEntityId(obj, __typename),
                "IpAllowListEntry" => ParseIpAllowListEntryEntityId(obj, __typename),
                "Issue" => ParseIssueEntityId(obj, __typename),
                "IssueComment" => ParseIssueCommentEntityId(obj, __typename),
                "Label" => ParseLabelEntityId(obj, __typename),
                "LabeledEvent" => ParseLabeledEventEntityId(obj, __typename),
                "Language" => ParseLanguageEntityId(obj, __typename),
                "License" => ParseLicenseEntityId(obj, __typename),
                "LockedEvent" => ParseLockedEventEntityId(obj, __typename),
                "Mannequin" => ParseMannequinEntityId(obj, __typename),
                "MarkedAsDuplicateEvent" => ParseMarkedAsDuplicateEventEntityId(obj, __typename),
                "MarketplaceCategory" => ParseMarketplaceCategoryEntityId(obj, __typename),
                "MarketplaceListing" => ParseMarketplaceListingEntityId(obj, __typename),
                "MembersCanDeleteReposClearAuditEntry" => ParseMembersCanDeleteReposClearAuditEntryEntityId(obj, __typename),
                "MembersCanDeleteReposDisableAuditEntry" => ParseMembersCanDeleteReposDisableAuditEntryEntityId(obj, __typename),
                "MembersCanDeleteReposEnableAuditEntry" => ParseMembersCanDeleteReposEnableAuditEntryEntityId(obj, __typename),
                "MentionedEvent" => ParseMentionedEventEntityId(obj, __typename),
                "MergedEvent" => ParseMergedEventEntityId(obj, __typename),
                "Milestone" => ParseMilestoneEntityId(obj, __typename),
                "MilestonedEvent" => ParseMilestonedEventEntityId(obj, __typename),
                "MovedColumnsInProjectEvent" => ParseMovedColumnsInProjectEventEntityId(obj, __typename),
                "OIDCProvider" => ParseOIDCProviderEntityId(obj, __typename),
                "OauthApplicationCreateAuditEntry" => ParseOauthApplicationCreateAuditEntryEntityId(obj, __typename),
                "OrgAddBillingManagerAuditEntry" => ParseOrgAddBillingManagerAuditEntryEntityId(obj, __typename),
                "OrgAddMemberAuditEntry" => ParseOrgAddMemberAuditEntryEntityId(obj, __typename),
                "OrgBlockUserAuditEntry" => ParseOrgBlockUserAuditEntryEntityId(obj, __typename),
                "OrgConfigDisableCollaboratorsOnlyAuditEntry" => ParseOrgConfigDisableCollaboratorsOnlyAuditEntryEntityId(obj, __typename),
                "OrgConfigEnableCollaboratorsOnlyAuditEntry" => ParseOrgConfigEnableCollaboratorsOnlyAuditEntryEntityId(obj, __typename),
                "OrgCreateAuditEntry" => ParseOrgCreateAuditEntryEntityId(obj, __typename),
                "OrgDisableOauthAppRestrictionsAuditEntry" => ParseOrgDisableOauthAppRestrictionsAuditEntryEntityId(obj, __typename),
                "OrgDisableSamlAuditEntry" => ParseOrgDisableSamlAuditEntryEntityId(obj, __typename),
                "OrgDisableTwoFactorRequirementAuditEntry" => ParseOrgDisableTwoFactorRequirementAuditEntryEntityId(obj, __typename),
                "OrgEnableOauthAppRestrictionsAuditEntry" => ParseOrgEnableOauthAppRestrictionsAuditEntryEntityId(obj, __typename),
                "OrgEnableSamlAuditEntry" => ParseOrgEnableSamlAuditEntryEntityId(obj, __typename),
                "OrgEnableTwoFactorRequirementAuditEntry" => ParseOrgEnableTwoFactorRequirementAuditEntryEntityId(obj, __typename),
                "OrgInviteMemberAuditEntry" => ParseOrgInviteMemberAuditEntryEntityId(obj, __typename),
                "OrgInviteToBusinessAuditEntry" => ParseOrgInviteToBusinessAuditEntryEntityId(obj, __typename),
                "OrgOauthAppAccessApprovedAuditEntry" => ParseOrgOauthAppAccessApprovedAuditEntryEntityId(obj, __typename),
                "OrgOauthAppAccessDeniedAuditEntry" => ParseOrgOauthAppAccessDeniedAuditEntryEntityId(obj, __typename),
                "OrgOauthAppAccessRequestedAuditEntry" => ParseOrgOauthAppAccessRequestedAuditEntryEntityId(obj, __typename),
                "OrgRemoveBillingManagerAuditEntry" => ParseOrgRemoveBillingManagerAuditEntryEntityId(obj, __typename),
                "OrgRemoveMemberAuditEntry" => ParseOrgRemoveMemberAuditEntryEntityId(obj, __typename),
                "OrgRemoveOutsideCollaboratorAuditEntry" => ParseOrgRemoveOutsideCollaboratorAuditEntryEntityId(obj, __typename),
                "OrgRestoreMemberAuditEntry" => ParseOrgRestoreMemberAuditEntryEntityId(obj, __typename),
                "OrgUnblockUserAuditEntry" => ParseOrgUnblockUserAuditEntryEntityId(obj, __typename),
                "OrgUpdateDefaultRepositoryPermissionAuditEntry" => ParseOrgUpdateDefaultRepositoryPermissionAuditEntryEntityId(obj, __typename),
                "OrgUpdateMemberAuditEntry" => ParseOrgUpdateMemberAuditEntryEntityId(obj, __typename),
                "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" => ParseOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityId(obj, __typename),
                "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" => ParseOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityId(obj, __typename),
                "Organization" => ParseOrganizationEntityId(obj, __typename),
                "OrganizationIdentityProvider" => ParseOrganizationIdentityProviderEntityId(obj, __typename),
                "OrganizationInvitation" => ParseOrganizationInvitationEntityId(obj, __typename),
                "Package" => ParsePackageEntityId(obj, __typename),
                "PackageFile" => ParsePackageFileEntityId(obj, __typename),
                "PackageTag" => ParsePackageTagEntityId(obj, __typename),
                "PackageVersion" => ParsePackageVersionEntityId(obj, __typename),
                "PinnedDiscussion" => ParsePinnedDiscussionEntityId(obj, __typename),
                "PinnedEvent" => ParsePinnedEventEntityId(obj, __typename),
                "PinnedIssue" => ParsePinnedIssueEntityId(obj, __typename),
                "PrivateRepositoryForkingDisableAuditEntry" => ParsePrivateRepositoryForkingDisableAuditEntryEntityId(obj, __typename),
                "PrivateRepositoryForkingEnableAuditEntry" => ParsePrivateRepositoryForkingEnableAuditEntryEntityId(obj, __typename),
                "Project" => ParseProjectEntityId(obj, __typename),
                "ProjectCard" => ParseProjectCardEntityId(obj, __typename),
                "ProjectColumn" => ParseProjectColumnEntityId(obj, __typename),
                "ProjectNext" => ParseProjectNextEntityId(obj, __typename),
                "ProjectNextItem" => ParseProjectNextItemEntityId(obj, __typename),
                "ProjectNextItemFieldValue" => ParseProjectNextItemFieldValueEntityId(obj, __typename),
                "PublicKey" => ParsePublicKeyEntityId(obj, __typename),
                "PullRequest" => ParsePullRequestEntityId(obj, __typename),
                "PullRequestCommit" => ParsePullRequestCommitEntityId(obj, __typename),
                "PullRequestCommitCommentThread" => ParsePullRequestCommitCommentThreadEntityId(obj, __typename),
                "PullRequestReview" => ParsePullRequestReviewEntityId(obj, __typename),
                "PullRequestReviewComment" => ParsePullRequestReviewCommentEntityId(obj, __typename),
                "PullRequestReviewThread" => ParsePullRequestReviewThreadEntityId(obj, __typename),
                "Push" => ParsePushEntityId(obj, __typename),
                "PushAllowance" => ParsePushAllowanceEntityId(obj, __typename),
                "Reaction" => ParseReactionEntityId(obj, __typename),
                "ReadyForReviewEvent" => ParseReadyForReviewEventEntityId(obj, __typename),
                "Ref" => ParseRefEntityId(obj, __typename),
                "ReferencedEvent" => ParseReferencedEventEntityId(obj, __typename),
                "Release" => ParseReleaseEntityId(obj, __typename),
                "ReleaseAsset" => ParseReleaseAssetEntityId(obj, __typename),
                "RemovedFromProjectEvent" => ParseRemovedFromProjectEventEntityId(obj, __typename),
                "RenamedTitleEvent" => ParseRenamedTitleEventEntityId(obj, __typename),
                "ReopenedEvent" => ParseReopenedEventEntityId(obj, __typename),
                "RepoAccessAuditEntry" => ParseRepoAccessAuditEntryEntityId(obj, __typename),
                "RepoAddMemberAuditEntry" => ParseRepoAddMemberAuditEntryEntityId(obj, __typename),
                "RepoAddTopicAuditEntry" => ParseRepoAddTopicAuditEntryEntityId(obj, __typename),
                "RepoArchivedAuditEntry" => ParseRepoArchivedAuditEntryEntityId(obj, __typename),
                "RepoChangeMergeSettingAuditEntry" => ParseRepoChangeMergeSettingAuditEntryEntityId(obj, __typename),
                "RepoConfigDisableAnonymousGitAccessAuditEntry" => ParseRepoConfigDisableAnonymousGitAccessAuditEntryEntityId(obj, __typename),
                "RepoConfigDisableCollaboratorsOnlyAuditEntry" => ParseRepoConfigDisableCollaboratorsOnlyAuditEntryEntityId(obj, __typename),
                "RepoConfigDisableContributorsOnlyAuditEntry" => ParseRepoConfigDisableContributorsOnlyAuditEntryEntityId(obj, __typename),
                "RepoConfigDisableSockpuppetDisallowedAuditEntry" => ParseRepoConfigDisableSockpuppetDisallowedAuditEntryEntityId(obj, __typename),
                "RepoConfigEnableAnonymousGitAccessAuditEntry" => ParseRepoConfigEnableAnonymousGitAccessAuditEntryEntityId(obj, __typename),
                "RepoConfigEnableCollaboratorsOnlyAuditEntry" => ParseRepoConfigEnableCollaboratorsOnlyAuditEntryEntityId(obj, __typename),
                "RepoConfigEnableContributorsOnlyAuditEntry" => ParseRepoConfigEnableContributorsOnlyAuditEntryEntityId(obj, __typename),
                "RepoConfigEnableSockpuppetDisallowedAuditEntry" => ParseRepoConfigEnableSockpuppetDisallowedAuditEntryEntityId(obj, __typename),
                "RepoConfigLockAnonymousGitAccessAuditEntry" => ParseRepoConfigLockAnonymousGitAccessAuditEntryEntityId(obj, __typename),
                "RepoConfigUnlockAnonymousGitAccessAuditEntry" => ParseRepoConfigUnlockAnonymousGitAccessAuditEntryEntityId(obj, __typename),
                "RepoCreateAuditEntry" => ParseRepoCreateAuditEntryEntityId(obj, __typename),
                "RepoDestroyAuditEntry" => ParseRepoDestroyAuditEntryEntityId(obj, __typename),
                "RepoRemoveMemberAuditEntry" => ParseRepoRemoveMemberAuditEntryEntityId(obj, __typename),
                "RepoRemoveTopicAuditEntry" => ParseRepoRemoveTopicAuditEntryEntityId(obj, __typename),
                "Repository" => ParseRepositoryEntityId(obj, __typename),
                "RepositoryInvitation" => ParseRepositoryInvitationEntityId(obj, __typename),
                "RepositoryMigration" => ParseRepositoryMigrationEntityId(obj, __typename),
                "RepositoryTopic" => ParseRepositoryTopicEntityId(obj, __typename),
                "RepositoryVisibilityChangeDisableAuditEntry" => ParseRepositoryVisibilityChangeDisableAuditEntryEntityId(obj, __typename),
                "RepositoryVisibilityChangeEnableAuditEntry" => ParseRepositoryVisibilityChangeEnableAuditEntryEntityId(obj, __typename),
                "RepositoryVulnerabilityAlert" => ParseRepositoryVulnerabilityAlertEntityId(obj, __typename),
                "ReviewDismissalAllowance" => ParseReviewDismissalAllowanceEntityId(obj, __typename),
                "ReviewDismissedEvent" => ParseReviewDismissedEventEntityId(obj, __typename),
                "ReviewRequest" => ParseReviewRequestEntityId(obj, __typename),
                "ReviewRequestRemovedEvent" => ParseReviewRequestRemovedEventEntityId(obj, __typename),
                "ReviewRequestedEvent" => ParseReviewRequestedEventEntityId(obj, __typename),
                "SavedReply" => ParseSavedReplyEntityId(obj, __typename),
                "SecurityAdvisory" => ParseSecurityAdvisoryEntityId(obj, __typename),
                "SponsorsActivity" => ParseSponsorsActivityEntityId(obj, __typename),
                "SponsorsListing" => ParseSponsorsListingEntityId(obj, __typename),
                "SponsorsTier" => ParseSponsorsTierEntityId(obj, __typename),
                "Sponsorship" => ParseSponsorshipEntityId(obj, __typename),
                "SponsorshipNewsletter" => ParseSponsorshipNewsletterEntityId(obj, __typename),
                "Status" => ParseStatusEntityId(obj, __typename),
                "StatusCheckRollup" => ParseStatusCheckRollupEntityId(obj, __typename),
                "StatusContext" => ParseStatusContextEntityId(obj, __typename),
                "SubscribedEvent" => ParseSubscribedEventEntityId(obj, __typename),
                "Tag" => ParseTagEntityId(obj, __typename),
                "Team" => ParseTeamEntityId(obj, __typename),
                "TeamAddMemberAuditEntry" => ParseTeamAddMemberAuditEntryEntityId(obj, __typename),
                "TeamAddRepositoryAuditEntry" => ParseTeamAddRepositoryAuditEntryEntityId(obj, __typename),
                "TeamChangeParentTeamAuditEntry" => ParseTeamChangeParentTeamAuditEntryEntityId(obj, __typename),
                "TeamDiscussion" => ParseTeamDiscussionEntityId(obj, __typename),
                "TeamDiscussionComment" => ParseTeamDiscussionCommentEntityId(obj, __typename),
                "TeamRemoveMemberAuditEntry" => ParseTeamRemoveMemberAuditEntryEntityId(obj, __typename),
                "TeamRemoveRepositoryAuditEntry" => ParseTeamRemoveRepositoryAuditEntryEntityId(obj, __typename),
                "Topic" => ParseTopicEntityId(obj, __typename),
                "TransferredEvent" => ParseTransferredEventEntityId(obj, __typename),
                "Tree" => ParseTreeEntityId(obj, __typename),
                "UnassignedEvent" => ParseUnassignedEventEntityId(obj, __typename),
                "UnlabeledEvent" => ParseUnlabeledEventEntityId(obj, __typename),
                "UnlockedEvent" => ParseUnlockedEventEntityId(obj, __typename),
                "UnmarkedAsDuplicateEvent" => ParseUnmarkedAsDuplicateEventEntityId(obj, __typename),
                "UnpinnedEvent" => ParseUnpinnedEventEntityId(obj, __typename),
                "UnsubscribedEvent" => ParseUnsubscribedEventEntityId(obj, __typename),
                "User" => ParseUserEntityId(obj, __typename),
                "UserBlockedEvent" => ParseUserBlockedEventEntityId(obj, __typename),
                "UserContentEdit" => ParseUserContentEditEntityId(obj, __typename),
                "UserStatus" => ParseUserStatusEntityId(obj, __typename),
                "VerifiableDomain" => ParseVerifiableDomainEntityId(obj, __typename),
                "Workflow" => ParseWorkflowEntityId(obj, __typename),
                "WorkflowRun" => ParseWorkflowRunEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "MigrationSource" => FormatMigrationSourceEntityId(entityId),
                "AddedToProjectEvent" => FormatAddedToProjectEventEntityId(entityId),
                "App" => FormatAppEntityId(entityId),
                "AssignedEvent" => FormatAssignedEventEntityId(entityId),
                "AutoMergeDisabledEvent" => FormatAutoMergeDisabledEventEntityId(entityId),
                "AutoMergeEnabledEvent" => FormatAutoMergeEnabledEventEntityId(entityId),
                "AutoRebaseEnabledEvent" => FormatAutoRebaseEnabledEventEntityId(entityId),
                "AutoSquashEnabledEvent" => FormatAutoSquashEnabledEventEntityId(entityId),
                "AutomaticBaseChangeFailedEvent" => FormatAutomaticBaseChangeFailedEventEntityId(entityId),
                "AutomaticBaseChangeSucceededEvent" => FormatAutomaticBaseChangeSucceededEventEntityId(entityId),
                "BaseRefChangedEvent" => FormatBaseRefChangedEventEntityId(entityId),
                "BaseRefDeletedEvent" => FormatBaseRefDeletedEventEntityId(entityId),
                "BaseRefForcePushedEvent" => FormatBaseRefForcePushedEventEntityId(entityId),
                "Blob" => FormatBlobEntityId(entityId),
                "Bot" => FormatBotEntityId(entityId),
                "BranchProtectionRule" => FormatBranchProtectionRuleEntityId(entityId),
                "BypassForcePushAllowance" => FormatBypassForcePushAllowanceEntityId(entityId),
                "BypassPullRequestAllowance" => FormatBypassPullRequestAllowanceEntityId(entityId),
                "CWE" => FormatCWEEntityId(entityId),
                "CheckRun" => FormatCheckRunEntityId(entityId),
                "CheckSuite" => FormatCheckSuiteEntityId(entityId),
                "ClosedEvent" => FormatClosedEventEntityId(entityId),
                "CodeOfConduct" => FormatCodeOfConductEntityId(entityId),
                "CommentDeletedEvent" => FormatCommentDeletedEventEntityId(entityId),
                "Commit" => FormatCommitEntityId(entityId),
                "CommitComment" => FormatCommitCommentEntityId(entityId),
                "CommitCommentThread" => FormatCommitCommentThreadEntityId(entityId),
                "ConnectedEvent" => FormatConnectedEventEntityId(entityId),
                "ConvertToDraftEvent" => FormatConvertToDraftEventEntityId(entityId),
                "ConvertedNoteToIssueEvent" => FormatConvertedNoteToIssueEventEntityId(entityId),
                "ConvertedToDiscussionEvent" => FormatConvertedToDiscussionEventEntityId(entityId),
                "CrossReferencedEvent" => FormatCrossReferencedEventEntityId(entityId),
                "DemilestonedEvent" => FormatDemilestonedEventEntityId(entityId),
                "DeployKey" => FormatDeployKeyEntityId(entityId),
                "DeployedEvent" => FormatDeployedEventEntityId(entityId),
                "Deployment" => FormatDeploymentEntityId(entityId),
                "DeploymentEnvironmentChangedEvent" => FormatDeploymentEnvironmentChangedEventEntityId(entityId),
                "DeploymentReview" => FormatDeploymentReviewEntityId(entityId),
                "DeploymentStatus" => FormatDeploymentStatusEntityId(entityId),
                "DisconnectedEvent" => FormatDisconnectedEventEntityId(entityId),
                "Discussion" => FormatDiscussionEntityId(entityId),
                "DiscussionCategory" => FormatDiscussionCategoryEntityId(entityId),
                "DiscussionComment" => FormatDiscussionCommentEntityId(entityId),
                "Enterprise" => FormatEnterpriseEntityId(entityId),
                "EnterpriseAdministratorInvitation" => FormatEnterpriseAdministratorInvitationEntityId(entityId),
                "EnterpriseIdentityProvider" => FormatEnterpriseIdentityProviderEntityId(entityId),
                "EnterpriseRepositoryInfo" => FormatEnterpriseRepositoryInfoEntityId(entityId),
                "EnterpriseServerInstallation" => FormatEnterpriseServerInstallationEntityId(entityId),
                "EnterpriseServerUserAccount" => FormatEnterpriseServerUserAccountEntityId(entityId),
                "EnterpriseServerUserAccountEmail" => FormatEnterpriseServerUserAccountEmailEntityId(entityId),
                "EnterpriseServerUserAccountsUpload" => FormatEnterpriseServerUserAccountsUploadEntityId(entityId),
                "EnterpriseUserAccount" => FormatEnterpriseUserAccountEntityId(entityId),
                "Environment" => FormatEnvironmentEntityId(entityId),
                "ExternalIdentity" => FormatExternalIdentityEntityId(entityId),
                "Gist" => FormatGistEntityId(entityId),
                "GistComment" => FormatGistCommentEntityId(entityId),
                "HeadRefDeletedEvent" => FormatHeadRefDeletedEventEntityId(entityId),
                "HeadRefForcePushedEvent" => FormatHeadRefForcePushedEventEntityId(entityId),
                "HeadRefRestoredEvent" => FormatHeadRefRestoredEventEntityId(entityId),
                "Import" => FormatImportEntityId(entityId),
                "IpAllowListEntry" => FormatIpAllowListEntryEntityId(entityId),
                "Issue" => FormatIssueEntityId(entityId),
                "IssueComment" => FormatIssueCommentEntityId(entityId),
                "Label" => FormatLabelEntityId(entityId),
                "LabeledEvent" => FormatLabeledEventEntityId(entityId),
                "Language" => FormatLanguageEntityId(entityId),
                "License" => FormatLicenseEntityId(entityId),
                "LockedEvent" => FormatLockedEventEntityId(entityId),
                "Mannequin" => FormatMannequinEntityId(entityId),
                "MarkedAsDuplicateEvent" => FormatMarkedAsDuplicateEventEntityId(entityId),
                "MarketplaceCategory" => FormatMarketplaceCategoryEntityId(entityId),
                "MarketplaceListing" => FormatMarketplaceListingEntityId(entityId),
                "MembersCanDeleteReposClearAuditEntry" => FormatMembersCanDeleteReposClearAuditEntryEntityId(entityId),
                "MembersCanDeleteReposDisableAuditEntry" => FormatMembersCanDeleteReposDisableAuditEntryEntityId(entityId),
                "MembersCanDeleteReposEnableAuditEntry" => FormatMembersCanDeleteReposEnableAuditEntryEntityId(entityId),
                "MentionedEvent" => FormatMentionedEventEntityId(entityId),
                "MergedEvent" => FormatMergedEventEntityId(entityId),
                "Milestone" => FormatMilestoneEntityId(entityId),
                "MilestonedEvent" => FormatMilestonedEventEntityId(entityId),
                "MovedColumnsInProjectEvent" => FormatMovedColumnsInProjectEventEntityId(entityId),
                "OIDCProvider" => FormatOIDCProviderEntityId(entityId),
                "OauthApplicationCreateAuditEntry" => FormatOauthApplicationCreateAuditEntryEntityId(entityId),
                "OrgAddBillingManagerAuditEntry" => FormatOrgAddBillingManagerAuditEntryEntityId(entityId),
                "OrgAddMemberAuditEntry" => FormatOrgAddMemberAuditEntryEntityId(entityId),
                "OrgBlockUserAuditEntry" => FormatOrgBlockUserAuditEntryEntityId(entityId),
                "OrgConfigDisableCollaboratorsOnlyAuditEntry" => FormatOrgConfigDisableCollaboratorsOnlyAuditEntryEntityId(entityId),
                "OrgConfigEnableCollaboratorsOnlyAuditEntry" => FormatOrgConfigEnableCollaboratorsOnlyAuditEntryEntityId(entityId),
                "OrgCreateAuditEntry" => FormatOrgCreateAuditEntryEntityId(entityId),
                "OrgDisableOauthAppRestrictionsAuditEntry" => FormatOrgDisableOauthAppRestrictionsAuditEntryEntityId(entityId),
                "OrgDisableSamlAuditEntry" => FormatOrgDisableSamlAuditEntryEntityId(entityId),
                "OrgDisableTwoFactorRequirementAuditEntry" => FormatOrgDisableTwoFactorRequirementAuditEntryEntityId(entityId),
                "OrgEnableOauthAppRestrictionsAuditEntry" => FormatOrgEnableOauthAppRestrictionsAuditEntryEntityId(entityId),
                "OrgEnableSamlAuditEntry" => FormatOrgEnableSamlAuditEntryEntityId(entityId),
                "OrgEnableTwoFactorRequirementAuditEntry" => FormatOrgEnableTwoFactorRequirementAuditEntryEntityId(entityId),
                "OrgInviteMemberAuditEntry" => FormatOrgInviteMemberAuditEntryEntityId(entityId),
                "OrgInviteToBusinessAuditEntry" => FormatOrgInviteToBusinessAuditEntryEntityId(entityId),
                "OrgOauthAppAccessApprovedAuditEntry" => FormatOrgOauthAppAccessApprovedAuditEntryEntityId(entityId),
                "OrgOauthAppAccessDeniedAuditEntry" => FormatOrgOauthAppAccessDeniedAuditEntryEntityId(entityId),
                "OrgOauthAppAccessRequestedAuditEntry" => FormatOrgOauthAppAccessRequestedAuditEntryEntityId(entityId),
                "OrgRemoveBillingManagerAuditEntry" => FormatOrgRemoveBillingManagerAuditEntryEntityId(entityId),
                "OrgRemoveMemberAuditEntry" => FormatOrgRemoveMemberAuditEntryEntityId(entityId),
                "OrgRemoveOutsideCollaboratorAuditEntry" => FormatOrgRemoveOutsideCollaboratorAuditEntryEntityId(entityId),
                "OrgRestoreMemberAuditEntry" => FormatOrgRestoreMemberAuditEntryEntityId(entityId),
                "OrgUnblockUserAuditEntry" => FormatOrgUnblockUserAuditEntryEntityId(entityId),
                "OrgUpdateDefaultRepositoryPermissionAuditEntry" => FormatOrgUpdateDefaultRepositoryPermissionAuditEntryEntityId(entityId),
                "OrgUpdateMemberAuditEntry" => FormatOrgUpdateMemberAuditEntryEntityId(entityId),
                "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" => FormatOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityId(entityId),
                "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" => FormatOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityId(entityId),
                "Organization" => FormatOrganizationEntityId(entityId),
                "OrganizationIdentityProvider" => FormatOrganizationIdentityProviderEntityId(entityId),
                "OrganizationInvitation" => FormatOrganizationInvitationEntityId(entityId),
                "Package" => FormatPackageEntityId(entityId),
                "PackageFile" => FormatPackageFileEntityId(entityId),
                "PackageTag" => FormatPackageTagEntityId(entityId),
                "PackageVersion" => FormatPackageVersionEntityId(entityId),
                "PinnedDiscussion" => FormatPinnedDiscussionEntityId(entityId),
                "PinnedEvent" => FormatPinnedEventEntityId(entityId),
                "PinnedIssue" => FormatPinnedIssueEntityId(entityId),
                "PrivateRepositoryForkingDisableAuditEntry" => FormatPrivateRepositoryForkingDisableAuditEntryEntityId(entityId),
                "PrivateRepositoryForkingEnableAuditEntry" => FormatPrivateRepositoryForkingEnableAuditEntryEntityId(entityId),
                "Project" => FormatProjectEntityId(entityId),
                "ProjectCard" => FormatProjectCardEntityId(entityId),
                "ProjectColumn" => FormatProjectColumnEntityId(entityId),
                "ProjectNext" => FormatProjectNextEntityId(entityId),
                "ProjectNextItem" => FormatProjectNextItemEntityId(entityId),
                "ProjectNextItemFieldValue" => FormatProjectNextItemFieldValueEntityId(entityId),
                "PublicKey" => FormatPublicKeyEntityId(entityId),
                "PullRequest" => FormatPullRequestEntityId(entityId),
                "PullRequestCommit" => FormatPullRequestCommitEntityId(entityId),
                "PullRequestCommitCommentThread" => FormatPullRequestCommitCommentThreadEntityId(entityId),
                "PullRequestReview" => FormatPullRequestReviewEntityId(entityId),
                "PullRequestReviewComment" => FormatPullRequestReviewCommentEntityId(entityId),
                "PullRequestReviewThread" => FormatPullRequestReviewThreadEntityId(entityId),
                "Push" => FormatPushEntityId(entityId),
                "PushAllowance" => FormatPushAllowanceEntityId(entityId),
                "Reaction" => FormatReactionEntityId(entityId),
                "ReadyForReviewEvent" => FormatReadyForReviewEventEntityId(entityId),
                "Ref" => FormatRefEntityId(entityId),
                "ReferencedEvent" => FormatReferencedEventEntityId(entityId),
                "Release" => FormatReleaseEntityId(entityId),
                "ReleaseAsset" => FormatReleaseAssetEntityId(entityId),
                "RemovedFromProjectEvent" => FormatRemovedFromProjectEventEntityId(entityId),
                "RenamedTitleEvent" => FormatRenamedTitleEventEntityId(entityId),
                "ReopenedEvent" => FormatReopenedEventEntityId(entityId),
                "RepoAccessAuditEntry" => FormatRepoAccessAuditEntryEntityId(entityId),
                "RepoAddMemberAuditEntry" => FormatRepoAddMemberAuditEntryEntityId(entityId),
                "RepoAddTopicAuditEntry" => FormatRepoAddTopicAuditEntryEntityId(entityId),
                "RepoArchivedAuditEntry" => FormatRepoArchivedAuditEntryEntityId(entityId),
                "RepoChangeMergeSettingAuditEntry" => FormatRepoChangeMergeSettingAuditEntryEntityId(entityId),
                "RepoConfigDisableAnonymousGitAccessAuditEntry" => FormatRepoConfigDisableAnonymousGitAccessAuditEntryEntityId(entityId),
                "RepoConfigDisableCollaboratorsOnlyAuditEntry" => FormatRepoConfigDisableCollaboratorsOnlyAuditEntryEntityId(entityId),
                "RepoConfigDisableContributorsOnlyAuditEntry" => FormatRepoConfigDisableContributorsOnlyAuditEntryEntityId(entityId),
                "RepoConfigDisableSockpuppetDisallowedAuditEntry" => FormatRepoConfigDisableSockpuppetDisallowedAuditEntryEntityId(entityId),
                "RepoConfigEnableAnonymousGitAccessAuditEntry" => FormatRepoConfigEnableAnonymousGitAccessAuditEntryEntityId(entityId),
                "RepoConfigEnableCollaboratorsOnlyAuditEntry" => FormatRepoConfigEnableCollaboratorsOnlyAuditEntryEntityId(entityId),
                "RepoConfigEnableContributorsOnlyAuditEntry" => FormatRepoConfigEnableContributorsOnlyAuditEntryEntityId(entityId),
                "RepoConfigEnableSockpuppetDisallowedAuditEntry" => FormatRepoConfigEnableSockpuppetDisallowedAuditEntryEntityId(entityId),
                "RepoConfigLockAnonymousGitAccessAuditEntry" => FormatRepoConfigLockAnonymousGitAccessAuditEntryEntityId(entityId),
                "RepoConfigUnlockAnonymousGitAccessAuditEntry" => FormatRepoConfigUnlockAnonymousGitAccessAuditEntryEntityId(entityId),
                "RepoCreateAuditEntry" => FormatRepoCreateAuditEntryEntityId(entityId),
                "RepoDestroyAuditEntry" => FormatRepoDestroyAuditEntryEntityId(entityId),
                "RepoRemoveMemberAuditEntry" => FormatRepoRemoveMemberAuditEntryEntityId(entityId),
                "RepoRemoveTopicAuditEntry" => FormatRepoRemoveTopicAuditEntryEntityId(entityId),
                "Repository" => FormatRepositoryEntityId(entityId),
                "RepositoryInvitation" => FormatRepositoryInvitationEntityId(entityId),
                "RepositoryMigration" => FormatRepositoryMigrationEntityId(entityId),
                "RepositoryTopic" => FormatRepositoryTopicEntityId(entityId),
                "RepositoryVisibilityChangeDisableAuditEntry" => FormatRepositoryVisibilityChangeDisableAuditEntryEntityId(entityId),
                "RepositoryVisibilityChangeEnableAuditEntry" => FormatRepositoryVisibilityChangeEnableAuditEntryEntityId(entityId),
                "RepositoryVulnerabilityAlert" => FormatRepositoryVulnerabilityAlertEntityId(entityId),
                "ReviewDismissalAllowance" => FormatReviewDismissalAllowanceEntityId(entityId),
                "ReviewDismissedEvent" => FormatReviewDismissedEventEntityId(entityId),
                "ReviewRequest" => FormatReviewRequestEntityId(entityId),
                "ReviewRequestRemovedEvent" => FormatReviewRequestRemovedEventEntityId(entityId),
                "ReviewRequestedEvent" => FormatReviewRequestedEventEntityId(entityId),
                "SavedReply" => FormatSavedReplyEntityId(entityId),
                "SecurityAdvisory" => FormatSecurityAdvisoryEntityId(entityId),
                "SponsorsActivity" => FormatSponsorsActivityEntityId(entityId),
                "SponsorsListing" => FormatSponsorsListingEntityId(entityId),
                "SponsorsTier" => FormatSponsorsTierEntityId(entityId),
                "Sponsorship" => FormatSponsorshipEntityId(entityId),
                "SponsorshipNewsletter" => FormatSponsorshipNewsletterEntityId(entityId),
                "Status" => FormatStatusEntityId(entityId),
                "StatusCheckRollup" => FormatStatusCheckRollupEntityId(entityId),
                "StatusContext" => FormatStatusContextEntityId(entityId),
                "SubscribedEvent" => FormatSubscribedEventEntityId(entityId),
                "Tag" => FormatTagEntityId(entityId),
                "Team" => FormatTeamEntityId(entityId),
                "TeamAddMemberAuditEntry" => FormatTeamAddMemberAuditEntryEntityId(entityId),
                "TeamAddRepositoryAuditEntry" => FormatTeamAddRepositoryAuditEntryEntityId(entityId),
                "TeamChangeParentTeamAuditEntry" => FormatTeamChangeParentTeamAuditEntryEntityId(entityId),
                "TeamDiscussion" => FormatTeamDiscussionEntityId(entityId),
                "TeamDiscussionComment" => FormatTeamDiscussionCommentEntityId(entityId),
                "TeamRemoveMemberAuditEntry" => FormatTeamRemoveMemberAuditEntryEntityId(entityId),
                "TeamRemoveRepositoryAuditEntry" => FormatTeamRemoveRepositoryAuditEntryEntityId(entityId),
                "Topic" => FormatTopicEntityId(entityId),
                "TransferredEvent" => FormatTransferredEventEntityId(entityId),
                "Tree" => FormatTreeEntityId(entityId),
                "UnassignedEvent" => FormatUnassignedEventEntityId(entityId),
                "UnlabeledEvent" => FormatUnlabeledEventEntityId(entityId),
                "UnlockedEvent" => FormatUnlockedEventEntityId(entityId),
                "UnmarkedAsDuplicateEvent" => FormatUnmarkedAsDuplicateEventEntityId(entityId),
                "UnpinnedEvent" => FormatUnpinnedEventEntityId(entityId),
                "UnsubscribedEvent" => FormatUnsubscribedEventEntityId(entityId),
                "User" => FormatUserEntityId(entityId),
                "UserBlockedEvent" => FormatUserBlockedEventEntityId(entityId),
                "UserContentEdit" => FormatUserContentEditEntityId(entityId),
                "UserStatus" => FormatUserStatusEntityId(entityId),
                "VerifiableDomain" => FormatVerifiableDomainEntityId(entityId),
                "Workflow" => FormatWorkflowEntityId(entityId),
                "WorkflowRun" => FormatWorkflowRunEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseMigrationSourceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMigrationSourceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAddedToProjectEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAddedToProjectEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAppEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAppEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAssignedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAssignedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAutoMergeDisabledEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAutoMergeDisabledEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAutoMergeEnabledEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAutoMergeEnabledEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAutoRebaseEnabledEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAutoRebaseEnabledEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAutoSquashEnabledEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAutoSquashEnabledEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAutomaticBaseChangeFailedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAutomaticBaseChangeFailedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAutomaticBaseChangeSucceededEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAutomaticBaseChangeSucceededEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBaseRefChangedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBaseRefChangedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBaseRefDeletedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBaseRefDeletedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBaseRefForcePushedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBaseRefForcePushedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBlobEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBlobEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBotEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBotEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBranchProtectionRuleEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBranchProtectionRuleEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBypassForcePushAllowanceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBypassForcePushAllowanceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBypassPullRequestAllowanceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBypassPullRequestAllowanceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCWEEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCWEEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCheckRunEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCheckRunEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCheckSuiteEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCheckSuiteEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseClosedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatClosedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCodeOfConductEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCodeOfConductEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCommentDeletedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCommentDeletedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCommitEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCommitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCommitCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCommitCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCommitCommentThreadEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCommitCommentThreadEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseConnectedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatConnectedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseConvertToDraftEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatConvertToDraftEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseConvertedNoteToIssueEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatConvertedNoteToIssueEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseConvertedToDiscussionEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatConvertedToDiscussionEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCrossReferencedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCrossReferencedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDemilestonedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDemilestonedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeployKeyEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDeployKeyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeployedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDeployedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeploymentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDeploymentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeploymentEnvironmentChangedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDeploymentEnvironmentChangedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeploymentReviewEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDeploymentReviewEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDeploymentStatusEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDeploymentStatusEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDisconnectedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDisconnectedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDiscussionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDiscussionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDiscussionCategoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDiscussionCategoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDiscussionCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDiscussionCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseAdministratorInvitationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseAdministratorInvitationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseIdentityProviderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseIdentityProviderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseRepositoryInfoEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseRepositoryInfoEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseServerInstallationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseServerInstallationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseServerUserAccountEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseServerUserAccountEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseServerUserAccountEmailEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseServerUserAccountEmailEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseServerUserAccountsUploadEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseServerUserAccountsUploadEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnterpriseUserAccountEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnterpriseUserAccountEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseEnvironmentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnvironmentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseExternalIdentityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatExternalIdentityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseGistEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatGistEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseGistCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatGistCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseHeadRefDeletedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatHeadRefDeletedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseHeadRefForcePushedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatHeadRefForcePushedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseHeadRefRestoredEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatHeadRefRestoredEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseImportEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatImportEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseIpAllowListEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatIpAllowListEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseIssueEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatIssueEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseIssueCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatIssueCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLabelEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLabelEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLabeledEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLabeledEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLanguageEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLanguageEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLicenseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLicenseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLockedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLockedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMannequinEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMannequinEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMarkedAsDuplicateEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMarkedAsDuplicateEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMarketplaceCategoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMarketplaceCategoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMarketplaceListingEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMarketplaceListingEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMembersCanDeleteReposClearAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMembersCanDeleteReposClearAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMembersCanDeleteReposDisableAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMembersCanDeleteReposDisableAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMembersCanDeleteReposEnableAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMembersCanDeleteReposEnableAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMentionedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMentionedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMergedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMergedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMilestoneEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMilestoneEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMilestonedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMilestonedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseMovedColumnsInProjectEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatMovedColumnsInProjectEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOIDCProviderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOIDCProviderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOauthApplicationCreateAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOauthApplicationCreateAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgAddBillingManagerAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgAddBillingManagerAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgAddMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgAddMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgBlockUserAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgBlockUserAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgConfigDisableCollaboratorsOnlyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgConfigDisableCollaboratorsOnlyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgConfigEnableCollaboratorsOnlyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgConfigEnableCollaboratorsOnlyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgCreateAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgCreateAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgDisableOauthAppRestrictionsAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgDisableOauthAppRestrictionsAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgDisableSamlAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgDisableSamlAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgDisableTwoFactorRequirementAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgDisableTwoFactorRequirementAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgEnableOauthAppRestrictionsAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgEnableOauthAppRestrictionsAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgEnableSamlAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgEnableSamlAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgEnableTwoFactorRequirementAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgEnableTwoFactorRequirementAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgInviteMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgInviteMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgInviteToBusinessAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgInviteToBusinessAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgOauthAppAccessApprovedAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgOauthAppAccessApprovedAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgOauthAppAccessDeniedAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgOauthAppAccessDeniedAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgOauthAppAccessRequestedAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgOauthAppAccessRequestedAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgRemoveBillingManagerAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgRemoveBillingManagerAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgRemoveMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgRemoveMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgRemoveOutsideCollaboratorAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgRemoveOutsideCollaboratorAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgRestoreMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgRestoreMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgUnblockUserAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgUnblockUserAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgUpdateDefaultRepositoryPermissionAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgUpdateDefaultRepositoryPermissionAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgUpdateMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgUpdateMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgUpdateMemberRepositoryCreationPermissionAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrgUpdateMemberRepositoryInvitationPermissionAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrganizationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrganizationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrganizationIdentityProviderEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrganizationIdentityProviderEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseOrganizationInvitationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatOrganizationInvitationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePackageEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPackageEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePackageFileEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPackageFileEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePackageTagEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPackageTagEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePackageVersionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPackageVersionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePinnedDiscussionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPinnedDiscussionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePinnedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPinnedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePinnedIssueEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPinnedIssueEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePrivateRepositoryForkingDisableAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPrivateRepositoryForkingDisableAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePrivateRepositoryForkingEnableAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPrivateRepositoryForkingEnableAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectCardEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectCardEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectColumnEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectColumnEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectNextEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectNextEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectNextItemEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectNextItemEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProjectNextItemFieldValueEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProjectNextItemFieldValueEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePublicKeyEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPublicKeyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestCommitEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestCommitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestCommitCommentThreadEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestCommitCommentThreadEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestReviewEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestReviewEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestReviewCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestReviewCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestReviewThreadEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestReviewThreadEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePushEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPushEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePushAllowanceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPushAllowanceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReactionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReactionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReadyForReviewEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReadyForReviewEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRefEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRefEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReferencedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReferencedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReleaseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReleaseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReleaseAssetEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReleaseAssetEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRemovedFromProjectEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRemovedFromProjectEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRenamedTitleEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRenamedTitleEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReopenedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReopenedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoAccessAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoAccessAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoAddMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoAddMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoAddTopicAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoAddTopicAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoArchivedAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoArchivedAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoChangeMergeSettingAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoChangeMergeSettingAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigDisableAnonymousGitAccessAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigDisableAnonymousGitAccessAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigDisableCollaboratorsOnlyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigDisableCollaboratorsOnlyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigDisableContributorsOnlyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigDisableContributorsOnlyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigDisableSockpuppetDisallowedAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigDisableSockpuppetDisallowedAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigEnableAnonymousGitAccessAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigEnableAnonymousGitAccessAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigEnableCollaboratorsOnlyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigEnableCollaboratorsOnlyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigEnableContributorsOnlyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigEnableContributorsOnlyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigEnableSockpuppetDisallowedAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigEnableSockpuppetDisallowedAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigLockAnonymousGitAccessAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigLockAnonymousGitAccessAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoConfigUnlockAnonymousGitAccessAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoConfigUnlockAnonymousGitAccessAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoCreateAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoCreateAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoDestroyAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoDestroyAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoRemoveMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoRemoveMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepoRemoveTopicAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepoRemoveTopicAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryInvitationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryInvitationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryMigrationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryMigrationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryTopicEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryTopicEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryVisibilityChangeDisableAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryVisibilityChangeDisableAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryVisibilityChangeEnableAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryVisibilityChangeEnableAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRepositoryVulnerabilityAlertEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryVulnerabilityAlertEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewDismissalAllowanceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReviewDismissalAllowanceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewDismissedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReviewDismissedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewRequestEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReviewRequestEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewRequestRemovedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReviewRequestRemovedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReviewRequestedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReviewRequestedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSavedReplyEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSavedReplyEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSecurityAdvisoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSecurityAdvisoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSponsorsActivityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSponsorsActivityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSponsorsListingEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSponsorsListingEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSponsorsTierEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSponsorsTierEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSponsorshipEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSponsorshipEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSponsorshipNewsletterEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSponsorshipNewsletterEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseStatusEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatStatusEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseStatusCheckRollupEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatStatusCheckRollupEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseStatusContextEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatStatusContextEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubscribedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSubscribedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTagEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTagEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamAddMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamAddMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamAddRepositoryAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamAddRepositoryAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamChangeParentTeamAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamChangeParentTeamAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamDiscussionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamDiscussionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamDiscussionCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamDiscussionCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamRemoveMemberAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamRemoveMemberAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTeamRemoveRepositoryAuditEntryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTeamRemoveRepositoryAuditEntryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTopicEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTopicEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTransferredEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTransferredEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTreeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTreeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnassignedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUnassignedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnlabeledEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUnlabeledEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnlockedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUnlockedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnmarkedAsDuplicateEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUnmarkedAsDuplicateEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnpinnedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUnpinnedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUnsubscribedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUnsubscribedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserBlockedEventEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserBlockedEventEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserContentEditEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserContentEditEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseUserStatusEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatUserStatusEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseVerifiableDomainEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatVerifiableDomainEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseWorkflowEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatWorkflowEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseWorkflowRunEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatWorkflowRunEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.4.1.0")]
    public partial class GithubGraphQLClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GithubGraphQLClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
